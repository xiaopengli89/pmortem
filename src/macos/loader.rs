/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUFAMILY_ARM_IBIZA: u32 = 4197663070;
pub const CPUFAMILY_ARM_PALMA: u32 = 1912690738;
pub const CPUFAMILY_ARM_COLL: u32 = 678884789;
pub const CPUFAMILY_ARM_LOBOS: u32 = 1598941843;
pub const CPUFAMILY_ARM_DONAN: u32 = 1867590060;
pub const CPUFAMILY_ARM_TAHITI: u32 = 1976872121;
pub const CPUFAMILY_ARM_TUPAI: u32 = 541402832;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUSUBFAMILY_ARM_HA: u32 = 6;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const ARM_THREAD_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const USE_CLANG_LIMITS: u32 = 0;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_SERVICE_THROTTLED: u32 = 9;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_PORT_SERVICE_THROTTLED_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const MPO_EXCEPTION_PORT: u32 = 32768;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const PPNUM_MAX: u32 = 4294967295;
pub const ARM_THREAD_STATE: u32 = 1;
pub const ARM_UNIFIED_THREAD_STATE: u32 = 1;
pub const ARM_VFP_STATE: u32 = 2;
pub const ARM_EXCEPTION_STATE: u32 = 3;
pub const ARM_DEBUG_STATE: u32 = 4;
pub const THREAD_STATE_NONE: u32 = 5;
pub const ARM_THREAD_STATE64: u32 = 6;
pub const ARM_EXCEPTION_STATE64: u32 = 7;
pub const ARM_THREAD_STATE32: u32 = 9;
pub const ARM_EXCEPTION_STATE64_V2: u32 = 10;
pub const ARM_DEBUG_STATE32: u32 = 14;
pub const ARM_DEBUG_STATE64: u32 = 15;
pub const ARM_NEON_STATE: u32 = 16;
pub const ARM_NEON_STATE64: u32 = 17;
pub const ARM_CPMU_STATE64: u32 = 18;
pub const ARM_PAGEIN_STATE: u32 = 27;
pub const THREAD_STATE_FLAVORS: u32 = 29;
pub const MACHINE_THREAD_STATE: u32 = 1;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const MH_MAGIC: u32 = 4277009102;
pub const MH_CIGAM: u32 = 3472551422;
pub const MH_MAGIC_64: u32 = 4277009103;
pub const MH_CIGAM_64: u32 = 3489328638;
pub const MH_OBJECT: u32 = 1;
pub const MH_EXECUTE: u32 = 2;
pub const MH_FVMLIB: u32 = 3;
pub const MH_CORE: u32 = 4;
pub const MH_PRELOAD: u32 = 5;
pub const MH_DYLIB: u32 = 6;
pub const MH_DYLINKER: u32 = 7;
pub const MH_BUNDLE: u32 = 8;
pub const MH_DYLIB_STUB: u32 = 9;
pub const MH_DSYM: u32 = 10;
pub const MH_KEXT_BUNDLE: u32 = 11;
pub const MH_FILESET: u32 = 12;
pub const MH_GPU_EXECUTE: u32 = 13;
pub const MH_GPU_DYLIB: u32 = 14;
pub const MH_NOUNDEFS: u32 = 1;
pub const MH_INCRLINK: u32 = 2;
pub const MH_DYLDLINK: u32 = 4;
pub const MH_BINDATLOAD: u32 = 8;
pub const MH_PREBOUND: u32 = 16;
pub const MH_SPLIT_SEGS: u32 = 32;
pub const MH_LAZY_INIT: u32 = 64;
pub const MH_TWOLEVEL: u32 = 128;
pub const MH_FORCE_FLAT: u32 = 256;
pub const MH_NOMULTIDEFS: u32 = 512;
pub const MH_NOFIXPREBINDING: u32 = 1024;
pub const MH_PREBINDABLE: u32 = 2048;
pub const MH_ALLMODSBOUND: u32 = 4096;
pub const MH_SUBSECTIONS_VIA_SYMBOLS: u32 = 8192;
pub const MH_CANONICAL: u32 = 16384;
pub const MH_WEAK_DEFINES: u32 = 32768;
pub const MH_BINDS_TO_WEAK: u32 = 65536;
pub const MH_ALLOW_STACK_EXECUTION: u32 = 131072;
pub const MH_ROOT_SAFE: u32 = 262144;
pub const MH_SETUID_SAFE: u32 = 524288;
pub const MH_NO_REEXPORTED_DYLIBS: u32 = 1048576;
pub const MH_PIE: u32 = 2097152;
pub const MH_DEAD_STRIPPABLE_DYLIB: u32 = 4194304;
pub const MH_HAS_TLV_DESCRIPTORS: u32 = 8388608;
pub const MH_NO_HEAP_EXECUTION: u32 = 16777216;
pub const MH_APP_EXTENSION_SAFE: u32 = 33554432;
pub const MH_NLIST_OUTOFSYNC_WITH_DYLDINFO: u32 = 67108864;
pub const MH_SIM_SUPPORT: u32 = 134217728;
pub const MH_IMPLICIT_PAGEZERO: u32 = 268435456;
pub const MH_DYLIB_IN_CACHE: u32 = 2147483648;
pub const LC_REQ_DYLD: u32 = 2147483648;
pub const LC_SEGMENT: u32 = 1;
pub const LC_SYMTAB: u32 = 2;
pub const LC_SYMSEG: u32 = 3;
pub const LC_THREAD: u32 = 4;
pub const LC_UNIXTHREAD: u32 = 5;
pub const LC_LOADFVMLIB: u32 = 6;
pub const LC_IDFVMLIB: u32 = 7;
pub const LC_IDENT: u32 = 8;
pub const LC_FVMFILE: u32 = 9;
pub const LC_PREPAGE: u32 = 10;
pub const LC_DYSYMTAB: u32 = 11;
pub const LC_LOAD_DYLIB: u32 = 12;
pub const LC_ID_DYLIB: u32 = 13;
pub const LC_LOAD_DYLINKER: u32 = 14;
pub const LC_ID_DYLINKER: u32 = 15;
pub const LC_PREBOUND_DYLIB: u32 = 16;
pub const LC_ROUTINES: u32 = 17;
pub const LC_SUB_FRAMEWORK: u32 = 18;
pub const LC_SUB_UMBRELLA: u32 = 19;
pub const LC_SUB_CLIENT: u32 = 20;
pub const LC_SUB_LIBRARY: u32 = 21;
pub const LC_TWOLEVEL_HINTS: u32 = 22;
pub const LC_PREBIND_CKSUM: u32 = 23;
pub const LC_LOAD_WEAK_DYLIB: u32 = 2147483672;
pub const LC_SEGMENT_64: u32 = 25;
pub const LC_ROUTINES_64: u32 = 26;
pub const LC_UUID: u32 = 27;
pub const LC_RPATH: u32 = 2147483676;
pub const LC_CODE_SIGNATURE: u32 = 29;
pub const LC_SEGMENT_SPLIT_INFO: u32 = 30;
pub const LC_REEXPORT_DYLIB: u32 = 2147483679;
pub const LC_LAZY_LOAD_DYLIB: u32 = 32;
pub const LC_ENCRYPTION_INFO: u32 = 33;
pub const LC_DYLD_INFO: u32 = 34;
pub const LC_DYLD_INFO_ONLY: u32 = 2147483682;
pub const LC_LOAD_UPWARD_DYLIB: u32 = 2147483683;
pub const LC_VERSION_MIN_MACOSX: u32 = 36;
pub const LC_VERSION_MIN_IPHONEOS: u32 = 37;
pub const LC_FUNCTION_STARTS: u32 = 38;
pub const LC_DYLD_ENVIRONMENT: u32 = 39;
pub const LC_MAIN: u32 = 2147483688;
pub const LC_DATA_IN_CODE: u32 = 41;
pub const LC_SOURCE_VERSION: u32 = 42;
pub const LC_DYLIB_CODE_SIGN_DRS: u32 = 43;
pub const LC_ENCRYPTION_INFO_64: u32 = 44;
pub const LC_LINKER_OPTION: u32 = 45;
pub const LC_LINKER_OPTIMIZATION_HINT: u32 = 46;
pub const LC_VERSION_MIN_TVOS: u32 = 47;
pub const LC_VERSION_MIN_WATCHOS: u32 = 48;
pub const LC_NOTE: u32 = 49;
pub const LC_BUILD_VERSION: u32 = 50;
pub const LC_DYLD_EXPORTS_TRIE: u32 = 2147483699;
pub const LC_DYLD_CHAINED_FIXUPS: u32 = 2147483700;
pub const LC_FILESET_ENTRY: u32 = 2147483701;
pub const LC_ATOM_INFO: u32 = 54;
pub const SG_HIGHVM: u32 = 1;
pub const SG_FVMLIB: u32 = 2;
pub const SG_NORELOC: u32 = 4;
pub const SG_PROTECTED_VERSION_1: u32 = 8;
pub const SG_READ_ONLY: u32 = 16;
pub const SECTION_TYPE: u32 = 255;
pub const SECTION_ATTRIBUTES: u32 = 4294967040;
pub const S_REGULAR: u32 = 0;
pub const S_ZEROFILL: u32 = 1;
pub const S_CSTRING_LITERALS: u32 = 2;
pub const S_4BYTE_LITERALS: u32 = 3;
pub const S_8BYTE_LITERALS: u32 = 4;
pub const S_LITERAL_POINTERS: u32 = 5;
pub const S_NON_LAZY_SYMBOL_POINTERS: u32 = 6;
pub const S_LAZY_SYMBOL_POINTERS: u32 = 7;
pub const S_SYMBOL_STUBS: u32 = 8;
pub const S_MOD_INIT_FUNC_POINTERS: u32 = 9;
pub const S_MOD_TERM_FUNC_POINTERS: u32 = 10;
pub const S_COALESCED: u32 = 11;
pub const S_GB_ZEROFILL: u32 = 12;
pub const S_INTERPOSING: u32 = 13;
pub const S_16BYTE_LITERALS: u32 = 14;
pub const S_DTRACE_DOF: u32 = 15;
pub const S_LAZY_DYLIB_SYMBOL_POINTERS: u32 = 16;
pub const S_THREAD_LOCAL_REGULAR: u32 = 17;
pub const S_THREAD_LOCAL_ZEROFILL: u32 = 18;
pub const S_THREAD_LOCAL_VARIABLES: u32 = 19;
pub const S_THREAD_LOCAL_VARIABLE_POINTERS: u32 = 20;
pub const S_THREAD_LOCAL_INIT_FUNCTION_POINTERS: u32 = 21;
pub const S_INIT_FUNC_OFFSETS: u32 = 22;
pub const SECTION_ATTRIBUTES_USR: u32 = 4278190080;
pub const S_ATTR_PURE_INSTRUCTIONS: u32 = 2147483648;
pub const S_ATTR_NO_TOC: u32 = 1073741824;
pub const S_ATTR_STRIP_STATIC_SYMS: u32 = 536870912;
pub const S_ATTR_NO_DEAD_STRIP: u32 = 268435456;
pub const S_ATTR_LIVE_SUPPORT: u32 = 134217728;
pub const S_ATTR_SELF_MODIFYING_CODE: u32 = 67108864;
pub const S_ATTR_DEBUG: u32 = 33554432;
pub const SECTION_ATTRIBUTES_SYS: u32 = 16776960;
pub const S_ATTR_SOME_INSTRUCTIONS: u32 = 1024;
pub const S_ATTR_EXT_RELOC: u32 = 512;
pub const S_ATTR_LOC_RELOC: u32 = 256;
pub const SEG_PAGEZERO: &[u8; 11] = b"__PAGEZERO\0";
pub const SEG_TEXT: &[u8; 7] = b"__TEXT\0";
pub const SECT_TEXT: &[u8; 7] = b"__text\0";
pub const SECT_FVMLIB_INIT0: &[u8; 15] = b"__fvmlib_init0\0";
pub const SECT_FVMLIB_INIT1: &[u8; 15] = b"__fvmlib_init1\0";
pub const SEG_DATA: &[u8; 7] = b"__DATA\0";
pub const SECT_DATA: &[u8; 7] = b"__data\0";
pub const SECT_BSS: &[u8; 6] = b"__bss\0";
pub const SECT_COMMON: &[u8; 9] = b"__common\0";
pub const SEG_OBJC: &[u8; 7] = b"__OBJC\0";
pub const SECT_OBJC_SYMBOLS: &[u8; 15] = b"__symbol_table\0";
pub const SECT_OBJC_MODULES: &[u8; 14] = b"__module_info\0";
pub const SECT_OBJC_STRINGS: &[u8; 16] = b"__selector_strs\0";
pub const SECT_OBJC_REFS: &[u8; 16] = b"__selector_refs\0";
pub const SEG_ICON: &[u8; 7] = b"__ICON\0";
pub const SECT_ICON_HEADER: &[u8; 9] = b"__header\0";
pub const SECT_ICON_TIFF: &[u8; 7] = b"__tiff\0";
pub const SEG_LINKEDIT: &[u8; 11] = b"__LINKEDIT\0";
pub const SEG_UNIXSTACK: &[u8; 12] = b"__UNIXSTACK\0";
pub const SEG_IMPORT: &[u8; 9] = b"__IMPORT\0";
pub const DYLIB_USE_WEAK_LINK: u32 = 1;
pub const DYLIB_USE_REEXPORT: u32 = 2;
pub const DYLIB_USE_UPWARD: u32 = 4;
pub const DYLIB_USE_DELAYED_INIT: u32 = 8;
pub const DYLIB_USE_MARKER: u32 = 443815936;
pub const INDIRECT_SYMBOL_LOCAL: u32 = 2147483648;
pub const INDIRECT_SYMBOL_ABS: u32 = 1073741824;
pub const PLATFORM_UNKNOWN: u32 = 0;
pub const PLATFORM_ANY: u32 = 4294967295;
pub const PLATFORM_MACOS: u32 = 1;
pub const PLATFORM_IOS: u32 = 2;
pub const PLATFORM_TVOS: u32 = 3;
pub const PLATFORM_WATCHOS: u32 = 4;
pub const PLATFORM_BRIDGEOS: u32 = 5;
pub const PLATFORM_MACCATALYST: u32 = 6;
pub const PLATFORM_IOSSIMULATOR: u32 = 7;
pub const PLATFORM_TVOSSIMULATOR: u32 = 8;
pub const PLATFORM_WATCHOSSIMULATOR: u32 = 9;
pub const PLATFORM_DRIVERKIT: u32 = 10;
pub const PLATFORM_VISIONOS: u32 = 11;
pub const PLATFORM_VISIONOSSIMULATOR: u32 = 12;
pub const PLATFORM_FIRMWARE: u32 = 13;
pub const PLATFORM_SEPOS: u32 = 14;
pub const TOOL_CLANG: u32 = 1;
pub const TOOL_SWIFT: u32 = 2;
pub const TOOL_LD: u32 = 3;
pub const TOOL_LLD: u32 = 4;
pub const TOOL_METAL: u32 = 1024;
pub const TOOL_AIRLLD: u32 = 1025;
pub const TOOL_AIRNT: u32 = 1026;
pub const TOOL_AIRNT_PLUGIN: u32 = 1027;
pub const TOOL_AIRPACK: u32 = 1028;
pub const TOOL_GPUARCHIVER: u32 = 1031;
pub const TOOL_METAL_FRAMEWORK: u32 = 1032;
pub const REBASE_TYPE_POINTER: u32 = 1;
pub const REBASE_TYPE_TEXT_ABSOLUTE32: u32 = 2;
pub const REBASE_TYPE_TEXT_PCREL32: u32 = 3;
pub const REBASE_OPCODE_MASK: u32 = 240;
pub const REBASE_IMMEDIATE_MASK: u32 = 15;
pub const REBASE_OPCODE_DONE: u32 = 0;
pub const REBASE_OPCODE_SET_TYPE_IMM: u32 = 16;
pub const REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u32 = 32;
pub const REBASE_OPCODE_ADD_ADDR_ULEB: u32 = 48;
pub const REBASE_OPCODE_ADD_ADDR_IMM_SCALED: u32 = 64;
pub const REBASE_OPCODE_DO_REBASE_IMM_TIMES: u32 = 80;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES: u32 = 96;
pub const REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB: u32 = 112;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB: u32 = 128;
pub const BIND_TYPE_POINTER: u32 = 1;
pub const BIND_TYPE_TEXT_ABSOLUTE32: u32 = 2;
pub const BIND_TYPE_TEXT_PCREL32: u32 = 3;
pub const BIND_SPECIAL_DYLIB_SELF: u32 = 0;
pub const BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE: i32 = -1;
pub const BIND_SPECIAL_DYLIB_FLAT_LOOKUP: i32 = -2;
pub const BIND_SPECIAL_DYLIB_WEAK_LOOKUP: i32 = -3;
pub const BIND_SYMBOL_FLAGS_WEAK_IMPORT: u32 = 1;
pub const BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION: u32 = 8;
pub const BIND_OPCODE_MASK: u32 = 240;
pub const BIND_IMMEDIATE_MASK: u32 = 15;
pub const BIND_OPCODE_DONE: u32 = 0;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: u32 = 16;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: u32 = 32;
pub const BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: u32 = 48;
pub const BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: u32 = 64;
pub const BIND_OPCODE_SET_TYPE_IMM: u32 = 80;
pub const BIND_OPCODE_SET_ADDEND_SLEB: u32 = 96;
pub const BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u32 = 112;
pub const BIND_OPCODE_ADD_ADDR_ULEB: u32 = 128;
pub const BIND_OPCODE_DO_BIND: u32 = 144;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: u32 = 160;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: u32 = 176;
pub const BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: u32 = 192;
pub const BIND_OPCODE_THREADED: u32 = 208;
pub const BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB: u32 = 0;
pub const BIND_SUBOPCODE_THREADED_APPLY: u32 = 1;
pub const EXPORT_SYMBOL_FLAGS_KIND_MASK: u32 = 3;
pub const EXPORT_SYMBOL_FLAGS_KIND_REGULAR: u32 = 0;
pub const EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: u32 = 1;
pub const EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE: u32 = 2;
pub const EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION: u32 = 4;
pub const EXPORT_SYMBOL_FLAGS_REEXPORT: u32 = 8;
pub const EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: u32 = 16;
pub const EXPORT_SYMBOL_FLAGS_STATIC_RESOLVER: u32 = 32;
pub const DICE_KIND_DATA: u32 = 1;
pub const DICE_KIND_JUMP_TABLE8: u32 = 2;
pub const DICE_KIND_JUMP_TABLE16: u32 = 3;
pub const DICE_KIND_JUMP_TABLE32: u32 = 4;
pub const DICE_KIND_ABS_JUMP_TABLE32: u32 = 5;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type vm32_offset_t = u32;
pub type vm32_address_t = u32;
pub type vm32_size_t = u32;
pub type mach_port_context_t = vm_offset_t;
pub type boolean_t = ::std::os::raw::c_int;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64_v2 {
    pub __far: __uint64_t,
    pub __esr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64_v2"]
        [::std::mem::size_of::<__darwin_arm_exception_state64_v2>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64_v2"]
        [::std::mem::align_of::<__darwin_arm_exception_state64_v2>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __esr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_status"][::std::mem::size_of::<mach_port_status>() - 40usize];
    ["Alignment of mach_port_status"][::std::mem::align_of::<mach_port_status>() - 4usize];
    ["Offset of field: mach_port_status::mps_pset"]
        [::std::mem::offset_of!(mach_port_status, mps_pset) - 0usize];
    ["Offset of field: mach_port_status::mps_seqno"]
        [::std::mem::offset_of!(mach_port_status, mps_seqno) - 4usize];
    ["Offset of field: mach_port_status::mps_mscount"]
        [::std::mem::offset_of!(mach_port_status, mps_mscount) - 8usize];
    ["Offset of field: mach_port_status::mps_qlimit"]
        [::std::mem::offset_of!(mach_port_status, mps_qlimit) - 12usize];
    ["Offset of field: mach_port_status::mps_msgcount"]
        [::std::mem::offset_of!(mach_port_status, mps_msgcount) - 16usize];
    ["Offset of field: mach_port_status::mps_sorights"]
        [::std::mem::offset_of!(mach_port_status, mps_sorights) - 20usize];
    ["Offset of field: mach_port_status::mps_srights"]
        [::std::mem::offset_of!(mach_port_status, mps_srights) - 24usize];
    ["Offset of field: mach_port_status::mps_pdrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_pdrequest) - 28usize];
    ["Offset of field: mach_port_status::mps_nsrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_nsrequest) - 32usize];
    ["Offset of field: mach_port_status::mps_flags"]
        [::std::mem::offset_of!(mach_port_status, mps_flags) - 36usize];
};
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_limits"][::std::mem::size_of::<mach_port_limits>() - 4usize];
    ["Alignment of mach_port_limits"][::std::mem::align_of::<mach_port_limits>() - 4usize];
    ["Offset of field: mach_port_limits::mpl_qlimit"]
        [::std::mem::offset_of!(mach_port_limits, mpl_qlimit) - 0usize];
};
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_info_ext"][::std::mem::size_of::<mach_port_info_ext>() - 68usize];
    ["Alignment of mach_port_info_ext"][::std::mem::align_of::<mach_port_info_ext>() - 4usize];
    ["Offset of field: mach_port_info_ext::mpie_status"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_status) - 0usize];
    ["Offset of field: mach_port_info_ext::mpie_boost_cnt"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_boost_cnt) - 40usize];
    ["Offset of field: mach_port_info_ext::reserved"]
        [::std::mem::offset_of!(mach_port_info_ext, reserved) - 44usize];
};
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_guard_info"][::std::mem::size_of::<mach_port_guard_info>() - 8usize];
    ["Alignment of mach_port_guard_info"][::std::mem::align_of::<mach_port_guard_info>() - 8usize];
    ["Offset of field: mach_port_guard_info::mpgi_guard"]
        [::std::mem::offset_of!(mach_port_guard_info, mpgi_guard) - 0usize];
};
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_qos"][::std::mem::size_of::<mach_port_qos>() - 8usize];
    ["Alignment of mach_port_qos"][::std::mem::align_of::<mach_port_qos>() - 4usize];
    ["Offset of field: mach_port_qos::len"][::std::mem::offset_of!(mach_port_qos, len) - 4usize];
};
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_service_port_info"][::std::mem::size_of::<mach_service_port_info>() - 256usize];
    ["Alignment of mach_service_port_info"]
        [::std::mem::align_of::<mach_service_port_info>() - 1usize];
    ["Offset of field: mach_service_port_info::mspi_string_name"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_string_name) - 0usize];
    ["Offset of field: mach_service_port_info::mspi_domain_type"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_domain_type) - 255usize];
};
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options__bindgen_ty_1"]
        [::std::mem::size_of::<mach_port_options__bindgen_ty_1>() - 16usize];
    ["Alignment of mach_port_options__bindgen_ty_1"]
        [::std::mem::align_of::<mach_port_options__bindgen_ty_1>() - 8usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, reserved) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::work_interval_port"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, work_interval_port) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_info"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_info) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_name"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_name) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options"][::std::mem::size_of::<mach_port_options>() - 24usize];
    ["Alignment of mach_port_options"][::std::mem::align_of::<mach_port_options>() - 8usize];
    ["Offset of field: mach_port_options::flags"]
        [::std::mem::offset_of!(mach_port_options, flags) - 0usize];
    ["Offset of field: mach_port_options::mpl"]
        [::std::mem::offset_of!(mach_port_options, mpl) - 4usize];
};
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE:
    mach_port_guard_exception_codes = 6;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_type_descriptor_t"]
        [::std::mem::size_of::<mach_msg_type_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_type_descriptor_t"]
        [::std::mem::align_of::<mach_msg_type_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad1) - 0usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad2"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad2) - 4usize];
};
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_port_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, name) - 0usize];
    ["Offset of field: mach_msg_port_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, pad1) - 4usize];
};
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, size) - 4usize];
};
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, size) - 12usize];
};
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, size) - 12usize];
};
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, count) - 4usize];
};
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, name) - 4usize];
};
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_descriptor_t"][::std::mem::size_of::<mach_msg_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_descriptor_t"]
        [::std::mem::align_of::<mach_msg_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_descriptor_t::port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, port) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::out_of_line"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, out_of_line) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::ool_ports"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, ool_ports) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::type_"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, type_) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::guarded_port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, guarded_port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_body_t"][::std::mem::size_of::<mach_msg_body_t>() - 4usize];
    ["Alignment of mach_msg_body_t"][::std::mem::align_of::<mach_msg_body_t>() - 4usize];
    ["Offset of field: mach_msg_body_t::msgh_descriptor_count"]
        [::std::mem::offset_of!(mach_msg_body_t, msgh_descriptor_count) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_header_t"][::std::mem::size_of::<mach_msg_header_t>() - 24usize];
    ["Alignment of mach_msg_header_t"][::std::mem::align_of::<mach_msg_header_t>() - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_bits"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_bits) - 0usize];
    ["Offset of field: mach_msg_header_t::msgh_size"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_size) - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_remote_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_remote_port) - 8usize];
    ["Offset of field: mach_msg_header_t::msgh_local_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_local_port) - 12usize];
    ["Offset of field: mach_msg_header_t::msgh_voucher_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_voucher_port) - 16usize];
    ["Offset of field: mach_msg_header_t::msgh_id"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_id) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_base_t"][::std::mem::size_of::<mach_msg_base_t>() - 28usize];
    ["Alignment of mach_msg_base_t"][::std::mem::align_of::<mach_msg_base_t>() - 4usize];
    ["Offset of field: mach_msg_base_t::header"]
        [::std::mem::offset_of!(mach_msg_base_t, header) - 0usize];
    ["Offset of field: mach_msg_base_t::body"]
        [::std::mem::offset_of!(mach_msg_base_t, body) - 24usize];
};
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_trailer_t"][::std::mem::size_of::<mach_msg_trailer_t>() - 8usize];
    ["Alignment of mach_msg_trailer_t"][::std::mem::align_of::<mach_msg_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_seqno_trailer_t"]
        [::std::mem::size_of::<mach_msg_seqno_trailer_t>() - 12usize];
    ["Alignment of mach_msg_seqno_trailer_t"]
        [::std::mem::align_of::<mach_msg_seqno_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_seqno) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of security_token_t"][::std::mem::size_of::<security_token_t>() - 8usize];
    ["Alignment of security_token_t"][::std::mem::align_of::<security_token_t>() - 4usize];
    ["Offset of field: security_token_t::val"]
        [::std::mem::offset_of!(security_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_security_trailer_t"]
        [::std::mem::size_of::<mach_msg_security_trailer_t>() - 20usize];
    ["Alignment of mach_msg_security_trailer_t"]
        [::std::mem::align_of::<mach_msg_security_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_sender) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of audit_token_t"][::std::mem::size_of::<audit_token_t>() - 32usize];
    ["Alignment of audit_token_t"][::std::mem::align_of::<audit_token_t>() - 4usize];
    ["Offset of field: audit_token_t::val"][::std::mem::offset_of!(audit_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_audit_trailer_t"]
        [::std::mem::size_of::<mach_msg_audit_trailer_t>() - 52usize];
    ["Alignment of mach_msg_audit_trailer_t"]
        [::std::mem::align_of::<mach_msg_audit_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_audit) - 20usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_context_trailer_t"]
        [::std::mem::size_of::<mach_msg_context_trailer_t>() - 60usize];
    ["Alignment of mach_msg_context_trailer_t"]
        [::std::mem::align_of::<mach_msg_context_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_context) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msg_labels_t"][::std::mem::size_of::<msg_labels_t>() - 4usize];
    ["Alignment of msg_labels_t"][::std::mem::align_of::<msg_labels_t>() - 4usize];
    ["Offset of field: msg_labels_t::sender"]
        [::std::mem::offset_of!(msg_labels_t, sender) - 0usize];
};
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_mac_trailer_t"][::std::mem::size_of::<mach_msg_mac_trailer_t>() - 68usize];
    ["Alignment of mach_msg_mac_trailer_t"]
        [::std::mem::align_of::<mach_msg_mac_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_context) - 52usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_ad"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_ad) - 60usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_labels"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_labels) - 64usize];
};
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_send_t"][::std::mem::size_of::<mach_msg_empty_send_t>() - 24usize];
    ["Alignment of mach_msg_empty_send_t"]
        [::std::mem::align_of::<mach_msg_empty_send_t>() - 4usize];
    ["Offset of field: mach_msg_empty_send_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_send_t, header) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_rcv_t"][::std::mem::size_of::<mach_msg_empty_rcv_t>() - 32usize];
    ["Alignment of mach_msg_empty_rcv_t"][::std::mem::align_of::<mach_msg_empty_rcv_t>() - 4usize];
    ["Offset of field: mach_msg_empty_rcv_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, header) - 0usize];
    ["Offset of field: mach_msg_empty_rcv_t::trailer"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, trailer) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_t"][::std::mem::size_of::<mach_msg_empty_t>() - 32usize];
    ["Alignment of mach_msg_empty_t"][::std::mem::align_of::<mach_msg_empty_t>() - 4usize];
    ["Offset of field: mach_msg_empty_t::send"]
        [::std::mem::offset_of!(mach_msg_empty_t, send) - 0usize];
    ["Offset of field: mach_msg_empty_t::rcv"]
        [::std::mem::offset_of!(mach_msg_empty_t, rcv) - 0usize];
};
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_range"][::std::mem::size_of::<mach_vm_range>() - 16usize];
    ["Alignment of mach_vm_range"][::std::mem::align_of::<mach_vm_range>() - 8usize];
    ["Offset of field: mach_vm_range::min_address"]
        [::std::mem::offset_of!(mach_vm_range, min_address) - 0usize];
    ["Offset of field: mach_vm_range::max_address"]
        [::std::mem::offset_of!(mach_vm_range, max_address) - 8usize];
};
pub type mach_vm_range_t = *mut mach_vm_range;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_INVALID: mach_vm_range_flavor_t = 0;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_V1: mach_vm_range_flavor_t = 1;
pub type mach_vm_range_flavor_t = u32;
pub const mach_vm_range_flags_t_MACH_VM_RANGE_NONE: mach_vm_range_flags_t = 0;
pub type mach_vm_range_flags_t = u64;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DEFAULT: mach_vm_range_tag_t = 0;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DATA: mach_vm_range_tag_t = 1;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_FIXED: mach_vm_range_tag_t = 2;
pub type mach_vm_range_tag_t = u16;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range_recipe_v1_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub range: mach_vm_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_range_recipe_v1_t"]
        [::std::mem::size_of::<mach_vm_range_recipe_v1_t>() - 24usize];
    ["Alignment of mach_vm_range_recipe_v1_t"]
        [::std::mem::align_of::<mach_vm_range_recipe_v1_t>() - 1usize];
    ["Offset of field: mach_vm_range_recipe_v1_t::range"]
        [::std::mem::offset_of!(mach_vm_range_recipe_v1_t, range) - 8usize];
};
impl mach_vm_range_recipe_v1_t {
    #[inline]
    pub fn flags(&self) -> mach_vm_range_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 48u8) as u64) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_vm_range_flags_t) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 48u8, val as u64)
        }
    }
    #[inline]
    pub fn range_tag(&self) -> mach_vm_range_tag_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_range_tag(&mut self, val: mach_vm_range_tag_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn vm_tag(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_vm_tag(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_vm_range_flags_t,
        range_tag: mach_vm_range_tag_t,
        vm_tag: u8,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 48u8, {
            let flags: u64 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(48usize, 8u8, {
            let range_tag: u16 = unsafe { ::std::mem::transmute(range_tag) };
            range_tag as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let vm_tag: u8 = unsafe { ::std::mem::transmute(vm_tag) };
            vm_tag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_vm_range_recipe_t = mach_vm_range_recipe_v1_t;
pub type mach_vm_range_recipes_raw_t = *mut u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_state_hdr"][::std::mem::size_of::<arm_state_hdr>() - 8usize];
    ["Alignment of arm_state_hdr"][::std::mem::align_of::<arm_state_hdr>() - 4usize];
    ["Offset of field: arm_state_hdr::flavor"]
        [::std::mem::offset_of!(arm_state_hdr, flavor) - 0usize];
    ["Offset of field: arm_state_hdr::count"]
        [::std::mem::offset_of!(arm_state_hdr, count) - 4usize];
};
pub type arm_state_hdr_t = arm_state_hdr;
pub type arm_thread_state_t = __darwin_arm_thread_state;
pub type arm_thread_state32_t = __darwin_arm_thread_state;
pub type arm_thread_state64_t = __darwin_arm_thread_state64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arm_unified_thread_state {
    pub ash: arm_state_hdr_t,
    pub uts: arm_unified_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arm_unified_thread_state__bindgen_ty_1 {
    pub ts_32: arm_thread_state32_t,
    pub ts_64: arm_thread_state64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_unified_thread_state__bindgen_ty_1"]
        [::std::mem::size_of::<arm_unified_thread_state__bindgen_ty_1>() - 272usize];
    ["Alignment of arm_unified_thread_state__bindgen_ty_1"]
        [::std::mem::align_of::<arm_unified_thread_state__bindgen_ty_1>() - 8usize];
    ["Offset of field: arm_unified_thread_state__bindgen_ty_1::ts_32"]
        [::std::mem::offset_of!(arm_unified_thread_state__bindgen_ty_1, ts_32) - 0usize];
    ["Offset of field: arm_unified_thread_state__bindgen_ty_1::ts_64"]
        [::std::mem::offset_of!(arm_unified_thread_state__bindgen_ty_1, ts_64) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_unified_thread_state"]
        [::std::mem::size_of::<arm_unified_thread_state>() - 280usize];
    ["Alignment of arm_unified_thread_state"]
        [::std::mem::align_of::<arm_unified_thread_state>() - 8usize];
    ["Offset of field: arm_unified_thread_state::ash"]
        [::std::mem::offset_of!(arm_unified_thread_state, ash) - 0usize];
    ["Offset of field: arm_unified_thread_state::uts"]
        [::std::mem::offset_of!(arm_unified_thread_state, uts) - 8usize];
};
pub type arm_unified_thread_state_t = arm_unified_thread_state;
pub type arm_vfp_state_t = __darwin_arm_vfp_state;
pub type arm_neon_state_t = __darwin_arm_neon_state;
pub type arm_neon_state32_t = __darwin_arm_neon_state;
pub type arm_neon_state64_t = __darwin_arm_neon_state64;
pub type arm_exception_state_t = __darwin_arm_exception_state;
pub type arm_exception_state32_t = __darwin_arm_exception_state;
pub type arm_exception_state64_t = __darwin_arm_exception_state64;
pub type arm_exception_state64_v2_t = __darwin_arm_exception_state64_v2;
pub type arm_debug_state32_t = __darwin_arm_debug_state32;
pub type arm_debug_state64_t = __darwin_arm_debug_state64;
pub type arm_pagein_state_t = __arm_pagein_state;
pub type arm_debug_state_t = __arm_legacy_debug_state;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU16"][::std::mem::size_of::<_OSUnalignedU16>() - 2usize];
    ["Alignment of _OSUnalignedU16"][::std::mem::align_of::<_OSUnalignedU16>() - 1usize];
    ["Offset of field: _OSUnalignedU16::__val"]
        [::std::mem::offset_of!(_OSUnalignedU16, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU32"][::std::mem::size_of::<_OSUnalignedU32>() - 4usize];
    ["Alignment of _OSUnalignedU32"][::std::mem::align_of::<_OSUnalignedU32>() - 1usize];
    ["Offset of field: _OSUnalignedU32::__val"]
        [::std::mem::offset_of!(_OSUnalignedU32, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU64"][::std::mem::size_of::<_OSUnalignedU64>() - 8usize];
    ["Alignment of _OSUnalignedU64"][::std::mem::align_of::<_OSUnalignedU64>() - 1usize];
    ["Offset of field: _OSUnalignedU64::__val"]
        [::std::mem::offset_of!(_OSUnalignedU64, __val) - 0usize];
};
pub const OSUnknownByteOrder: _bindgen_ty_1 = 0;
pub const OSLittleEndian: _bindgen_ty_1 = 1;
pub const OSBigEndian: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type NXSwappedFloat = ::std::os::raw::c_ulong;
pub type NXSwappedDouble = ::std::os::raw::c_ulonglong;
pub const NXByteOrder_NX_UnknownByteOrder: NXByteOrder = 0;
pub const NXByteOrder_NX_LittleEndian: NXByteOrder = 1;
pub const NXByteOrder_NX_BigEndian: NXByteOrder = 2;
pub type NXByteOrder = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header {
    pub magic: u32,
    pub cputype: i32,
    pub cpusubtype: i32,
    pub filetype: u32,
    pub ncmds: u32,
    pub sizeofcmds: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_header"][::std::mem::size_of::<mach_header>() - 28usize];
    ["Alignment of mach_header"][::std::mem::align_of::<mach_header>() - 4usize];
    ["Offset of field: mach_header::magic"][::std::mem::offset_of!(mach_header, magic) - 0usize];
    ["Offset of field: mach_header::cputype"]
        [::std::mem::offset_of!(mach_header, cputype) - 4usize];
    ["Offset of field: mach_header::cpusubtype"]
        [::std::mem::offset_of!(mach_header, cpusubtype) - 8usize];
    ["Offset of field: mach_header::filetype"]
        [::std::mem::offset_of!(mach_header, filetype) - 12usize];
    ["Offset of field: mach_header::ncmds"][::std::mem::offset_of!(mach_header, ncmds) - 16usize];
    ["Offset of field: mach_header::sizeofcmds"]
        [::std::mem::offset_of!(mach_header, sizeofcmds) - 20usize];
    ["Offset of field: mach_header::flags"][::std::mem::offset_of!(mach_header, flags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header_64 {
    pub magic: u32,
    pub cputype: i32,
    pub cpusubtype: i32,
    pub filetype: u32,
    pub ncmds: u32,
    pub sizeofcmds: u32,
    pub flags: u32,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_header_64"][::std::mem::size_of::<mach_header_64>() - 32usize];
    ["Alignment of mach_header_64"][::std::mem::align_of::<mach_header_64>() - 4usize];
    ["Offset of field: mach_header_64::magic"]
        [::std::mem::offset_of!(mach_header_64, magic) - 0usize];
    ["Offset of field: mach_header_64::cputype"]
        [::std::mem::offset_of!(mach_header_64, cputype) - 4usize];
    ["Offset of field: mach_header_64::cpusubtype"]
        [::std::mem::offset_of!(mach_header_64, cpusubtype) - 8usize];
    ["Offset of field: mach_header_64::filetype"]
        [::std::mem::offset_of!(mach_header_64, filetype) - 12usize];
    ["Offset of field: mach_header_64::ncmds"]
        [::std::mem::offset_of!(mach_header_64, ncmds) - 16usize];
    ["Offset of field: mach_header_64::sizeofcmds"]
        [::std::mem::offset_of!(mach_header_64, sizeofcmds) - 20usize];
    ["Offset of field: mach_header_64::flags"]
        [::std::mem::offset_of!(mach_header_64, flags) - 24usize];
    ["Offset of field: mach_header_64::reserved"]
        [::std::mem::offset_of!(mach_header_64, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct load_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of load_command"][::std::mem::size_of::<load_command>() - 8usize];
    ["Alignment of load_command"][::std::mem::align_of::<load_command>() - 4usize];
    ["Offset of field: load_command::cmd"][::std::mem::offset_of!(load_command, cmd) - 0usize];
    ["Offset of field: load_command::cmdsize"]
        [::std::mem::offset_of!(load_command, cmdsize) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union lc_str {
    pub offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lc_str"][::std::mem::size_of::<lc_str>() - 4usize];
    ["Alignment of lc_str"][::std::mem::align_of::<lc_str>() - 4usize];
    ["Offset of field: lc_str::offset"][::std::mem::offset_of!(lc_str, offset) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct segment_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: u32,
    pub vmsize: u32,
    pub fileoff: u32,
    pub filesize: u32,
    pub maxprot: i32,
    pub initprot: i32,
    pub nsects: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of segment_command"][::std::mem::size_of::<segment_command>() - 56usize];
    ["Alignment of segment_command"][::std::mem::align_of::<segment_command>() - 4usize];
    ["Offset of field: segment_command::cmd"]
        [::std::mem::offset_of!(segment_command, cmd) - 0usize];
    ["Offset of field: segment_command::cmdsize"]
        [::std::mem::offset_of!(segment_command, cmdsize) - 4usize];
    ["Offset of field: segment_command::segname"]
        [::std::mem::offset_of!(segment_command, segname) - 8usize];
    ["Offset of field: segment_command::vmaddr"]
        [::std::mem::offset_of!(segment_command, vmaddr) - 24usize];
    ["Offset of field: segment_command::vmsize"]
        [::std::mem::offset_of!(segment_command, vmsize) - 28usize];
    ["Offset of field: segment_command::fileoff"]
        [::std::mem::offset_of!(segment_command, fileoff) - 32usize];
    ["Offset of field: segment_command::filesize"]
        [::std::mem::offset_of!(segment_command, filesize) - 36usize];
    ["Offset of field: segment_command::maxprot"]
        [::std::mem::offset_of!(segment_command, maxprot) - 40usize];
    ["Offset of field: segment_command::initprot"]
        [::std::mem::offset_of!(segment_command, initprot) - 44usize];
    ["Offset of field: segment_command::nsects"]
        [::std::mem::offset_of!(segment_command, nsects) - 48usize];
    ["Offset of field: segment_command::flags"]
        [::std::mem::offset_of!(segment_command, flags) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct segment_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: u64,
    pub vmsize: u64,
    pub fileoff: u64,
    pub filesize: u64,
    pub maxprot: i32,
    pub initprot: i32,
    pub nsects: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of segment_command_64"][::std::mem::size_of::<segment_command_64>() - 72usize];
    ["Alignment of segment_command_64"][::std::mem::align_of::<segment_command_64>() - 8usize];
    ["Offset of field: segment_command_64::cmd"]
        [::std::mem::offset_of!(segment_command_64, cmd) - 0usize];
    ["Offset of field: segment_command_64::cmdsize"]
        [::std::mem::offset_of!(segment_command_64, cmdsize) - 4usize];
    ["Offset of field: segment_command_64::segname"]
        [::std::mem::offset_of!(segment_command_64, segname) - 8usize];
    ["Offset of field: segment_command_64::vmaddr"]
        [::std::mem::offset_of!(segment_command_64, vmaddr) - 24usize];
    ["Offset of field: segment_command_64::vmsize"]
        [::std::mem::offset_of!(segment_command_64, vmsize) - 32usize];
    ["Offset of field: segment_command_64::fileoff"]
        [::std::mem::offset_of!(segment_command_64, fileoff) - 40usize];
    ["Offset of field: segment_command_64::filesize"]
        [::std::mem::offset_of!(segment_command_64, filesize) - 48usize];
    ["Offset of field: segment_command_64::maxprot"]
        [::std::mem::offset_of!(segment_command_64, maxprot) - 56usize];
    ["Offset of field: segment_command_64::initprot"]
        [::std::mem::offset_of!(segment_command_64, initprot) - 60usize];
    ["Offset of field: segment_command_64::nsects"]
        [::std::mem::offset_of!(segment_command_64, nsects) - 64usize];
    ["Offset of field: segment_command_64::flags"]
        [::std::mem::offset_of!(segment_command_64, flags) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct section {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: u32,
    pub size: u32,
    pub offset: u32,
    pub align: u32,
    pub reloff: u32,
    pub nreloc: u32,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of section"][::std::mem::size_of::<section>() - 68usize];
    ["Alignment of section"][::std::mem::align_of::<section>() - 4usize];
    ["Offset of field: section::sectname"][::std::mem::offset_of!(section, sectname) - 0usize];
    ["Offset of field: section::segname"][::std::mem::offset_of!(section, segname) - 16usize];
    ["Offset of field: section::addr"][::std::mem::offset_of!(section, addr) - 32usize];
    ["Offset of field: section::size"][::std::mem::offset_of!(section, size) - 36usize];
    ["Offset of field: section::offset"][::std::mem::offset_of!(section, offset) - 40usize];
    ["Offset of field: section::align"][::std::mem::offset_of!(section, align) - 44usize];
    ["Offset of field: section::reloff"][::std::mem::offset_of!(section, reloff) - 48usize];
    ["Offset of field: section::nreloc"][::std::mem::offset_of!(section, nreloc) - 52usize];
    ["Offset of field: section::flags"][::std::mem::offset_of!(section, flags) - 56usize];
    ["Offset of field: section::reserved1"][::std::mem::offset_of!(section, reserved1) - 60usize];
    ["Offset of field: section::reserved2"][::std::mem::offset_of!(section, reserved2) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct section_64 {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: u64,
    pub size: u64,
    pub offset: u32,
    pub align: u32,
    pub reloff: u32,
    pub nreloc: u32,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of section_64"][::std::mem::size_of::<section_64>() - 80usize];
    ["Alignment of section_64"][::std::mem::align_of::<section_64>() - 8usize];
    ["Offset of field: section_64::sectname"]
        [::std::mem::offset_of!(section_64, sectname) - 0usize];
    ["Offset of field: section_64::segname"][::std::mem::offset_of!(section_64, segname) - 16usize];
    ["Offset of field: section_64::addr"][::std::mem::offset_of!(section_64, addr) - 32usize];
    ["Offset of field: section_64::size"][::std::mem::offset_of!(section_64, size) - 40usize];
    ["Offset of field: section_64::offset"][::std::mem::offset_of!(section_64, offset) - 48usize];
    ["Offset of field: section_64::align"][::std::mem::offset_of!(section_64, align) - 52usize];
    ["Offset of field: section_64::reloff"][::std::mem::offset_of!(section_64, reloff) - 56usize];
    ["Offset of field: section_64::nreloc"][::std::mem::offset_of!(section_64, nreloc) - 60usize];
    ["Offset of field: section_64::flags"][::std::mem::offset_of!(section_64, flags) - 64usize];
    ["Offset of field: section_64::reserved1"]
        [::std::mem::offset_of!(section_64, reserved1) - 68usize];
    ["Offset of field: section_64::reserved2"]
        [::std::mem::offset_of!(section_64, reserved2) - 72usize];
    ["Offset of field: section_64::reserved3"]
        [::std::mem::offset_of!(section_64, reserved3) - 76usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmlib {
    pub name: lc_str,
    pub minor_version: u32,
    pub header_addr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fvmlib"][::std::mem::size_of::<fvmlib>() - 12usize];
    ["Alignment of fvmlib"][::std::mem::align_of::<fvmlib>() - 4usize];
    ["Offset of field: fvmlib::name"][::std::mem::offset_of!(fvmlib, name) - 0usize];
    ["Offset of field: fvmlib::minor_version"]
        [::std::mem::offset_of!(fvmlib, minor_version) - 4usize];
    ["Offset of field: fvmlib::header_addr"][::std::mem::offset_of!(fvmlib, header_addr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmlib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub fvmlib: fvmlib,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fvmlib_command"][::std::mem::size_of::<fvmlib_command>() - 20usize];
    ["Alignment of fvmlib_command"][::std::mem::align_of::<fvmlib_command>() - 4usize];
    ["Offset of field: fvmlib_command::cmd"][::std::mem::offset_of!(fvmlib_command, cmd) - 0usize];
    ["Offset of field: fvmlib_command::cmdsize"]
        [::std::mem::offset_of!(fvmlib_command, cmdsize) - 4usize];
    ["Offset of field: fvmlib_command::fvmlib"]
        [::std::mem::offset_of!(fvmlib_command, fvmlib) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylib {
    pub name: lc_str,
    pub timestamp: u32,
    pub current_version: u32,
    pub compatibility_version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylib"][::std::mem::size_of::<dylib>() - 16usize];
    ["Alignment of dylib"][::std::mem::align_of::<dylib>() - 4usize];
    ["Offset of field: dylib::name"][::std::mem::offset_of!(dylib, name) - 0usize];
    ["Offset of field: dylib::timestamp"][::std::mem::offset_of!(dylib, timestamp) - 4usize];
    ["Offset of field: dylib::current_version"]
        [::std::mem::offset_of!(dylib, current_version) - 8usize];
    ["Offset of field: dylib::compatibility_version"]
        [::std::mem::offset_of!(dylib, compatibility_version) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub dylib: dylib,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylib_command"][::std::mem::size_of::<dylib_command>() - 24usize];
    ["Alignment of dylib_command"][::std::mem::align_of::<dylib_command>() - 4usize];
    ["Offset of field: dylib_command::cmd"][::std::mem::offset_of!(dylib_command, cmd) - 0usize];
    ["Offset of field: dylib_command::cmdsize"]
        [::std::mem::offset_of!(dylib_command, cmdsize) - 4usize];
    ["Offset of field: dylib_command::dylib"]
        [::std::mem::offset_of!(dylib_command, dylib) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_use_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub nameoff: u32,
    pub marker: u32,
    pub current_version: u32,
    pub compat_version: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylib_use_command"][::std::mem::size_of::<dylib_use_command>() - 28usize];
    ["Alignment of dylib_use_command"][::std::mem::align_of::<dylib_use_command>() - 4usize];
    ["Offset of field: dylib_use_command::cmd"]
        [::std::mem::offset_of!(dylib_use_command, cmd) - 0usize];
    ["Offset of field: dylib_use_command::cmdsize"]
        [::std::mem::offset_of!(dylib_use_command, cmdsize) - 4usize];
    ["Offset of field: dylib_use_command::nameoff"]
        [::std::mem::offset_of!(dylib_use_command, nameoff) - 8usize];
    ["Offset of field: dylib_use_command::marker"]
        [::std::mem::offset_of!(dylib_use_command, marker) - 12usize];
    ["Offset of field: dylib_use_command::current_version"]
        [::std::mem::offset_of!(dylib_use_command, current_version) - 16usize];
    ["Offset of field: dylib_use_command::compat_version"]
        [::std::mem::offset_of!(dylib_use_command, compat_version) - 20usize];
    ["Offset of field: dylib_use_command::flags"]
        [::std::mem::offset_of!(dylib_use_command, flags) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_framework_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub umbrella: lc_str,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sub_framework_command"][::std::mem::size_of::<sub_framework_command>() - 12usize];
    ["Alignment of sub_framework_command"]
        [::std::mem::align_of::<sub_framework_command>() - 4usize];
    ["Offset of field: sub_framework_command::cmd"]
        [::std::mem::offset_of!(sub_framework_command, cmd) - 0usize];
    ["Offset of field: sub_framework_command::cmdsize"]
        [::std::mem::offset_of!(sub_framework_command, cmdsize) - 4usize];
    ["Offset of field: sub_framework_command::umbrella"]
        [::std::mem::offset_of!(sub_framework_command, umbrella) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_client_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub client: lc_str,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sub_client_command"][::std::mem::size_of::<sub_client_command>() - 12usize];
    ["Alignment of sub_client_command"][::std::mem::align_of::<sub_client_command>() - 4usize];
    ["Offset of field: sub_client_command::cmd"]
        [::std::mem::offset_of!(sub_client_command, cmd) - 0usize];
    ["Offset of field: sub_client_command::cmdsize"]
        [::std::mem::offset_of!(sub_client_command, cmdsize) - 4usize];
    ["Offset of field: sub_client_command::client"]
        [::std::mem::offset_of!(sub_client_command, client) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_umbrella_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub sub_umbrella: lc_str,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sub_umbrella_command"][::std::mem::size_of::<sub_umbrella_command>() - 12usize];
    ["Alignment of sub_umbrella_command"][::std::mem::align_of::<sub_umbrella_command>() - 4usize];
    ["Offset of field: sub_umbrella_command::cmd"]
        [::std::mem::offset_of!(sub_umbrella_command, cmd) - 0usize];
    ["Offset of field: sub_umbrella_command::cmdsize"]
        [::std::mem::offset_of!(sub_umbrella_command, cmdsize) - 4usize];
    ["Offset of field: sub_umbrella_command::sub_umbrella"]
        [::std::mem::offset_of!(sub_umbrella_command, sub_umbrella) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_library_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub sub_library: lc_str,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sub_library_command"][::std::mem::size_of::<sub_library_command>() - 12usize];
    ["Alignment of sub_library_command"][::std::mem::align_of::<sub_library_command>() - 4usize];
    ["Offset of field: sub_library_command::cmd"]
        [::std::mem::offset_of!(sub_library_command, cmd) - 0usize];
    ["Offset of field: sub_library_command::cmdsize"]
        [::std::mem::offset_of!(sub_library_command, cmdsize) - 4usize];
    ["Offset of field: sub_library_command::sub_library"]
        [::std::mem::offset_of!(sub_library_command, sub_library) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prebound_dylib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
    pub nmodules: u32,
    pub linked_modules: lc_str,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of prebound_dylib_command"][::std::mem::size_of::<prebound_dylib_command>() - 20usize];
    ["Alignment of prebound_dylib_command"]
        [::std::mem::align_of::<prebound_dylib_command>() - 4usize];
    ["Offset of field: prebound_dylib_command::cmd"]
        [::std::mem::offset_of!(prebound_dylib_command, cmd) - 0usize];
    ["Offset of field: prebound_dylib_command::cmdsize"]
        [::std::mem::offset_of!(prebound_dylib_command, cmdsize) - 4usize];
    ["Offset of field: prebound_dylib_command::name"]
        [::std::mem::offset_of!(prebound_dylib_command, name) - 8usize];
    ["Offset of field: prebound_dylib_command::nmodules"]
        [::std::mem::offset_of!(prebound_dylib_command, nmodules) - 12usize];
    ["Offset of field: prebound_dylib_command::linked_modules"]
        [::std::mem::offset_of!(prebound_dylib_command, linked_modules) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylinker_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylinker_command"][::std::mem::size_of::<dylinker_command>() - 12usize];
    ["Alignment of dylinker_command"][::std::mem::align_of::<dylinker_command>() - 4usize];
    ["Offset of field: dylinker_command::cmd"]
        [::std::mem::offset_of!(dylinker_command, cmd) - 0usize];
    ["Offset of field: dylinker_command::cmdsize"]
        [::std::mem::offset_of!(dylinker_command, cmdsize) - 4usize];
    ["Offset of field: dylinker_command::name"]
        [::std::mem::offset_of!(dylinker_command, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_command"][::std::mem::size_of::<thread_command>() - 8usize];
    ["Alignment of thread_command"][::std::mem::align_of::<thread_command>() - 4usize];
    ["Offset of field: thread_command::cmd"][::std::mem::offset_of!(thread_command, cmd) - 0usize];
    ["Offset of field: thread_command::cmdsize"]
        [::std::mem::offset_of!(thread_command, cmdsize) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routines_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub init_address: u32,
    pub init_module: u32,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
    pub reserved4: u32,
    pub reserved5: u32,
    pub reserved6: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of routines_command"][::std::mem::size_of::<routines_command>() - 40usize];
    ["Alignment of routines_command"][::std::mem::align_of::<routines_command>() - 4usize];
    ["Offset of field: routines_command::cmd"]
        [::std::mem::offset_of!(routines_command, cmd) - 0usize];
    ["Offset of field: routines_command::cmdsize"]
        [::std::mem::offset_of!(routines_command, cmdsize) - 4usize];
    ["Offset of field: routines_command::init_address"]
        [::std::mem::offset_of!(routines_command, init_address) - 8usize];
    ["Offset of field: routines_command::init_module"]
        [::std::mem::offset_of!(routines_command, init_module) - 12usize];
    ["Offset of field: routines_command::reserved1"]
        [::std::mem::offset_of!(routines_command, reserved1) - 16usize];
    ["Offset of field: routines_command::reserved2"]
        [::std::mem::offset_of!(routines_command, reserved2) - 20usize];
    ["Offset of field: routines_command::reserved3"]
        [::std::mem::offset_of!(routines_command, reserved3) - 24usize];
    ["Offset of field: routines_command::reserved4"]
        [::std::mem::offset_of!(routines_command, reserved4) - 28usize];
    ["Offset of field: routines_command::reserved5"]
        [::std::mem::offset_of!(routines_command, reserved5) - 32usize];
    ["Offset of field: routines_command::reserved6"]
        [::std::mem::offset_of!(routines_command, reserved6) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routines_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub init_address: u64,
    pub init_module: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
    pub reserved6: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of routines_command_64"][::std::mem::size_of::<routines_command_64>() - 72usize];
    ["Alignment of routines_command_64"][::std::mem::align_of::<routines_command_64>() - 8usize];
    ["Offset of field: routines_command_64::cmd"]
        [::std::mem::offset_of!(routines_command_64, cmd) - 0usize];
    ["Offset of field: routines_command_64::cmdsize"]
        [::std::mem::offset_of!(routines_command_64, cmdsize) - 4usize];
    ["Offset of field: routines_command_64::init_address"]
        [::std::mem::offset_of!(routines_command_64, init_address) - 8usize];
    ["Offset of field: routines_command_64::init_module"]
        [::std::mem::offset_of!(routines_command_64, init_module) - 16usize];
    ["Offset of field: routines_command_64::reserved1"]
        [::std::mem::offset_of!(routines_command_64, reserved1) - 24usize];
    ["Offset of field: routines_command_64::reserved2"]
        [::std::mem::offset_of!(routines_command_64, reserved2) - 32usize];
    ["Offset of field: routines_command_64::reserved3"]
        [::std::mem::offset_of!(routines_command_64, reserved3) - 40usize];
    ["Offset of field: routines_command_64::reserved4"]
        [::std::mem::offset_of!(routines_command_64, reserved4) - 48usize];
    ["Offset of field: routines_command_64::reserved5"]
        [::std::mem::offset_of!(routines_command_64, reserved5) - 56usize];
    ["Offset of field: routines_command_64::reserved6"]
        [::std::mem::offset_of!(routines_command_64, reserved6) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symtab_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub symoff: u32,
    pub nsyms: u32,
    pub stroff: u32,
    pub strsize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symtab_command"][::std::mem::size_of::<symtab_command>() - 24usize];
    ["Alignment of symtab_command"][::std::mem::align_of::<symtab_command>() - 4usize];
    ["Offset of field: symtab_command::cmd"][::std::mem::offset_of!(symtab_command, cmd) - 0usize];
    ["Offset of field: symtab_command::cmdsize"]
        [::std::mem::offset_of!(symtab_command, cmdsize) - 4usize];
    ["Offset of field: symtab_command::symoff"]
        [::std::mem::offset_of!(symtab_command, symoff) - 8usize];
    ["Offset of field: symtab_command::nsyms"]
        [::std::mem::offset_of!(symtab_command, nsyms) - 12usize];
    ["Offset of field: symtab_command::stroff"]
        [::std::mem::offset_of!(symtab_command, stroff) - 16usize];
    ["Offset of field: symtab_command::strsize"]
        [::std::mem::offset_of!(symtab_command, strsize) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dysymtab_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub iundefsym: u32,
    pub nundefsym: u32,
    pub tocoff: u32,
    pub ntoc: u32,
    pub modtaboff: u32,
    pub nmodtab: u32,
    pub extrefsymoff: u32,
    pub nextrefsyms: u32,
    pub indirectsymoff: u32,
    pub nindirectsyms: u32,
    pub extreloff: u32,
    pub nextrel: u32,
    pub locreloff: u32,
    pub nlocrel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dysymtab_command"][::std::mem::size_of::<dysymtab_command>() - 80usize];
    ["Alignment of dysymtab_command"][::std::mem::align_of::<dysymtab_command>() - 4usize];
    ["Offset of field: dysymtab_command::cmd"]
        [::std::mem::offset_of!(dysymtab_command, cmd) - 0usize];
    ["Offset of field: dysymtab_command::cmdsize"]
        [::std::mem::offset_of!(dysymtab_command, cmdsize) - 4usize];
    ["Offset of field: dysymtab_command::ilocalsym"]
        [::std::mem::offset_of!(dysymtab_command, ilocalsym) - 8usize];
    ["Offset of field: dysymtab_command::nlocalsym"]
        [::std::mem::offset_of!(dysymtab_command, nlocalsym) - 12usize];
    ["Offset of field: dysymtab_command::iextdefsym"]
        [::std::mem::offset_of!(dysymtab_command, iextdefsym) - 16usize];
    ["Offset of field: dysymtab_command::nextdefsym"]
        [::std::mem::offset_of!(dysymtab_command, nextdefsym) - 20usize];
    ["Offset of field: dysymtab_command::iundefsym"]
        [::std::mem::offset_of!(dysymtab_command, iundefsym) - 24usize];
    ["Offset of field: dysymtab_command::nundefsym"]
        [::std::mem::offset_of!(dysymtab_command, nundefsym) - 28usize];
    ["Offset of field: dysymtab_command::tocoff"]
        [::std::mem::offset_of!(dysymtab_command, tocoff) - 32usize];
    ["Offset of field: dysymtab_command::ntoc"]
        [::std::mem::offset_of!(dysymtab_command, ntoc) - 36usize];
    ["Offset of field: dysymtab_command::modtaboff"]
        [::std::mem::offset_of!(dysymtab_command, modtaboff) - 40usize];
    ["Offset of field: dysymtab_command::nmodtab"]
        [::std::mem::offset_of!(dysymtab_command, nmodtab) - 44usize];
    ["Offset of field: dysymtab_command::extrefsymoff"]
        [::std::mem::offset_of!(dysymtab_command, extrefsymoff) - 48usize];
    ["Offset of field: dysymtab_command::nextrefsyms"]
        [::std::mem::offset_of!(dysymtab_command, nextrefsyms) - 52usize];
    ["Offset of field: dysymtab_command::indirectsymoff"]
        [::std::mem::offset_of!(dysymtab_command, indirectsymoff) - 56usize];
    ["Offset of field: dysymtab_command::nindirectsyms"]
        [::std::mem::offset_of!(dysymtab_command, nindirectsyms) - 60usize];
    ["Offset of field: dysymtab_command::extreloff"]
        [::std::mem::offset_of!(dysymtab_command, extreloff) - 64usize];
    ["Offset of field: dysymtab_command::nextrel"]
        [::std::mem::offset_of!(dysymtab_command, nextrel) - 68usize];
    ["Offset of field: dysymtab_command::locreloff"]
        [::std::mem::offset_of!(dysymtab_command, locreloff) - 72usize];
    ["Offset of field: dysymtab_command::nlocrel"]
        [::std::mem::offset_of!(dysymtab_command, nlocrel) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_table_of_contents {
    pub symbol_index: u32,
    pub module_index: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylib_table_of_contents"][::std::mem::size_of::<dylib_table_of_contents>() - 8usize];
    ["Alignment of dylib_table_of_contents"]
        [::std::mem::align_of::<dylib_table_of_contents>() - 4usize];
    ["Offset of field: dylib_table_of_contents::symbol_index"]
        [::std::mem::offset_of!(dylib_table_of_contents, symbol_index) - 0usize];
    ["Offset of field: dylib_table_of_contents::module_index"]
        [::std::mem::offset_of!(dylib_table_of_contents, module_index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_module {
    pub module_name: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub irefsym: u32,
    pub nrefsym: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextrel: u32,
    pub nextrel: u32,
    pub iinit_iterm: u32,
    pub ninit_nterm: u32,
    pub objc_module_info_addr: u32,
    pub objc_module_info_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylib_module"][::std::mem::size_of::<dylib_module>() - 52usize];
    ["Alignment of dylib_module"][::std::mem::align_of::<dylib_module>() - 4usize];
    ["Offset of field: dylib_module::module_name"]
        [::std::mem::offset_of!(dylib_module, module_name) - 0usize];
    ["Offset of field: dylib_module::iextdefsym"]
        [::std::mem::offset_of!(dylib_module, iextdefsym) - 4usize];
    ["Offset of field: dylib_module::nextdefsym"]
        [::std::mem::offset_of!(dylib_module, nextdefsym) - 8usize];
    ["Offset of field: dylib_module::irefsym"]
        [::std::mem::offset_of!(dylib_module, irefsym) - 12usize];
    ["Offset of field: dylib_module::nrefsym"]
        [::std::mem::offset_of!(dylib_module, nrefsym) - 16usize];
    ["Offset of field: dylib_module::ilocalsym"]
        [::std::mem::offset_of!(dylib_module, ilocalsym) - 20usize];
    ["Offset of field: dylib_module::nlocalsym"]
        [::std::mem::offset_of!(dylib_module, nlocalsym) - 24usize];
    ["Offset of field: dylib_module::iextrel"]
        [::std::mem::offset_of!(dylib_module, iextrel) - 28usize];
    ["Offset of field: dylib_module::nextrel"]
        [::std::mem::offset_of!(dylib_module, nextrel) - 32usize];
    ["Offset of field: dylib_module::iinit_iterm"]
        [::std::mem::offset_of!(dylib_module, iinit_iterm) - 36usize];
    ["Offset of field: dylib_module::ninit_nterm"]
        [::std::mem::offset_of!(dylib_module, ninit_nterm) - 40usize];
    ["Offset of field: dylib_module::objc_module_info_addr"]
        [::std::mem::offset_of!(dylib_module, objc_module_info_addr) - 44usize];
    ["Offset of field: dylib_module::objc_module_info_size"]
        [::std::mem::offset_of!(dylib_module, objc_module_info_size) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_module_64 {
    pub module_name: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub irefsym: u32,
    pub nrefsym: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextrel: u32,
    pub nextrel: u32,
    pub iinit_iterm: u32,
    pub ninit_nterm: u32,
    pub objc_module_info_size: u32,
    pub objc_module_info_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylib_module_64"][::std::mem::size_of::<dylib_module_64>() - 56usize];
    ["Alignment of dylib_module_64"][::std::mem::align_of::<dylib_module_64>() - 8usize];
    ["Offset of field: dylib_module_64::module_name"]
        [::std::mem::offset_of!(dylib_module_64, module_name) - 0usize];
    ["Offset of field: dylib_module_64::iextdefsym"]
        [::std::mem::offset_of!(dylib_module_64, iextdefsym) - 4usize];
    ["Offset of field: dylib_module_64::nextdefsym"]
        [::std::mem::offset_of!(dylib_module_64, nextdefsym) - 8usize];
    ["Offset of field: dylib_module_64::irefsym"]
        [::std::mem::offset_of!(dylib_module_64, irefsym) - 12usize];
    ["Offset of field: dylib_module_64::nrefsym"]
        [::std::mem::offset_of!(dylib_module_64, nrefsym) - 16usize];
    ["Offset of field: dylib_module_64::ilocalsym"]
        [::std::mem::offset_of!(dylib_module_64, ilocalsym) - 20usize];
    ["Offset of field: dylib_module_64::nlocalsym"]
        [::std::mem::offset_of!(dylib_module_64, nlocalsym) - 24usize];
    ["Offset of field: dylib_module_64::iextrel"]
        [::std::mem::offset_of!(dylib_module_64, iextrel) - 28usize];
    ["Offset of field: dylib_module_64::nextrel"]
        [::std::mem::offset_of!(dylib_module_64, nextrel) - 32usize];
    ["Offset of field: dylib_module_64::iinit_iterm"]
        [::std::mem::offset_of!(dylib_module_64, iinit_iterm) - 36usize];
    ["Offset of field: dylib_module_64::ninit_nterm"]
        [::std::mem::offset_of!(dylib_module_64, ninit_nterm) - 40usize];
    ["Offset of field: dylib_module_64::objc_module_info_size"]
        [::std::mem::offset_of!(dylib_module_64, objc_module_info_size) - 44usize];
    ["Offset of field: dylib_module_64::objc_module_info_addr"]
        [::std::mem::offset_of!(dylib_module_64, objc_module_info_addr) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_reference {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dylib_reference"][::std::mem::size_of::<dylib_reference>() - 4usize];
    ["Alignment of dylib_reference"][::std::mem::align_of::<dylib_reference>() - 4usize];
};
impl dylib_reference {
    #[inline]
    pub fn isym(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_isym(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(isym: u32, flags: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let isym: u32 = unsafe { ::std::mem::transmute(isym) };
            isym as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct twolevel_hints_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub offset: u32,
    pub nhints: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of twolevel_hints_command"][::std::mem::size_of::<twolevel_hints_command>() - 16usize];
    ["Alignment of twolevel_hints_command"]
        [::std::mem::align_of::<twolevel_hints_command>() - 4usize];
    ["Offset of field: twolevel_hints_command::cmd"]
        [::std::mem::offset_of!(twolevel_hints_command, cmd) - 0usize];
    ["Offset of field: twolevel_hints_command::cmdsize"]
        [::std::mem::offset_of!(twolevel_hints_command, cmdsize) - 4usize];
    ["Offset of field: twolevel_hints_command::offset"]
        [::std::mem::offset_of!(twolevel_hints_command, offset) - 8usize];
    ["Offset of field: twolevel_hints_command::nhints"]
        [::std::mem::offset_of!(twolevel_hints_command, nhints) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct twolevel_hint {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of twolevel_hint"][::std::mem::size_of::<twolevel_hint>() - 4usize];
    ["Alignment of twolevel_hint"][::std::mem::align_of::<twolevel_hint>() - 4usize];
};
impl twolevel_hint {
    #[inline]
    pub fn isub_image(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_isub_image(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn itoc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_itoc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(isub_image: u32, itoc: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let isub_image: u32 = unsafe { ::std::mem::transmute(isub_image) };
            isub_image as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let itoc: u32 = unsafe { ::std::mem::transmute(itoc) };
            itoc as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prebind_cksum_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of prebind_cksum_command"][::std::mem::size_of::<prebind_cksum_command>() - 12usize];
    ["Alignment of prebind_cksum_command"]
        [::std::mem::align_of::<prebind_cksum_command>() - 4usize];
    ["Offset of field: prebind_cksum_command::cmd"]
        [::std::mem::offset_of!(prebind_cksum_command, cmd) - 0usize];
    ["Offset of field: prebind_cksum_command::cmdsize"]
        [::std::mem::offset_of!(prebind_cksum_command, cmdsize) - 4usize];
    ["Offset of field: prebind_cksum_command::cksum"]
        [::std::mem::offset_of!(prebind_cksum_command, cksum) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uuid_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub uuid: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uuid_command"][::std::mem::size_of::<uuid_command>() - 24usize];
    ["Alignment of uuid_command"][::std::mem::align_of::<uuid_command>() - 4usize];
    ["Offset of field: uuid_command::cmd"][::std::mem::offset_of!(uuid_command, cmd) - 0usize];
    ["Offset of field: uuid_command::cmdsize"]
        [::std::mem::offset_of!(uuid_command, cmdsize) - 4usize];
    ["Offset of field: uuid_command::uuid"][::std::mem::offset_of!(uuid_command, uuid) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rpath_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub path: lc_str,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpath_command"][::std::mem::size_of::<rpath_command>() - 12usize];
    ["Alignment of rpath_command"][::std::mem::align_of::<rpath_command>() - 4usize];
    ["Offset of field: rpath_command::cmd"][::std::mem::offset_of!(rpath_command, cmd) - 0usize];
    ["Offset of field: rpath_command::cmdsize"]
        [::std::mem::offset_of!(rpath_command, cmdsize) - 4usize];
    ["Offset of field: rpath_command::path"][::std::mem::offset_of!(rpath_command, path) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linkedit_data_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub dataoff: u32,
    pub datasize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linkedit_data_command"][::std::mem::size_of::<linkedit_data_command>() - 16usize];
    ["Alignment of linkedit_data_command"]
        [::std::mem::align_of::<linkedit_data_command>() - 4usize];
    ["Offset of field: linkedit_data_command::cmd"]
        [::std::mem::offset_of!(linkedit_data_command, cmd) - 0usize];
    ["Offset of field: linkedit_data_command::cmdsize"]
        [::std::mem::offset_of!(linkedit_data_command, cmdsize) - 4usize];
    ["Offset of field: linkedit_data_command::dataoff"]
        [::std::mem::offset_of!(linkedit_data_command, dataoff) - 8usize];
    ["Offset of field: linkedit_data_command::datasize"]
        [::std::mem::offset_of!(linkedit_data_command, datasize) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct encryption_info_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cryptoff: u32,
    pub cryptsize: u32,
    pub cryptid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of encryption_info_command"][::std::mem::size_of::<encryption_info_command>() - 20usize];
    ["Alignment of encryption_info_command"]
        [::std::mem::align_of::<encryption_info_command>() - 4usize];
    ["Offset of field: encryption_info_command::cmd"]
        [::std::mem::offset_of!(encryption_info_command, cmd) - 0usize];
    ["Offset of field: encryption_info_command::cmdsize"]
        [::std::mem::offset_of!(encryption_info_command, cmdsize) - 4usize];
    ["Offset of field: encryption_info_command::cryptoff"]
        [::std::mem::offset_of!(encryption_info_command, cryptoff) - 8usize];
    ["Offset of field: encryption_info_command::cryptsize"]
        [::std::mem::offset_of!(encryption_info_command, cryptsize) - 12usize];
    ["Offset of field: encryption_info_command::cryptid"]
        [::std::mem::offset_of!(encryption_info_command, cryptid) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct encryption_info_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cryptoff: u32,
    pub cryptsize: u32,
    pub cryptid: u32,
    pub pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of encryption_info_command_64"]
        [::std::mem::size_of::<encryption_info_command_64>() - 24usize];
    ["Alignment of encryption_info_command_64"]
        [::std::mem::align_of::<encryption_info_command_64>() - 4usize];
    ["Offset of field: encryption_info_command_64::cmd"]
        [::std::mem::offset_of!(encryption_info_command_64, cmd) - 0usize];
    ["Offset of field: encryption_info_command_64::cmdsize"]
        [::std::mem::offset_of!(encryption_info_command_64, cmdsize) - 4usize];
    ["Offset of field: encryption_info_command_64::cryptoff"]
        [::std::mem::offset_of!(encryption_info_command_64, cryptoff) - 8usize];
    ["Offset of field: encryption_info_command_64::cryptsize"]
        [::std::mem::offset_of!(encryption_info_command_64, cryptsize) - 12usize];
    ["Offset of field: encryption_info_command_64::cryptid"]
        [::std::mem::offset_of!(encryption_info_command_64, cryptid) - 16usize];
    ["Offset of field: encryption_info_command_64::pad"]
        [::std::mem::offset_of!(encryption_info_command_64, pad) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct version_min_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub version: u32,
    pub sdk: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of version_min_command"][::std::mem::size_of::<version_min_command>() - 16usize];
    ["Alignment of version_min_command"][::std::mem::align_of::<version_min_command>() - 4usize];
    ["Offset of field: version_min_command::cmd"]
        [::std::mem::offset_of!(version_min_command, cmd) - 0usize];
    ["Offset of field: version_min_command::cmdsize"]
        [::std::mem::offset_of!(version_min_command, cmdsize) - 4usize];
    ["Offset of field: version_min_command::version"]
        [::std::mem::offset_of!(version_min_command, version) - 8usize];
    ["Offset of field: version_min_command::sdk"]
        [::std::mem::offset_of!(version_min_command, sdk) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct build_version_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub platform: u32,
    pub minos: u32,
    pub sdk: u32,
    pub ntools: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of build_version_command"][::std::mem::size_of::<build_version_command>() - 24usize];
    ["Alignment of build_version_command"]
        [::std::mem::align_of::<build_version_command>() - 4usize];
    ["Offset of field: build_version_command::cmd"]
        [::std::mem::offset_of!(build_version_command, cmd) - 0usize];
    ["Offset of field: build_version_command::cmdsize"]
        [::std::mem::offset_of!(build_version_command, cmdsize) - 4usize];
    ["Offset of field: build_version_command::platform"]
        [::std::mem::offset_of!(build_version_command, platform) - 8usize];
    ["Offset of field: build_version_command::minos"]
        [::std::mem::offset_of!(build_version_command, minos) - 12usize];
    ["Offset of field: build_version_command::sdk"]
        [::std::mem::offset_of!(build_version_command, sdk) - 16usize];
    ["Offset of field: build_version_command::ntools"]
        [::std::mem::offset_of!(build_version_command, ntools) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct build_tool_version {
    pub tool: u32,
    pub version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of build_tool_version"][::std::mem::size_of::<build_tool_version>() - 8usize];
    ["Alignment of build_tool_version"][::std::mem::align_of::<build_tool_version>() - 4usize];
    ["Offset of field: build_tool_version::tool"]
        [::std::mem::offset_of!(build_tool_version, tool) - 0usize];
    ["Offset of field: build_tool_version::version"]
        [::std::mem::offset_of!(build_tool_version, version) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_info_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub rebase_off: u32,
    pub rebase_size: u32,
    pub bind_off: u32,
    pub bind_size: u32,
    pub weak_bind_off: u32,
    pub weak_bind_size: u32,
    pub lazy_bind_off: u32,
    pub lazy_bind_size: u32,
    pub export_off: u32,
    pub export_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_info_command"][::std::mem::size_of::<dyld_info_command>() - 48usize];
    ["Alignment of dyld_info_command"][::std::mem::align_of::<dyld_info_command>() - 4usize];
    ["Offset of field: dyld_info_command::cmd"]
        [::std::mem::offset_of!(dyld_info_command, cmd) - 0usize];
    ["Offset of field: dyld_info_command::cmdsize"]
        [::std::mem::offset_of!(dyld_info_command, cmdsize) - 4usize];
    ["Offset of field: dyld_info_command::rebase_off"]
        [::std::mem::offset_of!(dyld_info_command, rebase_off) - 8usize];
    ["Offset of field: dyld_info_command::rebase_size"]
        [::std::mem::offset_of!(dyld_info_command, rebase_size) - 12usize];
    ["Offset of field: dyld_info_command::bind_off"]
        [::std::mem::offset_of!(dyld_info_command, bind_off) - 16usize];
    ["Offset of field: dyld_info_command::bind_size"]
        [::std::mem::offset_of!(dyld_info_command, bind_size) - 20usize];
    ["Offset of field: dyld_info_command::weak_bind_off"]
        [::std::mem::offset_of!(dyld_info_command, weak_bind_off) - 24usize];
    ["Offset of field: dyld_info_command::weak_bind_size"]
        [::std::mem::offset_of!(dyld_info_command, weak_bind_size) - 28usize];
    ["Offset of field: dyld_info_command::lazy_bind_off"]
        [::std::mem::offset_of!(dyld_info_command, lazy_bind_off) - 32usize];
    ["Offset of field: dyld_info_command::lazy_bind_size"]
        [::std::mem::offset_of!(dyld_info_command, lazy_bind_size) - 36usize];
    ["Offset of field: dyld_info_command::export_off"]
        [::std::mem::offset_of!(dyld_info_command, export_off) - 40usize];
    ["Offset of field: dyld_info_command::export_size"]
        [::std::mem::offset_of!(dyld_info_command, export_size) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linker_option_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linker_option_command"][::std::mem::size_of::<linker_option_command>() - 12usize];
    ["Alignment of linker_option_command"]
        [::std::mem::align_of::<linker_option_command>() - 4usize];
    ["Offset of field: linker_option_command::cmd"]
        [::std::mem::offset_of!(linker_option_command, cmd) - 0usize];
    ["Offset of field: linker_option_command::cmdsize"]
        [::std::mem::offset_of!(linker_option_command, cmdsize) - 4usize];
    ["Offset of field: linker_option_command::count"]
        [::std::mem::offset_of!(linker_option_command, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symseg_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub offset: u32,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symseg_command"][::std::mem::size_of::<symseg_command>() - 16usize];
    ["Alignment of symseg_command"][::std::mem::align_of::<symseg_command>() - 4usize];
    ["Offset of field: symseg_command::cmd"][::std::mem::offset_of!(symseg_command, cmd) - 0usize];
    ["Offset of field: symseg_command::cmdsize"]
        [::std::mem::offset_of!(symseg_command, cmdsize) - 4usize];
    ["Offset of field: symseg_command::offset"]
        [::std::mem::offset_of!(symseg_command, offset) - 8usize];
    ["Offset of field: symseg_command::size"]
        [::std::mem::offset_of!(symseg_command, size) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ident_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ident_command"][::std::mem::size_of::<ident_command>() - 8usize];
    ["Alignment of ident_command"][::std::mem::align_of::<ident_command>() - 4usize];
    ["Offset of field: ident_command::cmd"][::std::mem::offset_of!(ident_command, cmd) - 0usize];
    ["Offset of field: ident_command::cmdsize"]
        [::std::mem::offset_of!(ident_command, cmdsize) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmfile_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
    pub header_addr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fvmfile_command"][::std::mem::size_of::<fvmfile_command>() - 16usize];
    ["Alignment of fvmfile_command"][::std::mem::align_of::<fvmfile_command>() - 4usize];
    ["Offset of field: fvmfile_command::cmd"]
        [::std::mem::offset_of!(fvmfile_command, cmd) - 0usize];
    ["Offset of field: fvmfile_command::cmdsize"]
        [::std::mem::offset_of!(fvmfile_command, cmdsize) - 4usize];
    ["Offset of field: fvmfile_command::name"]
        [::std::mem::offset_of!(fvmfile_command, name) - 8usize];
    ["Offset of field: fvmfile_command::header_addr"]
        [::std::mem::offset_of!(fvmfile_command, header_addr) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry_point_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub entryoff: u64,
    pub stacksize: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of entry_point_command"][::std::mem::size_of::<entry_point_command>() - 24usize];
    ["Alignment of entry_point_command"][::std::mem::align_of::<entry_point_command>() - 8usize];
    ["Offset of field: entry_point_command::cmd"]
        [::std::mem::offset_of!(entry_point_command, cmd) - 0usize];
    ["Offset of field: entry_point_command::cmdsize"]
        [::std::mem::offset_of!(entry_point_command, cmdsize) - 4usize];
    ["Offset of field: entry_point_command::entryoff"]
        [::std::mem::offset_of!(entry_point_command, entryoff) - 8usize];
    ["Offset of field: entry_point_command::stacksize"]
        [::std::mem::offset_of!(entry_point_command, stacksize) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct source_version_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub version: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of source_version_command"][::std::mem::size_of::<source_version_command>() - 16usize];
    ["Alignment of source_version_command"]
        [::std::mem::align_of::<source_version_command>() - 8usize];
    ["Offset of field: source_version_command::cmd"]
        [::std::mem::offset_of!(source_version_command, cmd) - 0usize];
    ["Offset of field: source_version_command::cmdsize"]
        [::std::mem::offset_of!(source_version_command, cmdsize) - 4usize];
    ["Offset of field: source_version_command::version"]
        [::std::mem::offset_of!(source_version_command, version) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct data_in_code_entry {
    pub offset: u32,
    pub length: u16,
    pub kind: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of data_in_code_entry"][::std::mem::size_of::<data_in_code_entry>() - 8usize];
    ["Alignment of data_in_code_entry"][::std::mem::align_of::<data_in_code_entry>() - 4usize];
    ["Offset of field: data_in_code_entry::offset"]
        [::std::mem::offset_of!(data_in_code_entry, offset) - 0usize];
    ["Offset of field: data_in_code_entry::length"]
        [::std::mem::offset_of!(data_in_code_entry, length) - 4usize];
    ["Offset of field: data_in_code_entry::kind"]
        [::std::mem::offset_of!(data_in_code_entry, kind) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlv_descriptor {
    pub thunk: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut tlv_descriptor) -> *mut ::std::os::raw::c_void,
    >,
    pub key: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tlv_descriptor"][::std::mem::size_of::<tlv_descriptor>() - 24usize];
    ["Alignment of tlv_descriptor"][::std::mem::align_of::<tlv_descriptor>() - 8usize];
    ["Offset of field: tlv_descriptor::thunk"]
        [::std::mem::offset_of!(tlv_descriptor, thunk) - 0usize];
    ["Offset of field: tlv_descriptor::key"][::std::mem::offset_of!(tlv_descriptor, key) - 8usize];
    ["Offset of field: tlv_descriptor::offset"]
        [::std::mem::offset_of!(tlv_descriptor, offset) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct note_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub data_owner: [::std::os::raw::c_char; 16usize],
    pub offset: u64,
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of note_command"][::std::mem::size_of::<note_command>() - 40usize];
    ["Alignment of note_command"][::std::mem::align_of::<note_command>() - 8usize];
    ["Offset of field: note_command::cmd"][::std::mem::offset_of!(note_command, cmd) - 0usize];
    ["Offset of field: note_command::cmdsize"]
        [::std::mem::offset_of!(note_command, cmdsize) - 4usize];
    ["Offset of field: note_command::data_owner"]
        [::std::mem::offset_of!(note_command, data_owner) - 8usize];
    ["Offset of field: note_command::offset"]
        [::std::mem::offset_of!(note_command, offset) - 24usize];
    ["Offset of field: note_command::size"][::std::mem::offset_of!(note_command, size) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fileset_entry_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub vmaddr: u64,
    pub fileoff: u64,
    pub entry_id: lc_str,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fileset_entry_command"][::std::mem::size_of::<fileset_entry_command>() - 32usize];
    ["Alignment of fileset_entry_command"]
        [::std::mem::align_of::<fileset_entry_command>() - 8usize];
    ["Offset of field: fileset_entry_command::cmd"]
        [::std::mem::offset_of!(fileset_entry_command, cmd) - 0usize];
    ["Offset of field: fileset_entry_command::cmdsize"]
        [::std::mem::offset_of!(fileset_entry_command, cmdsize) - 4usize];
    ["Offset of field: fileset_entry_command::vmaddr"]
        [::std::mem::offset_of!(fileset_entry_command, vmaddr) - 8usize];
    ["Offset of field: fileset_entry_command::fileoff"]
        [::std::mem::offset_of!(fileset_entry_command, fileoff) - 16usize];
    ["Offset of field: fileset_entry_command::entry_id"]
        [::std::mem::offset_of!(fileset_entry_command, entry_id) - 24usize];
    ["Offset of field: fileset_entry_command::reserved"]
        [::std::mem::offset_of!(fileset_entry_command, reserved) - 28usize];
};
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
