/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_OS_VISION: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: u32 = 200112;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_SERVICE_THROTTLED: u32 = 9;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_PORT_SERVICE_THROTTLED_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const MPO_EXCEPTION_PORT: u32 = 32768;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const PPNUM_MAX: u32 = 4294967295;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const USE_CLANG_LIMITS: u32 = 0;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_HW: u32 = 4096;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAG_FROM_KERNEL: u32 = 4;
pub const VM_LEDGER_FLAGS_USER: u32 = 3;
pub const VM_LEDGER_FLAGS_ALL: u32 = 7;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_CM_HLS: u32 = 106;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUFAMILY_ARM_IBIZA: u32 = 4197663070;
pub const CPUFAMILY_ARM_PALMA: u32 = 1912690738;
pub const CPUFAMILY_ARM_COLL: u32 = 678884789;
pub const CPUFAMILY_ARM_LOBOS: u32 = 1598941843;
pub const CPUFAMILY_ARM_DONAN: u32 = 1867590060;
pub const CPUFAMILY_ARM_TAHITI: u32 = 1976872121;
pub const CPUFAMILY_ARM_TUPAI: u32 = 541402832;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUSUBFAMILY_ARM_HA: u32 = 6;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MANAGEDAPPDISTD_PORT: u32 = 34;
pub const HOST_DOUBLEAGENTD_PORT: u32 = 35;
pub const HOST_MAX_SPECIAL_PORT: u32 = 35;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_COPY_DELAY_FORK: u32 = 6;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_PROT_MASK: u32 = 255;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_ARM_UNDEFINED: u32 = 1;
pub const EXC_ARM_SME_DISALLOWED: u32 = 2;
pub const EXC_ARM_FP_UNDEFINED: u32 = 0;
pub const EXC_ARM_FP_IO: u32 = 1;
pub const EXC_ARM_FP_DZ: u32 = 2;
pub const EXC_ARM_FP_OF: u32 = 3;
pub const EXC_ARM_FP_UF: u32 = 4;
pub const EXC_ARM_FP_IX: u32 = 5;
pub const EXC_ARM_FP_ID: u32 = 6;
pub const EXC_ARM_DA_ALIGN: u32 = 257;
pub const EXC_ARM_DA_DEBUG: u32 = 258;
pub const EXC_ARM_SP_ALIGN: u32 = 259;
pub const EXC_ARM_SWP: u32 = 260;
pub const EXC_ARM_PAC_FAIL: u32 = 261;
pub const EXC_ARM_BREAKPOINT: u32 = 1;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const EXCEPTION_STATE_IDENTITY_PROTECTED: u32 = 5;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const ARM_THREAD_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const ARM_THREAD_STATE: u32 = 1;
pub const ARM_UNIFIED_THREAD_STATE: u32 = 1;
pub const ARM_VFP_STATE: u32 = 2;
pub const ARM_EXCEPTION_STATE: u32 = 3;
pub const ARM_DEBUG_STATE: u32 = 4;
pub const THREAD_STATE_NONE: u32 = 5;
pub const ARM_THREAD_STATE64: u32 = 6;
pub const ARM_EXCEPTION_STATE64: u32 = 7;
pub const ARM_THREAD_STATE32: u32 = 9;
pub const ARM_EXCEPTION_STATE64_V2: u32 = 10;
pub const ARM_DEBUG_STATE32: u32 = 14;
pub const ARM_DEBUG_STATE64: u32 = 15;
pub const ARM_NEON_STATE: u32 = 16;
pub const ARM_NEON_STATE64: u32 = 17;
pub const ARM_CPMU_STATE64: u32 = 18;
pub const ARM_PAGEIN_STATE: u32 = 27;
pub const THREAD_STATE_FLAVORS: u32 = 29;
pub const MACHINE_THREAD_STATE: u32 = 1;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_CPU_STAT: u32 = 268435459;
pub const PROCESSOR_CPU_STAT64: u32 = 268435460;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_BASIC_INFO_64_2: u32 = 18;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const MACH_VM_MIN_ADDRESS_RAW: u32 = 0;
pub const MACH_VM_MAX_ADDRESS_RAW: u64 = 140737454800896;
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW: u64 = 68719476736;
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW: u64 = 481036337152;
pub const SWI_SYSCALL: u32 = 128;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const clock_priv_MSG_COUNT: u32 = 2;
pub const host_priv_MSG_COUNT: u32 = 26;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const host_security_MSG_COUNT: u32 = 2;
pub const processor_MSG_COUNT: u32 = 6;
pub const processor_set_MSG_COUNT: u32 = 11;
pub const SYNC_POLICY_FIFO: u32 = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: u32 = 1;
pub const SYNC_POLICY_REVERSED: u32 = 2;
pub const SYNC_POLICY_ORDER_MASK: u32 = 3;
pub const SYNC_POLICY_LIFO: u32 = 2;
pub const task_MSG_COUNT: u32 = 66;
pub const thread_act_MSG_COUNT: u32 = 32;
pub const vm_map_MSG_COUNT: u32 = 33;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const _MACH_INIT_: u32 = 1;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const mach_host_MSG_COUNT: u32 = 35;
pub const SWITCH_OPTION_NONE: u32 = 0;
pub const SWITCH_OPTION_DEPRESS: u32 = 1;
pub const SWITCH_OPTION_WAIT: u32 = 2;
pub const RPC_SIGBUF_SIZE: u32 = 8;
pub const _MACH_ERROR_: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: u32 = 20140205;
pub const DYLD_AOT_IMAGE_KEY_SIZE: u32 = 32;
pub const DYLD_MAX_PROCESS_INFO_NOTIFY_COUNT: u32 = 8;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type uuid_t = __darwin_uuid_t;
pub type uuid_string_t = __darwin_uuid_string_t;
extern "C" {
    pub static UUID_NULL: uuid_t;
}
extern "C" {
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_compare(
        uu1: *const ::std::os::raw::c_uchar,
        uu2: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_is_null(uu: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_parse(
        in_: *const ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_unparse(uu: *const ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_lower(uu: *const ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_upper(uu: *const ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of accessx_descriptor"][::std::mem::size_of::<accessx_descriptor>() - 16usize];
    ["Alignment of accessx_descriptor"][::std::mem::align_of::<accessx_descriptor>() - 4usize];
    ["Offset of field: accessx_descriptor::ad_name_offset"]
        [::std::mem::offset_of!(accessx_descriptor, ad_name_offset) - 0usize];
    ["Offset of field: accessx_descriptor::ad_flags"]
        [::std::mem::offset_of!(accessx_descriptor, ad_flags) - 4usize];
    ["Offset of field: accessx_descriptor::ad_pad"]
        [::std::mem::offset_of!(accessx_descriptor, ad_pad) - 8usize];
};
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type off_t = __darwin_off_t;
pub type pid_t = __darwin_pid_t;
pub type useconds_t = __darwin_useconds_t;
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type time_t = __darwin_time_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type sigset_t = __darwin_sigset_t;
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type boolean_t = ::std::os::raw::c_int;
pub type kern_return_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type vm32_offset_t = u32;
pub type vm32_address_t = u32;
pub type vm32_size_t = u32;
pub type mach_port_context_t = vm_offset_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_status"][::std::mem::size_of::<mach_port_status>() - 40usize];
    ["Alignment of mach_port_status"][::std::mem::align_of::<mach_port_status>() - 4usize];
    ["Offset of field: mach_port_status::mps_pset"]
        [::std::mem::offset_of!(mach_port_status, mps_pset) - 0usize];
    ["Offset of field: mach_port_status::mps_seqno"]
        [::std::mem::offset_of!(mach_port_status, mps_seqno) - 4usize];
    ["Offset of field: mach_port_status::mps_mscount"]
        [::std::mem::offset_of!(mach_port_status, mps_mscount) - 8usize];
    ["Offset of field: mach_port_status::mps_qlimit"]
        [::std::mem::offset_of!(mach_port_status, mps_qlimit) - 12usize];
    ["Offset of field: mach_port_status::mps_msgcount"]
        [::std::mem::offset_of!(mach_port_status, mps_msgcount) - 16usize];
    ["Offset of field: mach_port_status::mps_sorights"]
        [::std::mem::offset_of!(mach_port_status, mps_sorights) - 20usize];
    ["Offset of field: mach_port_status::mps_srights"]
        [::std::mem::offset_of!(mach_port_status, mps_srights) - 24usize];
    ["Offset of field: mach_port_status::mps_pdrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_pdrequest) - 28usize];
    ["Offset of field: mach_port_status::mps_nsrequest"]
        [::std::mem::offset_of!(mach_port_status, mps_nsrequest) - 32usize];
    ["Offset of field: mach_port_status::mps_flags"]
        [::std::mem::offset_of!(mach_port_status, mps_flags) - 36usize];
};
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_limits"][::std::mem::size_of::<mach_port_limits>() - 4usize];
    ["Alignment of mach_port_limits"][::std::mem::align_of::<mach_port_limits>() - 4usize];
    ["Offset of field: mach_port_limits::mpl_qlimit"]
        [::std::mem::offset_of!(mach_port_limits, mpl_qlimit) - 0usize];
};
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_info_ext"][::std::mem::size_of::<mach_port_info_ext>() - 68usize];
    ["Alignment of mach_port_info_ext"][::std::mem::align_of::<mach_port_info_ext>() - 4usize];
    ["Offset of field: mach_port_info_ext::mpie_status"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_status) - 0usize];
    ["Offset of field: mach_port_info_ext::mpie_boost_cnt"]
        [::std::mem::offset_of!(mach_port_info_ext, mpie_boost_cnt) - 40usize];
    ["Offset of field: mach_port_info_ext::reserved"]
        [::std::mem::offset_of!(mach_port_info_ext, reserved) - 44usize];
};
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_guard_info"][::std::mem::size_of::<mach_port_guard_info>() - 8usize];
    ["Alignment of mach_port_guard_info"][::std::mem::align_of::<mach_port_guard_info>() - 8usize];
    ["Offset of field: mach_port_guard_info::mpgi_guard"]
        [::std::mem::offset_of!(mach_port_guard_info, mpgi_guard) - 0usize];
};
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_qos"][::std::mem::size_of::<mach_port_qos>() - 8usize];
    ["Alignment of mach_port_qos"][::std::mem::align_of::<mach_port_qos>() - 4usize];
    ["Offset of field: mach_port_qos::len"][::std::mem::offset_of!(mach_port_qos, len) - 4usize];
};
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_service_port_info"][::std::mem::size_of::<mach_service_port_info>() - 256usize];
    ["Alignment of mach_service_port_info"]
        [::std::mem::align_of::<mach_service_port_info>() - 1usize];
    ["Offset of field: mach_service_port_info::mspi_string_name"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_string_name) - 0usize];
    ["Offset of field: mach_service_port_info::mspi_domain_type"]
        [::std::mem::offset_of!(mach_service_port_info, mspi_domain_type) - 255usize];
};
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options__bindgen_ty_1"]
        [::std::mem::size_of::<mach_port_options__bindgen_ty_1>() - 16usize];
    ["Alignment of mach_port_options__bindgen_ty_1"]
        [::std::mem::align_of::<mach_port_options__bindgen_ty_1>() - 8usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, reserved) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::work_interval_port"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, work_interval_port) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_info"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_info) - 0usize];
    ["Offset of field: mach_port_options__bindgen_ty_1::service_port_name"]
        [::std::mem::offset_of!(mach_port_options__bindgen_ty_1, service_port_name) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_options"][::std::mem::size_of::<mach_port_options>() - 24usize];
    ["Alignment of mach_port_options"][::std::mem::align_of::<mach_port_options>() - 8usize];
    ["Offset of field: mach_port_options::flags"]
        [::std::mem::offset_of!(mach_port_options, flags) - 0usize];
    ["Offset of field: mach_port_options::mpl"]
        [::std::mem::offset_of!(mach_port_options, mpl) - 4usize];
};
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE:
    mach_port_guard_exception_codes = 6;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_range"][::std::mem::size_of::<mach_vm_range>() - 16usize];
    ["Alignment of mach_vm_range"][::std::mem::align_of::<mach_vm_range>() - 8usize];
    ["Offset of field: mach_vm_range::min_address"]
        [::std::mem::offset_of!(mach_vm_range, min_address) - 0usize];
    ["Offset of field: mach_vm_range::max_address"]
        [::std::mem::offset_of!(mach_vm_range, max_address) - 8usize];
};
pub type mach_vm_range_t = *mut mach_vm_range;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_INVALID: mach_vm_range_flavor_t = 0;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_V1: mach_vm_range_flavor_t = 1;
pub type mach_vm_range_flavor_t = u32;
pub const mach_vm_range_flags_t_MACH_VM_RANGE_NONE: mach_vm_range_flags_t = 0;
pub type mach_vm_range_flags_t = u64;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DEFAULT: mach_vm_range_tag_t = 0;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DATA: mach_vm_range_tag_t = 1;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_FIXED: mach_vm_range_tag_t = 2;
pub type mach_vm_range_tag_t = u16;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range_recipe_v1_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub range: mach_vm_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_range_recipe_v1_t"]
        [::std::mem::size_of::<mach_vm_range_recipe_v1_t>() - 24usize];
    ["Alignment of mach_vm_range_recipe_v1_t"]
        [::std::mem::align_of::<mach_vm_range_recipe_v1_t>() - 1usize];
    ["Offset of field: mach_vm_range_recipe_v1_t::range"]
        [::std::mem::offset_of!(mach_vm_range_recipe_v1_t, range) - 8usize];
};
impl mach_vm_range_recipe_v1_t {
    #[inline]
    pub fn flags(&self) -> mach_vm_range_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 48u8) as u64) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_vm_range_flags_t) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 48u8, val as u64)
        }
    }
    #[inline]
    pub fn range_tag(&self) -> mach_vm_range_tag_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_range_tag(&mut self, val: mach_vm_range_tag_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn vm_tag(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_vm_tag(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_vm_range_flags_t,
        range_tag: mach_vm_range_tag_t,
        vm_tag: u8,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 48u8, {
            let flags: u64 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(48usize, 8u8, {
            let range_tag: u16 = unsafe { ::std::mem::transmute(range_tag) };
            range_tag as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let vm_tag: u8 = unsafe { ::std::mem::transmute(vm_tag) };
            vm_tag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_vm_range_recipe_t = mach_vm_range_recipe_v1_t;
pub type mach_vm_range_recipes_raw_t = *mut u8;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_type_descriptor_t"]
        [::std::mem::size_of::<mach_msg_type_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_type_descriptor_t"]
        [::std::mem::align_of::<mach_msg_type_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad1) - 0usize];
    ["Offset of field: mach_msg_type_descriptor_t::pad2"]
        [::std::mem::offset_of!(mach_msg_type_descriptor_t, pad2) - 4usize];
};
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_port_descriptor_t>() - 12usize];
    ["Alignment of mach_msg_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, name) - 0usize];
    ["Offset of field: mach_msg_port_descriptor_t::pad1"]
        [::std::mem::offset_of!(mach_msg_port_descriptor_t, pad1) - 4usize];
};
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor32_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor32_t, size) - 4usize];
};
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor64_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor64_t, size) - 12usize];
};
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_descriptor_t::size"]
        [::std::mem::offset_of!(mach_msg_ool_descriptor_t, size) - 12usize];
};
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_ool_ports_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor32_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor32_t, count) - 4usize];
};
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor64_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor64_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_ool_ports_descriptor_t"]
        [::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::address"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, address) - 0usize];
    ["Offset of field: mach_msg_ool_ports_descriptor_t::count"]
        [::std::mem::offset_of!(mach_msg_ool_ports_descriptor_t, count) - 12usize];
};
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>() - 12usize];
    ["Alignment of mach_msg_guarded_port_descriptor32_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor32_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor32_t, name) - 4usize];
};
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor64_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor64_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor64_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_guarded_port_descriptor_t"]
        [::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::context"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, context) - 0usize];
    ["Offset of field: mach_msg_guarded_port_descriptor_t::name"]
        [::std::mem::offset_of!(mach_msg_guarded_port_descriptor_t, name) - 12usize];
};
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_descriptor_t"][::std::mem::size_of::<mach_msg_descriptor_t>() - 16usize];
    ["Alignment of mach_msg_descriptor_t"]
        [::std::mem::align_of::<mach_msg_descriptor_t>() - 4usize];
    ["Offset of field: mach_msg_descriptor_t::port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, port) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::out_of_line"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, out_of_line) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::ool_ports"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, ool_ports) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::type_"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, type_) - 0usize];
    ["Offset of field: mach_msg_descriptor_t::guarded_port"]
        [::std::mem::offset_of!(mach_msg_descriptor_t, guarded_port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_body_t"][::std::mem::size_of::<mach_msg_body_t>() - 4usize];
    ["Alignment of mach_msg_body_t"][::std::mem::align_of::<mach_msg_body_t>() - 4usize];
    ["Offset of field: mach_msg_body_t::msgh_descriptor_count"]
        [::std::mem::offset_of!(mach_msg_body_t, msgh_descriptor_count) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_header_t"][::std::mem::size_of::<mach_msg_header_t>() - 24usize];
    ["Alignment of mach_msg_header_t"][::std::mem::align_of::<mach_msg_header_t>() - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_bits"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_bits) - 0usize];
    ["Offset of field: mach_msg_header_t::msgh_size"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_size) - 4usize];
    ["Offset of field: mach_msg_header_t::msgh_remote_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_remote_port) - 8usize];
    ["Offset of field: mach_msg_header_t::msgh_local_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_local_port) - 12usize];
    ["Offset of field: mach_msg_header_t::msgh_voucher_port"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_voucher_port) - 16usize];
    ["Offset of field: mach_msg_header_t::msgh_id"]
        [::std::mem::offset_of!(mach_msg_header_t, msgh_id) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_base_t"][::std::mem::size_of::<mach_msg_base_t>() - 28usize];
    ["Alignment of mach_msg_base_t"][::std::mem::align_of::<mach_msg_base_t>() - 4usize];
    ["Offset of field: mach_msg_base_t::header"]
        [::std::mem::offset_of!(mach_msg_base_t, header) - 0usize];
    ["Offset of field: mach_msg_base_t::body"]
        [::std::mem::offset_of!(mach_msg_base_t, body) - 24usize];
};
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_trailer_t"][::std::mem::size_of::<mach_msg_trailer_t>() - 8usize];
    ["Alignment of mach_msg_trailer_t"][::std::mem::align_of::<mach_msg_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_trailer_t, msgh_trailer_size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_seqno_trailer_t"]
        [::std::mem::size_of::<mach_msg_seqno_trailer_t>() - 12usize];
    ["Alignment of mach_msg_seqno_trailer_t"]
        [::std::mem::align_of::<mach_msg_seqno_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_seqno_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_seqno_trailer_t, msgh_seqno) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of security_token_t"][::std::mem::size_of::<security_token_t>() - 8usize];
    ["Alignment of security_token_t"][::std::mem::align_of::<security_token_t>() - 4usize];
    ["Offset of field: security_token_t::val"]
        [::std::mem::offset_of!(security_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_security_trailer_t"]
        [::std::mem::size_of::<mach_msg_security_trailer_t>() - 20usize];
    ["Alignment of mach_msg_security_trailer_t"]
        [::std::mem::align_of::<mach_msg_security_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_security_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_security_trailer_t, msgh_sender) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of audit_token_t"][::std::mem::size_of::<audit_token_t>() - 32usize];
    ["Alignment of audit_token_t"][::std::mem::align_of::<audit_token_t>() - 4usize];
    ["Offset of field: audit_token_t::val"][::std::mem::offset_of!(audit_token_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_audit_trailer_t"]
        [::std::mem::size_of::<mach_msg_audit_trailer_t>() - 52usize];
    ["Alignment of mach_msg_audit_trailer_t"]
        [::std::mem::align_of::<mach_msg_audit_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_audit_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_audit_trailer_t, msgh_audit) - 20usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_context_trailer_t"]
        [::std::mem::size_of::<mach_msg_context_trailer_t>() - 60usize];
    ["Alignment of mach_msg_context_trailer_t"]
        [::std::mem::align_of::<mach_msg_context_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_context_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_context_trailer_t, msgh_context) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msg_labels_t"][::std::mem::size_of::<msg_labels_t>() - 4usize];
    ["Alignment of msg_labels_t"][::std::mem::align_of::<msg_labels_t>() - 4usize];
    ["Offset of field: msg_labels_t::sender"]
        [::std::mem::offset_of!(msg_labels_t, sender) - 0usize];
};
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_mac_trailer_t"][::std::mem::size_of::<mach_msg_mac_trailer_t>() - 68usize];
    ["Alignment of mach_msg_mac_trailer_t"]
        [::std::mem::align_of::<mach_msg_mac_trailer_t>() - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_type"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_type) - 0usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_trailer_size"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_trailer_size) - 4usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_seqno"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_seqno) - 8usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_sender"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_sender) - 12usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_audit"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_audit) - 20usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_context"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_context) - 52usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_ad"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_ad) - 60usize];
    ["Offset of field: mach_msg_mac_trailer_t::msgh_labels"]
        [::std::mem::offset_of!(mach_msg_mac_trailer_t, msgh_labels) - 64usize];
};
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_send_t"][::std::mem::size_of::<mach_msg_empty_send_t>() - 24usize];
    ["Alignment of mach_msg_empty_send_t"]
        [::std::mem::align_of::<mach_msg_empty_send_t>() - 4usize];
    ["Offset of field: mach_msg_empty_send_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_send_t, header) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_rcv_t"][::std::mem::size_of::<mach_msg_empty_rcv_t>() - 32usize];
    ["Alignment of mach_msg_empty_rcv_t"][::std::mem::align_of::<mach_msg_empty_rcv_t>() - 4usize];
    ["Offset of field: mach_msg_empty_rcv_t::header"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, header) - 0usize];
    ["Offset of field: mach_msg_empty_rcv_t::trailer"]
        [::std::mem::offset_of!(mach_msg_empty_rcv_t, trailer) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_msg_empty_t"][::std::mem::size_of::<mach_msg_empty_t>() - 32usize];
    ["Alignment of mach_msg_empty_t"][::std::mem::align_of::<mach_msg_empty_t>() - 4usize];
    ["Offset of field: mach_msg_empty_t::send"]
        [::std::mem::offset_of!(mach_msg_empty_t, send) - 0usize];
    ["Offset of field: mach_msg_empty_t::rcv"]
        [::std::mem::offset_of!(mach_msg_empty_t, rcv) - 0usize];
};
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_statistics"][::std::mem::size_of::<vm_statistics>() - 60usize];
    ["Alignment of vm_statistics"][::std::mem::align_of::<vm_statistics>() - 4usize];
    ["Offset of field: vm_statistics::free_count"]
        [::std::mem::offset_of!(vm_statistics, free_count) - 0usize];
    ["Offset of field: vm_statistics::active_count"]
        [::std::mem::offset_of!(vm_statistics, active_count) - 4usize];
    ["Offset of field: vm_statistics::inactive_count"]
        [::std::mem::offset_of!(vm_statistics, inactive_count) - 8usize];
    ["Offset of field: vm_statistics::wire_count"]
        [::std::mem::offset_of!(vm_statistics, wire_count) - 12usize];
    ["Offset of field: vm_statistics::zero_fill_count"]
        [::std::mem::offset_of!(vm_statistics, zero_fill_count) - 16usize];
    ["Offset of field: vm_statistics::reactivations"]
        [::std::mem::offset_of!(vm_statistics, reactivations) - 20usize];
    ["Offset of field: vm_statistics::pageins"]
        [::std::mem::offset_of!(vm_statistics, pageins) - 24usize];
    ["Offset of field: vm_statistics::pageouts"]
        [::std::mem::offset_of!(vm_statistics, pageouts) - 28usize];
    ["Offset of field: vm_statistics::faults"]
        [::std::mem::offset_of!(vm_statistics, faults) - 32usize];
    ["Offset of field: vm_statistics::cow_faults"]
        [::std::mem::offset_of!(vm_statistics, cow_faults) - 36usize];
    ["Offset of field: vm_statistics::lookups"]
        [::std::mem::offset_of!(vm_statistics, lookups) - 40usize];
    ["Offset of field: vm_statistics::hits"][::std::mem::offset_of!(vm_statistics, hits) - 44usize];
    ["Offset of field: vm_statistics::purgeable_count"]
        [::std::mem::offset_of!(vm_statistics, purgeable_count) - 48usize];
    ["Offset of field: vm_statistics::purges"]
        [::std::mem::offset_of!(vm_statistics, purges) - 52usize];
    ["Offset of field: vm_statistics::speculative_count"]
        [::std::mem::offset_of!(vm_statistics, speculative_count) - 56usize];
};
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_statistics64"][::std::mem::size_of::<vm_statistics64>() - 152usize];
    ["Alignment of vm_statistics64"][::std::mem::align_of::<vm_statistics64>() - 8usize];
    ["Offset of field: vm_statistics64::free_count"]
        [::std::mem::offset_of!(vm_statistics64, free_count) - 0usize];
    ["Offset of field: vm_statistics64::active_count"]
        [::std::mem::offset_of!(vm_statistics64, active_count) - 4usize];
    ["Offset of field: vm_statistics64::inactive_count"]
        [::std::mem::offset_of!(vm_statistics64, inactive_count) - 8usize];
    ["Offset of field: vm_statistics64::wire_count"]
        [::std::mem::offset_of!(vm_statistics64, wire_count) - 12usize];
    ["Offset of field: vm_statistics64::zero_fill_count"]
        [::std::mem::offset_of!(vm_statistics64, zero_fill_count) - 16usize];
    ["Offset of field: vm_statistics64::reactivations"]
        [::std::mem::offset_of!(vm_statistics64, reactivations) - 24usize];
    ["Offset of field: vm_statistics64::pageins"]
        [::std::mem::offset_of!(vm_statistics64, pageins) - 32usize];
    ["Offset of field: vm_statistics64::pageouts"]
        [::std::mem::offset_of!(vm_statistics64, pageouts) - 40usize];
    ["Offset of field: vm_statistics64::faults"]
        [::std::mem::offset_of!(vm_statistics64, faults) - 48usize];
    ["Offset of field: vm_statistics64::cow_faults"]
        [::std::mem::offset_of!(vm_statistics64, cow_faults) - 56usize];
    ["Offset of field: vm_statistics64::lookups"]
        [::std::mem::offset_of!(vm_statistics64, lookups) - 64usize];
    ["Offset of field: vm_statistics64::hits"]
        [::std::mem::offset_of!(vm_statistics64, hits) - 72usize];
    ["Offset of field: vm_statistics64::purges"]
        [::std::mem::offset_of!(vm_statistics64, purges) - 80usize];
    ["Offset of field: vm_statistics64::purgeable_count"]
        [::std::mem::offset_of!(vm_statistics64, purgeable_count) - 88usize];
    ["Offset of field: vm_statistics64::speculative_count"]
        [::std::mem::offset_of!(vm_statistics64, speculative_count) - 92usize];
    ["Offset of field: vm_statistics64::decompressions"]
        [::std::mem::offset_of!(vm_statistics64, decompressions) - 96usize];
    ["Offset of field: vm_statistics64::compressions"]
        [::std::mem::offset_of!(vm_statistics64, compressions) - 104usize];
    ["Offset of field: vm_statistics64::swapins"]
        [::std::mem::offset_of!(vm_statistics64, swapins) - 112usize];
    ["Offset of field: vm_statistics64::swapouts"]
        [::std::mem::offset_of!(vm_statistics64, swapouts) - 120usize];
    ["Offset of field: vm_statistics64::compressor_page_count"]
        [::std::mem::offset_of!(vm_statistics64, compressor_page_count) - 128usize];
    ["Offset of field: vm_statistics64::throttled_count"]
        [::std::mem::offset_of!(vm_statistics64, throttled_count) - 132usize];
    ["Offset of field: vm_statistics64::external_page_count"]
        [::std::mem::offset_of!(vm_statistics64, external_page_count) - 136usize];
    ["Offset of field: vm_statistics64::internal_page_count"]
        [::std::mem::offset_of!(vm_statistics64, internal_page_count) - 140usize];
    ["Offset of field: vm_statistics64::total_uncompressed_pages_in_compressor"][::std::mem::offset_of!(
        vm_statistics64,
        total_uncompressed_pages_in_compressor
    ) - 144usize];
};
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_extmod_statistics"][::std::mem::size_of::<vm_extmod_statistics>() - 48usize];
    ["Alignment of vm_extmod_statistics"][::std::mem::align_of::<vm_extmod_statistics>() - 8usize];
    ["Offset of field: vm_extmod_statistics::task_for_pid_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, task_for_pid_count) - 0usize];
    ["Offset of field: vm_extmod_statistics::task_for_pid_caller_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, task_for_pid_caller_count) - 8usize];
    ["Offset of field: vm_extmod_statistics::thread_creation_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_creation_count) - 16usize];
    ["Offset of field: vm_extmod_statistics::thread_creation_caller_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_creation_caller_count) - 24usize];
    ["Offset of field: vm_extmod_statistics::thread_set_state_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_set_state_count) - 32usize];
    ["Offset of field: vm_extmod_statistics::thread_set_state_caller_count"]
        [::std::mem::offset_of!(vm_extmod_statistics, thread_set_state_caller_count) - 40usize];
};
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_purgeable_stat"][::std::mem::size_of::<vm_purgeable_stat>() - 16usize];
    ["Alignment of vm_purgeable_stat"][::std::mem::align_of::<vm_purgeable_stat>() - 8usize];
    ["Offset of field: vm_purgeable_stat::count"]
        [::std::mem::offset_of!(vm_purgeable_stat, count) - 0usize];
    ["Offset of field: vm_purgeable_stat::size"]
        [::std::mem::offset_of!(vm_purgeable_stat, size) - 8usize];
};
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_purgeable_info"][::std::mem::size_of::<vm_purgeable_info>() - 272usize];
    ["Alignment of vm_purgeable_info"][::std::mem::align_of::<vm_purgeable_info>() - 8usize];
    ["Offset of field: vm_purgeable_info::fifo_data"]
        [::std::mem::offset_of!(vm_purgeable_info, fifo_data) - 0usize];
    ["Offset of field: vm_purgeable_info::obsolete_data"]
        [::std::mem::offset_of!(vm_purgeable_info, obsolete_data) - 128usize];
    ["Offset of field: vm_purgeable_info::lifo_data"]
        [::std::mem::offset_of!(vm_purgeable_info, lifo_data) - 144usize];
};
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of time_value"][::std::mem::size_of::<time_value>() - 8usize];
    ["Alignment of time_value"][::std::mem::align_of::<time_value>() - 4usize];
    ["Offset of field: time_value::seconds"][::std::mem::offset_of!(time_value, seconds) - 0usize];
    ["Offset of field: time_value::microseconds"]
        [::std::mem::offset_of!(time_value, microseconds) - 4usize];
};
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_can_has_debugger_info"]
        [::std::mem::size_of::<host_can_has_debugger_info>() - 4usize];
    ["Alignment of host_can_has_debugger_info"]
        [::std::mem::align_of::<host_can_has_debugger_info>() - 4usize];
    ["Offset of field: host_can_has_debugger_info::can_has_debugger"]
        [::std::mem::offset_of!(host_can_has_debugger_info, can_has_debugger) - 0usize];
};
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_basic_info"][::std::mem::size_of::<host_basic_info>() - 48usize];
    ["Alignment of host_basic_info"][::std::mem::align_of::<host_basic_info>() - 4usize];
    ["Offset of field: host_basic_info::max_cpus"]
        [::std::mem::offset_of!(host_basic_info, max_cpus) - 0usize];
    ["Offset of field: host_basic_info::avail_cpus"]
        [::std::mem::offset_of!(host_basic_info, avail_cpus) - 4usize];
    ["Offset of field: host_basic_info::memory_size"]
        [::std::mem::offset_of!(host_basic_info, memory_size) - 8usize];
    ["Offset of field: host_basic_info::cpu_type"]
        [::std::mem::offset_of!(host_basic_info, cpu_type) - 12usize];
    ["Offset of field: host_basic_info::cpu_subtype"]
        [::std::mem::offset_of!(host_basic_info, cpu_subtype) - 16usize];
    ["Offset of field: host_basic_info::cpu_threadtype"]
        [::std::mem::offset_of!(host_basic_info, cpu_threadtype) - 20usize];
    ["Offset of field: host_basic_info::physical_cpu"]
        [::std::mem::offset_of!(host_basic_info, physical_cpu) - 24usize];
    ["Offset of field: host_basic_info::physical_cpu_max"]
        [::std::mem::offset_of!(host_basic_info, physical_cpu_max) - 28usize];
    ["Offset of field: host_basic_info::logical_cpu"]
        [::std::mem::offset_of!(host_basic_info, logical_cpu) - 32usize];
    ["Offset of field: host_basic_info::logical_cpu_max"]
        [::std::mem::offset_of!(host_basic_info, logical_cpu_max) - 36usize];
    ["Offset of field: host_basic_info::max_mem"]
        [::std::mem::offset_of!(host_basic_info, max_mem) - 40usize];
};
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_sched_info"][::std::mem::size_of::<host_sched_info>() - 8usize];
    ["Alignment of host_sched_info"][::std::mem::align_of::<host_sched_info>() - 4usize];
    ["Offset of field: host_sched_info::min_timeout"]
        [::std::mem::offset_of!(host_sched_info, min_timeout) - 0usize];
    ["Offset of field: host_sched_info::min_quantum"]
        [::std::mem::offset_of!(host_sched_info, min_quantum) - 4usize];
};
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_resource_sizes"][::std::mem::size_of::<kernel_resource_sizes>() - 20usize];
    ["Alignment of kernel_resource_sizes"]
        [::std::mem::align_of::<kernel_resource_sizes>() - 4usize];
    ["Offset of field: kernel_resource_sizes::task"]
        [::std::mem::offset_of!(kernel_resource_sizes, task) - 0usize];
    ["Offset of field: kernel_resource_sizes::thread"]
        [::std::mem::offset_of!(kernel_resource_sizes, thread) - 4usize];
    ["Offset of field: kernel_resource_sizes::port"]
        [::std::mem::offset_of!(kernel_resource_sizes, port) - 8usize];
    ["Offset of field: kernel_resource_sizes::memory_region"]
        [::std::mem::offset_of!(kernel_resource_sizes, memory_region) - 12usize];
    ["Offset of field: kernel_resource_sizes::memory_object"]
        [::std::mem::offset_of!(kernel_resource_sizes, memory_object) - 16usize];
};
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_priority_info"][::std::mem::size_of::<host_priority_info>() - 32usize];
    ["Alignment of host_priority_info"][::std::mem::align_of::<host_priority_info>() - 4usize];
    ["Offset of field: host_priority_info::kernel_priority"]
        [::std::mem::offset_of!(host_priority_info, kernel_priority) - 0usize];
    ["Offset of field: host_priority_info::system_priority"]
        [::std::mem::offset_of!(host_priority_info, system_priority) - 4usize];
    ["Offset of field: host_priority_info::server_priority"]
        [::std::mem::offset_of!(host_priority_info, server_priority) - 8usize];
    ["Offset of field: host_priority_info::user_priority"]
        [::std::mem::offset_of!(host_priority_info, user_priority) - 12usize];
    ["Offset of field: host_priority_info::depress_priority"]
        [::std::mem::offset_of!(host_priority_info, depress_priority) - 16usize];
    ["Offset of field: host_priority_info::idle_priority"]
        [::std::mem::offset_of!(host_priority_info, idle_priority) - 20usize];
    ["Offset of field: host_priority_info::minimum_priority"]
        [::std::mem::offset_of!(host_priority_info, minimum_priority) - 24usize];
    ["Offset of field: host_priority_info::maximum_priority"]
        [::std::mem::offset_of!(host_priority_info, maximum_priority) - 28usize];
};
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_load_info"][::std::mem::size_of::<host_load_info>() - 24usize];
    ["Alignment of host_load_info"][::std::mem::align_of::<host_load_info>() - 4usize];
    ["Offset of field: host_load_info::avenrun"]
        [::std::mem::offset_of!(host_load_info, avenrun) - 0usize];
    ["Offset of field: host_load_info::mach_factor"]
        [::std::mem::offset_of!(host_load_info, mach_factor) - 12usize];
};
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_cpu_load_info"][::std::mem::size_of::<host_cpu_load_info>() - 16usize];
    ["Alignment of host_cpu_load_info"][::std::mem::align_of::<host_cpu_load_info>() - 4usize];
    ["Offset of field: host_cpu_load_info::cpu_ticks"]
        [::std::mem::offset_of!(host_cpu_load_info, cpu_ticks) - 0usize];
};
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of host_preferred_user_arch"]
        [::std::mem::size_of::<host_preferred_user_arch>() - 8usize];
    ["Alignment of host_preferred_user_arch"]
        [::std::mem::align_of::<host_preferred_user_arch>() - 4usize];
    ["Offset of field: host_preferred_user_arch::cpu_type"]
        [::std::mem::offset_of!(host_preferred_user_arch, cpu_type) - 0usize];
    ["Offset of field: host_preferred_user_arch::cpu_subtype"]
        [::std::mem::offset_of!(host_preferred_user_arch, cpu_subtype) - 4usize];
};
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memory_object_perf_info"][::std::mem::size_of::<memory_object_perf_info>() - 8usize];
    ["Alignment of memory_object_perf_info"]
        [::std::mem::align_of::<memory_object_perf_info>() - 4usize];
    ["Offset of field: memory_object_perf_info::cluster_size"]
        [::std::mem::offset_of!(memory_object_perf_info, cluster_size) - 0usize];
    ["Offset of field: memory_object_perf_info::may_cache"]
        [::std::mem::offset_of!(memory_object_perf_info, may_cache) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memory_object_attr_info"][::std::mem::size_of::<memory_object_attr_info>() - 16usize];
    ["Alignment of memory_object_attr_info"]
        [::std::mem::align_of::<memory_object_attr_info>() - 4usize];
    ["Offset of field: memory_object_attr_info::copy_strategy"]
        [::std::mem::offset_of!(memory_object_attr_info, copy_strategy) - 0usize];
    ["Offset of field: memory_object_attr_info::cluster_size"]
        [::std::mem::offset_of!(memory_object_attr_info, cluster_size) - 4usize];
    ["Offset of field: memory_object_attr_info::may_cache_object"]
        [::std::mem::offset_of!(memory_object_attr_info, may_cache_object) - 8usize];
    ["Offset of field: memory_object_attr_info::temporary"]
        [::std::mem::offset_of!(memory_object_attr_info, temporary) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memory_object_behave_info"]
        [::std::mem::size_of::<memory_object_behave_info>() - 20usize];
    ["Alignment of memory_object_behave_info"]
        [::std::mem::align_of::<memory_object_behave_info>() - 4usize];
    ["Offset of field: memory_object_behave_info::copy_strategy"]
        [::std::mem::offset_of!(memory_object_behave_info, copy_strategy) - 0usize];
    ["Offset of field: memory_object_behave_info::temporary"]
        [::std::mem::offset_of!(memory_object_behave_info, temporary) - 4usize];
    ["Offset of field: memory_object_behave_info::invalidate"]
        [::std::mem::offset_of!(memory_object_behave_info, invalidate) - 8usize];
    ["Offset of field: memory_object_behave_info::silent_overwrite"]
        [::std::mem::offset_of!(memory_object_behave_info, silent_overwrite) - 12usize];
    ["Offset of field: memory_object_behave_info::advisory_pageout"]
        [::std::mem::offset_of!(memory_object_behave_info, advisory_pageout) - 16usize];
};
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64_v2 {
    pub __far: __uint64_t,
    pub __esr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64_v2"]
        [::std::mem::size_of::<__darwin_arm_exception_state64_v2>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64_v2"]
        [::std::mem::align_of::<__darwin_arm_exception_state64_v2>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __esr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_state_hdr"][::std::mem::size_of::<arm_state_hdr>() - 8usize];
    ["Alignment of arm_state_hdr"][::std::mem::align_of::<arm_state_hdr>() - 4usize];
    ["Offset of field: arm_state_hdr::flavor"]
        [::std::mem::offset_of!(arm_state_hdr, flavor) - 0usize];
    ["Offset of field: arm_state_hdr::count"]
        [::std::mem::offset_of!(arm_state_hdr, count) - 4usize];
};
pub type arm_state_hdr_t = arm_state_hdr;
pub type arm_thread_state_t = __darwin_arm_thread_state;
pub type arm_thread_state32_t = __darwin_arm_thread_state;
pub type arm_thread_state64_t = __darwin_arm_thread_state64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arm_unified_thread_state {
    pub ash: arm_state_hdr_t,
    pub uts: arm_unified_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arm_unified_thread_state__bindgen_ty_1 {
    pub ts_32: arm_thread_state32_t,
    pub ts_64: arm_thread_state64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_unified_thread_state__bindgen_ty_1"]
        [::std::mem::size_of::<arm_unified_thread_state__bindgen_ty_1>() - 272usize];
    ["Alignment of arm_unified_thread_state__bindgen_ty_1"]
        [::std::mem::align_of::<arm_unified_thread_state__bindgen_ty_1>() - 8usize];
    ["Offset of field: arm_unified_thread_state__bindgen_ty_1::ts_32"]
        [::std::mem::offset_of!(arm_unified_thread_state__bindgen_ty_1, ts_32) - 0usize];
    ["Offset of field: arm_unified_thread_state__bindgen_ty_1::ts_64"]
        [::std::mem::offset_of!(arm_unified_thread_state__bindgen_ty_1, ts_64) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_unified_thread_state"]
        [::std::mem::size_of::<arm_unified_thread_state>() - 280usize];
    ["Alignment of arm_unified_thread_state"]
        [::std::mem::align_of::<arm_unified_thread_state>() - 8usize];
    ["Offset of field: arm_unified_thread_state::ash"]
        [::std::mem::offset_of!(arm_unified_thread_state, ash) - 0usize];
    ["Offset of field: arm_unified_thread_state::uts"]
        [::std::mem::offset_of!(arm_unified_thread_state, uts) - 8usize];
};
pub type arm_unified_thread_state_t = arm_unified_thread_state;
pub type arm_vfp_state_t = __darwin_arm_vfp_state;
pub type arm_neon_state_t = __darwin_arm_neon_state;
pub type arm_neon_state32_t = __darwin_arm_neon_state;
pub type arm_neon_state64_t = __darwin_arm_neon_state64;
pub type arm_exception_state_t = __darwin_arm_exception_state;
pub type arm_exception_state32_t = __darwin_arm_exception_state;
pub type arm_exception_state64_t = __darwin_arm_exception_state64;
pub type arm_exception_state64_v2_t = __darwin_arm_exception_state64_v2;
pub type arm_debug_state32_t = __darwin_arm_debug_state32;
pub type arm_debug_state64_t = __darwin_arm_debug_state64;
pub type arm_pagein_state_t = __arm_pagein_state;
pub type arm_debug_state_t = __arm_legacy_debug_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_space"][::std::mem::size_of::<ipc_info_space>() - 24usize];
    ["Alignment of ipc_info_space"][::std::mem::align_of::<ipc_info_space>() - 4usize];
    ["Offset of field: ipc_info_space::iis_genno_mask"]
        [::std::mem::offset_of!(ipc_info_space, iis_genno_mask) - 0usize];
    ["Offset of field: ipc_info_space::iis_table_size"]
        [::std::mem::offset_of!(ipc_info_space, iis_table_size) - 4usize];
    ["Offset of field: ipc_info_space::iis_table_next"]
        [::std::mem::offset_of!(ipc_info_space, iis_table_next) - 8usize];
    ["Offset of field: ipc_info_space::iis_tree_size"]
        [::std::mem::offset_of!(ipc_info_space, iis_tree_size) - 12usize];
    ["Offset of field: ipc_info_space::iis_tree_small"]
        [::std::mem::offset_of!(ipc_info_space, iis_tree_small) - 16usize];
    ["Offset of field: ipc_info_space::iis_tree_hash"]
        [::std::mem::offset_of!(ipc_info_space, iis_tree_hash) - 20usize];
};
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_space_basic"][::std::mem::size_of::<ipc_info_space_basic>() - 24usize];
    ["Alignment of ipc_info_space_basic"][::std::mem::align_of::<ipc_info_space_basic>() - 4usize];
    ["Offset of field: ipc_info_space_basic::iisb_genno_mask"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_genno_mask) - 0usize];
    ["Offset of field: ipc_info_space_basic::iisb_table_size"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_table_size) - 4usize];
    ["Offset of field: ipc_info_space_basic::iisb_table_next"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_table_next) - 8usize];
    ["Offset of field: ipc_info_space_basic::iisb_table_inuse"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_table_inuse) - 12usize];
    ["Offset of field: ipc_info_space_basic::iisb_reserved"]
        [::std::mem::offset_of!(ipc_info_space_basic, iisb_reserved) - 16usize];
};
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_name"][::std::mem::size_of::<ipc_info_name>() - 28usize];
    ["Alignment of ipc_info_name"][::std::mem::align_of::<ipc_info_name>() - 4usize];
    ["Offset of field: ipc_info_name::iin_name"]
        [::std::mem::offset_of!(ipc_info_name, iin_name) - 0usize];
    ["Offset of field: ipc_info_name::iin_collision"]
        [::std::mem::offset_of!(ipc_info_name, iin_collision) - 4usize];
    ["Offset of field: ipc_info_name::iin_type"]
        [::std::mem::offset_of!(ipc_info_name, iin_type) - 8usize];
    ["Offset of field: ipc_info_name::iin_urefs"]
        [::std::mem::offset_of!(ipc_info_name, iin_urefs) - 12usize];
    ["Offset of field: ipc_info_name::iin_object"]
        [::std::mem::offset_of!(ipc_info_name, iin_object) - 16usize];
    ["Offset of field: ipc_info_name::iin_next"]
        [::std::mem::offset_of!(ipc_info_name, iin_next) - 20usize];
    ["Offset of field: ipc_info_name::iin_hash"]
        [::std::mem::offset_of!(ipc_info_name, iin_hash) - 24usize];
};
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_tree_name"][::std::mem::size_of::<ipc_info_tree_name>() - 36usize];
    ["Alignment of ipc_info_tree_name"][::std::mem::align_of::<ipc_info_tree_name>() - 4usize];
    ["Offset of field: ipc_info_tree_name::iitn_name"]
        [::std::mem::offset_of!(ipc_info_tree_name, iitn_name) - 0usize];
    ["Offset of field: ipc_info_tree_name::iitn_lchild"]
        [::std::mem::offset_of!(ipc_info_tree_name, iitn_lchild) - 28usize];
    ["Offset of field: ipc_info_tree_name::iitn_rchild"]
        [::std::mem::offset_of!(ipc_info_tree_name, iitn_rchild) - 32usize];
};
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_info_port"][::std::mem::size_of::<ipc_info_port>() - 8usize];
    ["Alignment of ipc_info_port"][::std::mem::align_of::<ipc_info_port>() - 4usize];
    ["Offset of field: ipc_info_port::iip_port_object"]
        [::std::mem::offset_of!(ipc_info_port, iip_port_object) - 0usize];
    ["Offset of field: ipc_info_port::iip_receiver_object"]
        [::std::mem::offset_of!(ipc_info_port, iip_receiver_object) - 4usize];
};
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_voucher_attr_recipe_data"]
        [::std::mem::size_of::<mach_voucher_attr_recipe_data>() - 16usize];
    ["Alignment of mach_voucher_attr_recipe_data"]
        [::std::mem::align_of::<mach_voucher_attr_recipe_data>() - 1usize];
    ["Offset of field: mach_voucher_attr_recipe_data::key"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, key) - 0usize];
    ["Offset of field: mach_voucher_attr_recipe_data::command"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, command) - 4usize];
    ["Offset of field: mach_voucher_attr_recipe_data::previous_voucher"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, previous_voucher) - 8usize];
    ["Offset of field: mach_voucher_attr_recipe_data::content_size"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, content_size) - 12usize];
    ["Offset of field: mach_voucher_attr_recipe_data::content"]
        [::std::mem::offset_of!(mach_voucher_attr_recipe_data, content) - 16usize];
};
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat {
    pub irq_ex_cnt: u32,
    pub ipi_cnt: u32,
    pub timer_cnt: u32,
    pub undef_ex_cnt: u32,
    pub unaligned_cnt: u32,
    pub vfp_cnt: u32,
    pub vfp_shortv_cnt: u32,
    pub data_ex_cnt: u32,
    pub instr_ex_cnt: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_cpu_stat"][::std::mem::size_of::<processor_cpu_stat>() - 36usize];
    ["Alignment of processor_cpu_stat"][::std::mem::align_of::<processor_cpu_stat>() - 4usize];
    ["Offset of field: processor_cpu_stat::irq_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, irq_ex_cnt) - 0usize];
    ["Offset of field: processor_cpu_stat::ipi_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, ipi_cnt) - 4usize];
    ["Offset of field: processor_cpu_stat::timer_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, timer_cnt) - 8usize];
    ["Offset of field: processor_cpu_stat::undef_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, undef_ex_cnt) - 12usize];
    ["Offset of field: processor_cpu_stat::unaligned_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, unaligned_cnt) - 16usize];
    ["Offset of field: processor_cpu_stat::vfp_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, vfp_cnt) - 20usize];
    ["Offset of field: processor_cpu_stat::vfp_shortv_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, vfp_shortv_cnt) - 24usize];
    ["Offset of field: processor_cpu_stat::data_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, data_ex_cnt) - 28usize];
    ["Offset of field: processor_cpu_stat::instr_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat, instr_ex_cnt) - 32usize];
};
pub type processor_cpu_stat_data_t = processor_cpu_stat;
pub type processor_cpu_stat_t = *mut processor_cpu_stat;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat64 {
    pub irq_ex_cnt: u64,
    pub ipi_cnt: u64,
    pub timer_cnt: u64,
    pub undef_ex_cnt: u64,
    pub unaligned_cnt: u64,
    pub vfp_cnt: u64,
    pub vfp_shortv_cnt: u64,
    pub data_ex_cnt: u64,
    pub instr_ex_cnt: u64,
    pub pmi_cnt: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_cpu_stat64"][::std::mem::size_of::<processor_cpu_stat64>() - 80usize];
    ["Alignment of processor_cpu_stat64"][::std::mem::align_of::<processor_cpu_stat64>() - 4usize];
    ["Offset of field: processor_cpu_stat64::irq_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, irq_ex_cnt) - 0usize];
    ["Offset of field: processor_cpu_stat64::ipi_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, ipi_cnt) - 8usize];
    ["Offset of field: processor_cpu_stat64::timer_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, timer_cnt) - 16usize];
    ["Offset of field: processor_cpu_stat64::undef_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, undef_ex_cnt) - 24usize];
    ["Offset of field: processor_cpu_stat64::unaligned_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, unaligned_cnt) - 32usize];
    ["Offset of field: processor_cpu_stat64::vfp_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, vfp_cnt) - 40usize];
    ["Offset of field: processor_cpu_stat64::vfp_shortv_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, vfp_shortv_cnt) - 48usize];
    ["Offset of field: processor_cpu_stat64::data_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, data_ex_cnt) - 56usize];
    ["Offset of field: processor_cpu_stat64::instr_ex_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, instr_ex_cnt) - 64usize];
    ["Offset of field: processor_cpu_stat64::pmi_cnt"]
        [::std::mem::offset_of!(processor_cpu_stat64, pmi_cnt) - 72usize];
};
pub type processor_cpu_stat64_data_t = processor_cpu_stat64;
pub type processor_cpu_stat64_t = *mut processor_cpu_stat64;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_basic_info__bindgen_ty_1"]
        [::std::mem::size_of::<processor_basic_info__bindgen_ty_1>() - 4usize];
    ["Alignment of processor_basic_info__bindgen_ty_1"]
        [::std::mem::align_of::<processor_basic_info__bindgen_ty_1>() - 4usize];
    ["Offset of field: processor_basic_info__bindgen_ty_1::is_master"]
        [::std::mem::offset_of!(processor_basic_info__bindgen_ty_1, is_master) - 0usize];
    ["Offset of field: processor_basic_info__bindgen_ty_1::is_main"]
        [::std::mem::offset_of!(processor_basic_info__bindgen_ty_1, is_main) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_basic_info"][::std::mem::size_of::<processor_basic_info>() - 20usize];
    ["Alignment of processor_basic_info"][::std::mem::align_of::<processor_basic_info>() - 4usize];
    ["Offset of field: processor_basic_info::cpu_type"]
        [::std::mem::offset_of!(processor_basic_info, cpu_type) - 0usize];
    ["Offset of field: processor_basic_info::cpu_subtype"]
        [::std::mem::offset_of!(processor_basic_info, cpu_subtype) - 4usize];
    ["Offset of field: processor_basic_info::running"]
        [::std::mem::offset_of!(processor_basic_info, running) - 8usize];
    ["Offset of field: processor_basic_info::slot_num"]
        [::std::mem::offset_of!(processor_basic_info, slot_num) - 12usize];
};
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_cpu_load_info"][::std::mem::size_of::<processor_cpu_load_info>() - 16usize];
    ["Alignment of processor_cpu_load_info"]
        [::std::mem::align_of::<processor_cpu_load_info>() - 4usize];
    ["Offset of field: processor_cpu_load_info::cpu_ticks"]
        [::std::mem::offset_of!(processor_cpu_load_info, cpu_ticks) - 0usize];
};
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_set_basic_info"]
        [::std::mem::size_of::<processor_set_basic_info>() - 8usize];
    ["Alignment of processor_set_basic_info"]
        [::std::mem::align_of::<processor_set_basic_info>() - 4usize];
    ["Offset of field: processor_set_basic_info::processor_count"]
        [::std::mem::offset_of!(processor_set_basic_info, processor_count) - 0usize];
    ["Offset of field: processor_set_basic_info::default_policy"]
        [::std::mem::offset_of!(processor_set_basic_info, default_policy) - 4usize];
};
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of processor_set_load_info"][::std::mem::size_of::<processor_set_load_info>() - 16usize];
    ["Alignment of processor_set_load_info"]
        [::std::mem::align_of::<processor_set_load_info>() - 4usize];
    ["Offset of field: processor_set_load_info::task_count"]
        [::std::mem::offset_of!(processor_set_load_info, task_count) - 0usize];
    ["Offset of field: processor_set_load_info::thread_count"]
        [::std::mem::offset_of!(processor_set_load_info, thread_count) - 4usize];
    ["Offset of field: processor_set_load_info::load_average"]
        [::std::mem::offset_of!(processor_set_load_info, load_average) - 8usize];
    ["Offset of field: processor_set_load_info::mach_factor"]
        [::std::mem::offset_of!(processor_set_load_info, mach_factor) - 12usize];
};
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_timeshare_base"][::std::mem::size_of::<policy_timeshare_base>() - 4usize];
    ["Alignment of policy_timeshare_base"]
        [::std::mem::align_of::<policy_timeshare_base>() - 4usize];
    ["Offset of field: policy_timeshare_base::base_priority"]
        [::std::mem::offset_of!(policy_timeshare_base, base_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_timeshare_limit"][::std::mem::size_of::<policy_timeshare_limit>() - 4usize];
    ["Alignment of policy_timeshare_limit"]
        [::std::mem::align_of::<policy_timeshare_limit>() - 4usize];
    ["Offset of field: policy_timeshare_limit::max_priority"]
        [::std::mem::offset_of!(policy_timeshare_limit, max_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_timeshare_info"][::std::mem::size_of::<policy_timeshare_info>() - 20usize];
    ["Alignment of policy_timeshare_info"]
        [::std::mem::align_of::<policy_timeshare_info>() - 4usize];
    ["Offset of field: policy_timeshare_info::max_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, max_priority) - 0usize];
    ["Offset of field: policy_timeshare_info::base_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, base_priority) - 4usize];
    ["Offset of field: policy_timeshare_info::cur_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, cur_priority) - 8usize];
    ["Offset of field: policy_timeshare_info::depressed"]
        [::std::mem::offset_of!(policy_timeshare_info, depressed) - 12usize];
    ["Offset of field: policy_timeshare_info::depress_priority"]
        [::std::mem::offset_of!(policy_timeshare_info, depress_priority) - 16usize];
};
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_rr_base"][::std::mem::size_of::<policy_rr_base>() - 8usize];
    ["Alignment of policy_rr_base"][::std::mem::align_of::<policy_rr_base>() - 4usize];
    ["Offset of field: policy_rr_base::base_priority"]
        [::std::mem::offset_of!(policy_rr_base, base_priority) - 0usize];
    ["Offset of field: policy_rr_base::quantum"]
        [::std::mem::offset_of!(policy_rr_base, quantum) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_rr_limit"][::std::mem::size_of::<policy_rr_limit>() - 4usize];
    ["Alignment of policy_rr_limit"][::std::mem::align_of::<policy_rr_limit>() - 4usize];
    ["Offset of field: policy_rr_limit::max_priority"]
        [::std::mem::offset_of!(policy_rr_limit, max_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_rr_info"][::std::mem::size_of::<policy_rr_info>() - 20usize];
    ["Alignment of policy_rr_info"][::std::mem::align_of::<policy_rr_info>() - 4usize];
    ["Offset of field: policy_rr_info::max_priority"]
        [::std::mem::offset_of!(policy_rr_info, max_priority) - 0usize];
    ["Offset of field: policy_rr_info::base_priority"]
        [::std::mem::offset_of!(policy_rr_info, base_priority) - 4usize];
    ["Offset of field: policy_rr_info::quantum"]
        [::std::mem::offset_of!(policy_rr_info, quantum) - 8usize];
    ["Offset of field: policy_rr_info::depressed"]
        [::std::mem::offset_of!(policy_rr_info, depressed) - 12usize];
    ["Offset of field: policy_rr_info::depress_priority"]
        [::std::mem::offset_of!(policy_rr_info, depress_priority) - 16usize];
};
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_fifo_base"][::std::mem::size_of::<policy_fifo_base>() - 4usize];
    ["Alignment of policy_fifo_base"][::std::mem::align_of::<policy_fifo_base>() - 4usize];
    ["Offset of field: policy_fifo_base::base_priority"]
        [::std::mem::offset_of!(policy_fifo_base, base_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_fifo_limit"][::std::mem::size_of::<policy_fifo_limit>() - 4usize];
    ["Alignment of policy_fifo_limit"][::std::mem::align_of::<policy_fifo_limit>() - 4usize];
    ["Offset of field: policy_fifo_limit::max_priority"]
        [::std::mem::offset_of!(policy_fifo_limit, max_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_fifo_info"][::std::mem::size_of::<policy_fifo_info>() - 16usize];
    ["Alignment of policy_fifo_info"][::std::mem::align_of::<policy_fifo_info>() - 4usize];
    ["Offset of field: policy_fifo_info::max_priority"]
        [::std::mem::offset_of!(policy_fifo_info, max_priority) - 0usize];
    ["Offset of field: policy_fifo_info::base_priority"]
        [::std::mem::offset_of!(policy_fifo_info, base_priority) - 4usize];
    ["Offset of field: policy_fifo_info::depressed"]
        [::std::mem::offset_of!(policy_fifo_info, depressed) - 8usize];
    ["Offset of field: policy_fifo_info::depress_priority"]
        [::std::mem::offset_of!(policy_fifo_info, depress_priority) - 12usize];
};
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_bases"][::std::mem::size_of::<policy_bases>() - 16usize];
    ["Alignment of policy_bases"][::std::mem::align_of::<policy_bases>() - 4usize];
    ["Offset of field: policy_bases::ts"][::std::mem::offset_of!(policy_bases, ts) - 0usize];
    ["Offset of field: policy_bases::rr"][::std::mem::offset_of!(policy_bases, rr) - 4usize];
    ["Offset of field: policy_bases::fifo"][::std::mem::offset_of!(policy_bases, fifo) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_limits"][::std::mem::size_of::<policy_limits>() - 12usize];
    ["Alignment of policy_limits"][::std::mem::align_of::<policy_limits>() - 4usize];
    ["Offset of field: policy_limits::ts"][::std::mem::offset_of!(policy_limits, ts) - 0usize];
    ["Offset of field: policy_limits::rr"][::std::mem::offset_of!(policy_limits, rr) - 4usize];
    ["Offset of field: policy_limits::fifo"][::std::mem::offset_of!(policy_limits, fifo) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of policy_infos"][::std::mem::size_of::<policy_infos>() - 56usize];
    ["Alignment of policy_infos"][::std::mem::align_of::<policy_infos>() - 4usize];
    ["Offset of field: policy_infos::ts"][::std::mem::offset_of!(policy_infos, ts) - 0usize];
    ["Offset of field: policy_infos::rr"][::std::mem::offset_of!(policy_infos, rr) - 20usize];
    ["Offset of field: policy_infos::fifo"][::std::mem::offset_of!(policy_infos, fifo) - 40usize];
};
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info_32"][::std::mem::size_of::<task_basic_info_32>() - 32usize];
    ["Alignment of task_basic_info_32"][::std::mem::align_of::<task_basic_info_32>() - 4usize];
    ["Offset of field: task_basic_info_32::suspend_count"]
        [::std::mem::offset_of!(task_basic_info_32, suspend_count) - 0usize];
    ["Offset of field: task_basic_info_32::virtual_size"]
        [::std::mem::offset_of!(task_basic_info_32, virtual_size) - 4usize];
    ["Offset of field: task_basic_info_32::resident_size"]
        [::std::mem::offset_of!(task_basic_info_32, resident_size) - 8usize];
    ["Offset of field: task_basic_info_32::user_time"]
        [::std::mem::offset_of!(task_basic_info_32, user_time) - 12usize];
    ["Offset of field: task_basic_info_32::system_time"]
        [::std::mem::offset_of!(task_basic_info_32, system_time) - 20usize];
    ["Offset of field: task_basic_info_32::policy"]
        [::std::mem::offset_of!(task_basic_info_32, policy) - 28usize];
};
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info_64"][::std::mem::size_of::<task_basic_info_64>() - 40usize];
    ["Alignment of task_basic_info_64"][::std::mem::align_of::<task_basic_info_64>() - 4usize];
    ["Offset of field: task_basic_info_64::suspend_count"]
        [::std::mem::offset_of!(task_basic_info_64, suspend_count) - 0usize];
    ["Offset of field: task_basic_info_64::virtual_size"]
        [::std::mem::offset_of!(task_basic_info_64, virtual_size) - 4usize];
    ["Offset of field: task_basic_info_64::resident_size"]
        [::std::mem::offset_of!(task_basic_info_64, resident_size) - 12usize];
    ["Offset of field: task_basic_info_64::user_time"]
        [::std::mem::offset_of!(task_basic_info_64, user_time) - 20usize];
    ["Offset of field: task_basic_info_64::system_time"]
        [::std::mem::offset_of!(task_basic_info_64, system_time) - 28usize];
    ["Offset of field: task_basic_info_64::policy"]
        [::std::mem::offset_of!(task_basic_info_64, policy) - 36usize];
};
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info"][::std::mem::size_of::<task_basic_info>() - 40usize];
    ["Alignment of task_basic_info"][::std::mem::align_of::<task_basic_info>() - 4usize];
    ["Offset of field: task_basic_info::suspend_count"]
        [::std::mem::offset_of!(task_basic_info, suspend_count) - 0usize];
    ["Offset of field: task_basic_info::virtual_size"]
        [::std::mem::offset_of!(task_basic_info, virtual_size) - 4usize];
    ["Offset of field: task_basic_info::resident_size"]
        [::std::mem::offset_of!(task_basic_info, resident_size) - 12usize];
    ["Offset of field: task_basic_info::user_time"]
        [::std::mem::offset_of!(task_basic_info, user_time) - 20usize];
    ["Offset of field: task_basic_info::system_time"]
        [::std::mem::offset_of!(task_basic_info, system_time) - 28usize];
    ["Offset of field: task_basic_info::policy"]
        [::std::mem::offset_of!(task_basic_info, policy) - 36usize];
};
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_events_info"][::std::mem::size_of::<task_events_info>() - 32usize];
    ["Alignment of task_events_info"][::std::mem::align_of::<task_events_info>() - 4usize];
    ["Offset of field: task_events_info::faults"]
        [::std::mem::offset_of!(task_events_info, faults) - 0usize];
    ["Offset of field: task_events_info::pageins"]
        [::std::mem::offset_of!(task_events_info, pageins) - 4usize];
    ["Offset of field: task_events_info::cow_faults"]
        [::std::mem::offset_of!(task_events_info, cow_faults) - 8usize];
    ["Offset of field: task_events_info::messages_sent"]
        [::std::mem::offset_of!(task_events_info, messages_sent) - 12usize];
    ["Offset of field: task_events_info::messages_received"]
        [::std::mem::offset_of!(task_events_info, messages_received) - 16usize];
    ["Offset of field: task_events_info::syscalls_mach"]
        [::std::mem::offset_of!(task_events_info, syscalls_mach) - 20usize];
    ["Offset of field: task_events_info::syscalls_unix"]
        [::std::mem::offset_of!(task_events_info, syscalls_unix) - 24usize];
    ["Offset of field: task_events_info::csw"]
        [::std::mem::offset_of!(task_events_info, csw) - 28usize];
};
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_thread_times_info"][::std::mem::size_of::<task_thread_times_info>() - 16usize];
    ["Alignment of task_thread_times_info"]
        [::std::mem::align_of::<task_thread_times_info>() - 4usize];
    ["Offset of field: task_thread_times_info::user_time"]
        [::std::mem::offset_of!(task_thread_times_info, user_time) - 0usize];
    ["Offset of field: task_thread_times_info::system_time"]
        [::std::mem::offset_of!(task_thread_times_info, system_time) - 8usize];
};
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_absolutetime_info"][::std::mem::size_of::<task_absolutetime_info>() - 32usize];
    ["Alignment of task_absolutetime_info"]
        [::std::mem::align_of::<task_absolutetime_info>() - 4usize];
    ["Offset of field: task_absolutetime_info::total_user"]
        [::std::mem::offset_of!(task_absolutetime_info, total_user) - 0usize];
    ["Offset of field: task_absolutetime_info::total_system"]
        [::std::mem::offset_of!(task_absolutetime_info, total_system) - 8usize];
    ["Offset of field: task_absolutetime_info::threads_user"]
        [::std::mem::offset_of!(task_absolutetime_info, threads_user) - 16usize];
    ["Offset of field: task_absolutetime_info::threads_system"]
        [::std::mem::offset_of!(task_absolutetime_info, threads_system) - 24usize];
};
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_kernelmemory_info"][::std::mem::size_of::<task_kernelmemory_info>() - 32usize];
    ["Alignment of task_kernelmemory_info"]
        [::std::mem::align_of::<task_kernelmemory_info>() - 4usize];
    ["Offset of field: task_kernelmemory_info::total_palloc"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_palloc) - 0usize];
    ["Offset of field: task_kernelmemory_info::total_pfree"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_pfree) - 8usize];
    ["Offset of field: task_kernelmemory_info::total_salloc"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_salloc) - 16usize];
    ["Offset of field: task_kernelmemory_info::total_sfree"]
        [::std::mem::offset_of!(task_kernelmemory_info, total_sfree) - 24usize];
};
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_affinity_tag_info"][::std::mem::size_of::<task_affinity_tag_info>() - 16usize];
    ["Alignment of task_affinity_tag_info"]
        [::std::mem::align_of::<task_affinity_tag_info>() - 4usize];
    ["Offset of field: task_affinity_tag_info::set_count"]
        [::std::mem::offset_of!(task_affinity_tag_info, set_count) - 0usize];
    ["Offset of field: task_affinity_tag_info::min"]
        [::std::mem::offset_of!(task_affinity_tag_info, min) - 4usize];
    ["Offset of field: task_affinity_tag_info::max"]
        [::std::mem::offset_of!(task_affinity_tag_info, max) - 8usize];
    ["Offset of field: task_affinity_tag_info::task_count"]
        [::std::mem::offset_of!(task_affinity_tag_info, task_count) - 12usize];
};
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_dyld_info"][::std::mem::size_of::<task_dyld_info>() - 20usize];
    ["Alignment of task_dyld_info"][::std::mem::align_of::<task_dyld_info>() - 4usize];
    ["Offset of field: task_dyld_info::all_image_info_addr"]
        [::std::mem::offset_of!(task_dyld_info, all_image_info_addr) - 0usize];
    ["Offset of field: task_dyld_info::all_image_info_size"]
        [::std::mem::offset_of!(task_dyld_info, all_image_info_size) - 8usize];
    ["Offset of field: task_dyld_info::all_image_info_format"]
        [::std::mem::offset_of!(task_dyld_info, all_image_info_format) - 16usize];
};
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64_2 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_basic_info_64_2"][::std::mem::size_of::<task_basic_info_64_2>() - 40usize];
    ["Alignment of task_basic_info_64_2"][::std::mem::align_of::<task_basic_info_64_2>() - 4usize];
    ["Offset of field: task_basic_info_64_2::suspend_count"]
        [::std::mem::offset_of!(task_basic_info_64_2, suspend_count) - 0usize];
    ["Offset of field: task_basic_info_64_2::virtual_size"]
        [::std::mem::offset_of!(task_basic_info_64_2, virtual_size) - 4usize];
    ["Offset of field: task_basic_info_64_2::resident_size"]
        [::std::mem::offset_of!(task_basic_info_64_2, resident_size) - 12usize];
    ["Offset of field: task_basic_info_64_2::user_time"]
        [::std::mem::offset_of!(task_basic_info_64_2, user_time) - 20usize];
    ["Offset of field: task_basic_info_64_2::system_time"]
        [::std::mem::offset_of!(task_basic_info_64_2, system_time) - 28usize];
    ["Offset of field: task_basic_info_64_2::policy"]
        [::std::mem::offset_of!(task_basic_info_64_2, policy) - 36usize];
};
pub type task_basic_info_64_2_data_t = task_basic_info_64_2;
pub type task_basic_info_64_2_t = *mut task_basic_info_64_2;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_extmod_info"][::std::mem::size_of::<task_extmod_info>() - 64usize];
    ["Alignment of task_extmod_info"][::std::mem::align_of::<task_extmod_info>() - 4usize];
    ["Offset of field: task_extmod_info::task_uuid"]
        [::std::mem::offset_of!(task_extmod_info, task_uuid) - 0usize];
    ["Offset of field: task_extmod_info::extmod_statistics"]
        [::std::mem::offset_of!(task_extmod_info, extmod_statistics) - 16usize];
};
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_task_basic_info"][::std::mem::size_of::<mach_task_basic_info>() - 48usize];
    ["Alignment of mach_task_basic_info"][::std::mem::align_of::<mach_task_basic_info>() - 4usize];
    ["Offset of field: mach_task_basic_info::virtual_size"]
        [::std::mem::offset_of!(mach_task_basic_info, virtual_size) - 0usize];
    ["Offset of field: mach_task_basic_info::resident_size"]
        [::std::mem::offset_of!(mach_task_basic_info, resident_size) - 8usize];
    ["Offset of field: mach_task_basic_info::resident_size_max"]
        [::std::mem::offset_of!(mach_task_basic_info, resident_size_max) - 16usize];
    ["Offset of field: mach_task_basic_info::user_time"]
        [::std::mem::offset_of!(mach_task_basic_info, user_time) - 24usize];
    ["Offset of field: mach_task_basic_info::system_time"]
        [::std::mem::offset_of!(mach_task_basic_info, system_time) - 32usize];
    ["Offset of field: mach_task_basic_info::policy"]
        [::std::mem::offset_of!(mach_task_basic_info, policy) - 40usize];
    ["Offset of field: mach_task_basic_info::suspend_count"]
        [::std::mem::offset_of!(mach_task_basic_info, suspend_count) - 44usize];
};
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_power_info"][::std::mem::size_of::<task_power_info>() - 48usize];
    ["Alignment of task_power_info"][::std::mem::align_of::<task_power_info>() - 4usize];
    ["Offset of field: task_power_info::total_user"]
        [::std::mem::offset_of!(task_power_info, total_user) - 0usize];
    ["Offset of field: task_power_info::total_system"]
        [::std::mem::offset_of!(task_power_info, total_system) - 8usize];
    ["Offset of field: task_power_info::task_interrupt_wakeups"]
        [::std::mem::offset_of!(task_power_info, task_interrupt_wakeups) - 16usize];
    ["Offset of field: task_power_info::task_platform_idle_wakeups"]
        [::std::mem::offset_of!(task_power_info, task_platform_idle_wakeups) - 24usize];
    ["Offset of field: task_power_info::task_timer_wakeups_bin_1"]
        [::std::mem::offset_of!(task_power_info, task_timer_wakeups_bin_1) - 32usize];
    ["Offset of field: task_power_info::task_timer_wakeups_bin_2"]
        [::std::mem::offset_of!(task_power_info, task_timer_wakeups_bin_2) - 40usize];
};
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
    pub ledger_tag_neural_nofootprint_total: i64,
    pub ledger_tag_neural_nofootprint_peak: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_vm_info"][::std::mem::size_of::<task_vm_info>() - 372usize];
    ["Alignment of task_vm_info"][::std::mem::align_of::<task_vm_info>() - 4usize];
    ["Offset of field: task_vm_info::virtual_size"]
        [::std::mem::offset_of!(task_vm_info, virtual_size) - 0usize];
    ["Offset of field: task_vm_info::region_count"]
        [::std::mem::offset_of!(task_vm_info, region_count) - 8usize];
    ["Offset of field: task_vm_info::page_size"]
        [::std::mem::offset_of!(task_vm_info, page_size) - 12usize];
    ["Offset of field: task_vm_info::resident_size"]
        [::std::mem::offset_of!(task_vm_info, resident_size) - 16usize];
    ["Offset of field: task_vm_info::resident_size_peak"]
        [::std::mem::offset_of!(task_vm_info, resident_size_peak) - 24usize];
    ["Offset of field: task_vm_info::device"]
        [::std::mem::offset_of!(task_vm_info, device) - 32usize];
    ["Offset of field: task_vm_info::device_peak"]
        [::std::mem::offset_of!(task_vm_info, device_peak) - 40usize];
    ["Offset of field: task_vm_info::internal"]
        [::std::mem::offset_of!(task_vm_info, internal) - 48usize];
    ["Offset of field: task_vm_info::internal_peak"]
        [::std::mem::offset_of!(task_vm_info, internal_peak) - 56usize];
    ["Offset of field: task_vm_info::external"]
        [::std::mem::offset_of!(task_vm_info, external) - 64usize];
    ["Offset of field: task_vm_info::external_peak"]
        [::std::mem::offset_of!(task_vm_info, external_peak) - 72usize];
    ["Offset of field: task_vm_info::reusable"]
        [::std::mem::offset_of!(task_vm_info, reusable) - 80usize];
    ["Offset of field: task_vm_info::reusable_peak"]
        [::std::mem::offset_of!(task_vm_info, reusable_peak) - 88usize];
    ["Offset of field: task_vm_info::purgeable_volatile_pmap"]
        [::std::mem::offset_of!(task_vm_info, purgeable_volatile_pmap) - 96usize];
    ["Offset of field: task_vm_info::purgeable_volatile_resident"]
        [::std::mem::offset_of!(task_vm_info, purgeable_volatile_resident) - 104usize];
    ["Offset of field: task_vm_info::purgeable_volatile_virtual"]
        [::std::mem::offset_of!(task_vm_info, purgeable_volatile_virtual) - 112usize];
    ["Offset of field: task_vm_info::compressed"]
        [::std::mem::offset_of!(task_vm_info, compressed) - 120usize];
    ["Offset of field: task_vm_info::compressed_peak"]
        [::std::mem::offset_of!(task_vm_info, compressed_peak) - 128usize];
    ["Offset of field: task_vm_info::compressed_lifetime"]
        [::std::mem::offset_of!(task_vm_info, compressed_lifetime) - 136usize];
    ["Offset of field: task_vm_info::phys_footprint"]
        [::std::mem::offset_of!(task_vm_info, phys_footprint) - 144usize];
    ["Offset of field: task_vm_info::min_address"]
        [::std::mem::offset_of!(task_vm_info, min_address) - 152usize];
    ["Offset of field: task_vm_info::max_address"]
        [::std::mem::offset_of!(task_vm_info, max_address) - 160usize];
    ["Offset of field: task_vm_info::ledger_phys_footprint_peak"]
        [::std::mem::offset_of!(task_vm_info, ledger_phys_footprint_peak) - 168usize];
    ["Offset of field: task_vm_info::ledger_purgeable_nonvolatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_nonvolatile) - 176usize];
    ["Offset of field: task_vm_info::ledger_purgeable_novolatile_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_novolatile_compressed) - 184usize];
    ["Offset of field: task_vm_info::ledger_purgeable_volatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_volatile) - 192usize];
    ["Offset of field: task_vm_info::ledger_purgeable_volatile_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_purgeable_volatile_compressed) - 200usize];
    ["Offset of field: task_vm_info::ledger_tag_network_nonvolatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_network_nonvolatile) - 208usize];
    ["Offset of field: task_vm_info::ledger_tag_network_nonvolatile_compressed"][::std::mem::offset_of!(
        task_vm_info,
        ledger_tag_network_nonvolatile_compressed
    ) - 216usize];
    ["Offset of field: task_vm_info::ledger_tag_network_volatile"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_network_volatile) - 224usize];
    ["Offset of field: task_vm_info::ledger_tag_network_volatile_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_network_volatile_compressed) - 232usize];
    ["Offset of field: task_vm_info::ledger_tag_media_footprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_footprint) - 240usize];
    ["Offset of field: task_vm_info::ledger_tag_media_footprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_footprint_compressed) - 248usize];
    ["Offset of field: task_vm_info::ledger_tag_media_nofootprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_nofootprint) - 256usize];
    ["Offset of field: task_vm_info::ledger_tag_media_nofootprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_media_nofootprint_compressed) - 264usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_footprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_graphics_footprint) - 272usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_footprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_graphics_footprint_compressed) - 280usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_nofootprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_graphics_nofootprint) - 288usize];
    ["Offset of field: task_vm_info::ledger_tag_graphics_nofootprint_compressed"][::std::mem::offset_of!(
        task_vm_info,
        ledger_tag_graphics_nofootprint_compressed
    ) - 296usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_footprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_footprint) - 304usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_footprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_footprint_compressed) - 312usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint) - 320usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint_compressed"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint_compressed) - 328usize];
    ["Offset of field: task_vm_info::limit_bytes_remaining"]
        [::std::mem::offset_of!(task_vm_info, limit_bytes_remaining) - 336usize];
    ["Offset of field: task_vm_info::decompressions"]
        [::std::mem::offset_of!(task_vm_info, decompressions) - 344usize];
    ["Offset of field: task_vm_info::ledger_swapins"]
        [::std::mem::offset_of!(task_vm_info, ledger_swapins) - 348usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint_total"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint_total) - 356usize];
    ["Offset of field: task_vm_info::ledger_tag_neural_nofootprint_peak"]
        [::std::mem::offset_of!(task_vm_info, ledger_tag_neural_nofootprint_peak) - 364usize];
};
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_trace_memory_info"][::std::mem::size_of::<task_trace_memory_info>() - 24usize];
    ["Alignment of task_trace_memory_info"]
        [::std::mem::align_of::<task_trace_memory_info>() - 4usize];
    ["Offset of field: task_trace_memory_info::user_memory_address"]
        [::std::mem::offset_of!(task_trace_memory_info, user_memory_address) - 0usize];
    ["Offset of field: task_trace_memory_info::buffer_size"]
        [::std::mem::offset_of!(task_trace_memory_info, buffer_size) - 8usize];
    ["Offset of field: task_trace_memory_info::mailbox_array_size"]
        [::std::mem::offset_of!(task_trace_memory_info, mailbox_array_size) - 16usize];
};
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_wait_state_info"][::std::mem::size_of::<task_wait_state_info>() - 32usize];
    ["Alignment of task_wait_state_info"][::std::mem::align_of::<task_wait_state_info>() - 4usize];
    ["Offset of field: task_wait_state_info::total_wait_state_time"]
        [::std::mem::offset_of!(task_wait_state_info, total_wait_state_time) - 0usize];
    ["Offset of field: task_wait_state_info::total_wait_sfi_state_time"]
        [::std::mem::offset_of!(task_wait_state_info, total_wait_sfi_state_time) - 8usize];
    ["Offset of field: task_wait_state_info::_reserved"]
        [::std::mem::offset_of!(task_wait_state_info, _reserved) - 16usize];
};
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpu_energy_data"][::std::mem::size_of::<gpu_energy_data>() - 32usize];
    ["Alignment of gpu_energy_data"][::std::mem::align_of::<gpu_energy_data>() - 4usize];
    ["Offset of field: gpu_energy_data::task_gpu_utilisation"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_utilisation) - 0usize];
    ["Offset of field: gpu_energy_data::task_gpu_stat_reserved0"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_stat_reserved0) - 8usize];
    ["Offset of field: gpu_energy_data::task_gpu_stat_reserved1"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_stat_reserved1) - 16usize];
    ["Offset of field: gpu_energy_data::task_gpu_stat_reserved2"]
        [::std::mem::offset_of!(gpu_energy_data, task_gpu_stat_reserved2) - 24usize];
};
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_energy: u64,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_power_info_v2"][::std::mem::size_of::<task_power_info_v2>() - 104usize];
    ["Alignment of task_power_info_v2"][::std::mem::align_of::<task_power_info_v2>() - 4usize];
    ["Offset of field: task_power_info_v2::cpu_energy"]
        [::std::mem::offset_of!(task_power_info_v2, cpu_energy) - 0usize];
    ["Offset of field: task_power_info_v2::gpu_energy"]
        [::std::mem::offset_of!(task_power_info_v2, gpu_energy) - 48usize];
    ["Offset of field: task_power_info_v2::task_energy"]
        [::std::mem::offset_of!(task_power_info_v2, task_energy) - 80usize];
    ["Offset of field: task_power_info_v2::task_ptime"]
        [::std::mem::offset_of!(task_power_info_v2, task_ptime) - 88usize];
    ["Offset of field: task_power_info_v2::task_pset_switches"]
        [::std::mem::offset_of!(task_power_info_v2, task_pset_switches) - 96usize];
};
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_flags_info"][::std::mem::size_of::<task_flags_info>() - 4usize];
    ["Alignment of task_flags_info"][::std::mem::align_of::<task_flags_info>() - 4usize];
    ["Offset of field: task_flags_info::flags"]
        [::std::mem::offset_of!(task_flags_info, flags) - 0usize];
};
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_inspect_basic_counts"]
        [::std::mem::size_of::<task_inspect_basic_counts>() - 16usize];
    ["Alignment of task_inspect_basic_counts"]
        [::std::mem::align_of::<task_inspect_basic_counts>() - 8usize];
    ["Offset of field: task_inspect_basic_counts::instructions"]
        [::std::mem::offset_of!(task_inspect_basic_counts, instructions) - 0usize];
    ["Offset of field: task_inspect_basic_counts::cycles"]
        [::std::mem::offset_of!(task_inspect_basic_counts, cycles) - 8usize];
};
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_category_policy"][::std::mem::size_of::<task_category_policy>() - 4usize];
    ["Alignment of task_category_policy"][::std::mem::align_of::<task_category_policy>() - 4usize];
    ["Offset of field: task_category_policy::role"]
        [::std::mem::offset_of!(task_category_policy, role) - 0usize];
};
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_qos_policy"][::std::mem::size_of::<task_qos_policy>() - 8usize];
    ["Alignment of task_qos_policy"][::std::mem::align_of::<task_qos_policy>() - 4usize];
    ["Offset of field: task_qos_policy::task_latency_qos_tier"]
        [::std::mem::offset_of!(task_qos_policy, task_latency_qos_tier) - 0usize];
    ["Offset of field: task_qos_policy::task_throughput_qos_tier"]
        [::std::mem::offset_of!(task_qos_policy, task_throughput_qos_tier) - 4usize];
};
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_basic_info"][::std::mem::size_of::<thread_basic_info>() - 40usize];
    ["Alignment of thread_basic_info"][::std::mem::align_of::<thread_basic_info>() - 4usize];
    ["Offset of field: thread_basic_info::user_time"]
        [::std::mem::offset_of!(thread_basic_info, user_time) - 0usize];
    ["Offset of field: thread_basic_info::system_time"]
        [::std::mem::offset_of!(thread_basic_info, system_time) - 8usize];
    ["Offset of field: thread_basic_info::cpu_usage"]
        [::std::mem::offset_of!(thread_basic_info, cpu_usage) - 16usize];
    ["Offset of field: thread_basic_info::policy"]
        [::std::mem::offset_of!(thread_basic_info, policy) - 20usize];
    ["Offset of field: thread_basic_info::run_state"]
        [::std::mem::offset_of!(thread_basic_info, run_state) - 24usize];
    ["Offset of field: thread_basic_info::flags"]
        [::std::mem::offset_of!(thread_basic_info, flags) - 28usize];
    ["Offset of field: thread_basic_info::suspend_count"]
        [::std::mem::offset_of!(thread_basic_info, suspend_count) - 32usize];
    ["Offset of field: thread_basic_info::sleep_time"]
        [::std::mem::offset_of!(thread_basic_info, sleep_time) - 36usize];
};
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_identifier_info"][::std::mem::size_of::<thread_identifier_info>() - 24usize];
    ["Alignment of thread_identifier_info"]
        [::std::mem::align_of::<thread_identifier_info>() - 8usize];
    ["Offset of field: thread_identifier_info::thread_id"]
        [::std::mem::offset_of!(thread_identifier_info, thread_id) - 0usize];
    ["Offset of field: thread_identifier_info::thread_handle"]
        [::std::mem::offset_of!(thread_identifier_info, thread_handle) - 8usize];
    ["Offset of field: thread_identifier_info::dispatch_qaddr"]
        [::std::mem::offset_of!(thread_identifier_info, dispatch_qaddr) - 16usize];
};
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_extended_info"][::std::mem::size_of::<thread_extended_info>() - 112usize];
    ["Alignment of thread_extended_info"][::std::mem::align_of::<thread_extended_info>() - 8usize];
    ["Offset of field: thread_extended_info::pth_user_time"]
        [::std::mem::offset_of!(thread_extended_info, pth_user_time) - 0usize];
    ["Offset of field: thread_extended_info::pth_system_time"]
        [::std::mem::offset_of!(thread_extended_info, pth_system_time) - 8usize];
    ["Offset of field: thread_extended_info::pth_cpu_usage"]
        [::std::mem::offset_of!(thread_extended_info, pth_cpu_usage) - 16usize];
    ["Offset of field: thread_extended_info::pth_policy"]
        [::std::mem::offset_of!(thread_extended_info, pth_policy) - 20usize];
    ["Offset of field: thread_extended_info::pth_run_state"]
        [::std::mem::offset_of!(thread_extended_info, pth_run_state) - 24usize];
    ["Offset of field: thread_extended_info::pth_flags"]
        [::std::mem::offset_of!(thread_extended_info, pth_flags) - 28usize];
    ["Offset of field: thread_extended_info::pth_sleep_time"]
        [::std::mem::offset_of!(thread_extended_info, pth_sleep_time) - 32usize];
    ["Offset of field: thread_extended_info::pth_curpri"]
        [::std::mem::offset_of!(thread_extended_info, pth_curpri) - 36usize];
    ["Offset of field: thread_extended_info::pth_priority"]
        [::std::mem::offset_of!(thread_extended_info, pth_priority) - 40usize];
    ["Offset of field: thread_extended_info::pth_maxpriority"]
        [::std::mem::offset_of!(thread_extended_info, pth_maxpriority) - 44usize];
    ["Offset of field: thread_extended_info::pth_name"]
        [::std::mem::offset_of!(thread_extended_info, pth_name) - 48usize];
};
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_stat_entry"][::std::mem::size_of::<io_stat_entry>() - 16usize];
    ["Alignment of io_stat_entry"][::std::mem::align_of::<io_stat_entry>() - 8usize];
    ["Offset of field: io_stat_entry::count"]
        [::std::mem::offset_of!(io_stat_entry, count) - 0usize];
    ["Offset of field: io_stat_entry::size"][::std::mem::offset_of!(io_stat_entry, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_stat_info"][::std::mem::size_of::<io_stat_info>() - 128usize];
    ["Alignment of io_stat_info"][::std::mem::align_of::<io_stat_info>() - 8usize];
    ["Offset of field: io_stat_info::disk_reads"]
        [::std::mem::offset_of!(io_stat_info, disk_reads) - 0usize];
    ["Offset of field: io_stat_info::io_priority"]
        [::std::mem::offset_of!(io_stat_info, io_priority) - 16usize];
    ["Offset of field: io_stat_info::paging"]
        [::std::mem::offset_of!(io_stat_info, paging) - 80usize];
    ["Offset of field: io_stat_info::metadata"]
        [::std::mem::offset_of!(io_stat_info, metadata) - 96usize];
    ["Offset of field: io_stat_info::total_io"]
        [::std::mem::offset_of!(io_stat_info, total_io) - 112usize];
};
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_standard_policy"][::std::mem::size_of::<thread_standard_policy>() - 4usize];
    ["Alignment of thread_standard_policy"]
        [::std::mem::align_of::<thread_standard_policy>() - 4usize];
    ["Offset of field: thread_standard_policy::no_data"]
        [::std::mem::offset_of!(thread_standard_policy, no_data) - 0usize];
};
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_extended_policy"][::std::mem::size_of::<thread_extended_policy>() - 4usize];
    ["Alignment of thread_extended_policy"]
        [::std::mem::align_of::<thread_extended_policy>() - 4usize];
    ["Offset of field: thread_extended_policy::timeshare"]
        [::std::mem::offset_of!(thread_extended_policy, timeshare) - 0usize];
};
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_time_constraint_policy"]
        [::std::mem::size_of::<thread_time_constraint_policy>() - 16usize];
    ["Alignment of thread_time_constraint_policy"]
        [::std::mem::align_of::<thread_time_constraint_policy>() - 4usize];
    ["Offset of field: thread_time_constraint_policy::period"]
        [::std::mem::offset_of!(thread_time_constraint_policy, period) - 0usize];
    ["Offset of field: thread_time_constraint_policy::computation"]
        [::std::mem::offset_of!(thread_time_constraint_policy, computation) - 4usize];
    ["Offset of field: thread_time_constraint_policy::constraint"]
        [::std::mem::offset_of!(thread_time_constraint_policy, constraint) - 8usize];
    ["Offset of field: thread_time_constraint_policy::preemptible"]
        [::std::mem::offset_of!(thread_time_constraint_policy, preemptible) - 12usize];
};
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_precedence_policy"]
        [::std::mem::size_of::<thread_precedence_policy>() - 4usize];
    ["Alignment of thread_precedence_policy"]
        [::std::mem::align_of::<thread_precedence_policy>() - 4usize];
    ["Offset of field: thread_precedence_policy::importance"]
        [::std::mem::offset_of!(thread_precedence_policy, importance) - 0usize];
};
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_affinity_policy"][::std::mem::size_of::<thread_affinity_policy>() - 4usize];
    ["Alignment of thread_affinity_policy"]
        [::std::mem::align_of::<thread_affinity_policy>() - 4usize];
    ["Offset of field: thread_affinity_policy::affinity_tag"]
        [::std::mem::offset_of!(thread_affinity_policy, affinity_tag) - 0usize];
};
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_background_policy"]
        [::std::mem::size_of::<thread_background_policy>() - 4usize];
    ["Alignment of thread_background_policy"]
        [::std::mem::align_of::<thread_background_policy>() - 4usize];
    ["Offset of field: thread_background_policy::priority"]
        [::std::mem::offset_of!(thread_background_policy, priority) - 0usize];
};
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_latency_qos_policy"]
        [::std::mem::size_of::<thread_latency_qos_policy>() - 4usize];
    ["Alignment of thread_latency_qos_policy"]
        [::std::mem::align_of::<thread_latency_qos_policy>() - 4usize];
    ["Offset of field: thread_latency_qos_policy::thread_latency_qos_tier"]
        [::std::mem::offset_of!(thread_latency_qos_policy, thread_latency_qos_tier) - 0usize];
};
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_throughput_qos_policy"]
        [::std::mem::size_of::<thread_throughput_qos_policy>() - 4usize];
    ["Alignment of thread_throughput_qos_policy"]
        [::std::mem::align_of::<thread_throughput_qos_policy>() - 4usize];
    ["Offset of field: thread_throughput_qos_policy::thread_throughput_qos_tier"]
        [::std::mem::offset_of!(thread_throughput_qos_policy, thread_throughput_qos_tier) - 0usize];
};
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_timespec"][::std::mem::size_of::<mach_timespec>() - 8usize];
    ["Alignment of mach_timespec"][::std::mem::align_of::<mach_timespec>() - 4usize];
    ["Offset of field: mach_timespec::tv_sec"]
        [::std::mem::offset_of!(mach_timespec, tv_sec) - 0usize];
    ["Offset of field: mach_timespec::tv_nsec"]
        [::std::mem::offset_of!(mach_timespec, tv_nsec) - 4usize];
};
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_basic_info_64"][::std::mem::size_of::<vm_region_basic_info_64>() - 36usize];
    ["Alignment of vm_region_basic_info_64"]
        [::std::mem::align_of::<vm_region_basic_info_64>() - 4usize];
    ["Offset of field: vm_region_basic_info_64::protection"]
        [::std::mem::offset_of!(vm_region_basic_info_64, protection) - 0usize];
    ["Offset of field: vm_region_basic_info_64::max_protection"]
        [::std::mem::offset_of!(vm_region_basic_info_64, max_protection) - 4usize];
    ["Offset of field: vm_region_basic_info_64::inheritance"]
        [::std::mem::offset_of!(vm_region_basic_info_64, inheritance) - 8usize];
    ["Offset of field: vm_region_basic_info_64::shared"]
        [::std::mem::offset_of!(vm_region_basic_info_64, shared) - 12usize];
    ["Offset of field: vm_region_basic_info_64::reserved"]
        [::std::mem::offset_of!(vm_region_basic_info_64, reserved) - 16usize];
    ["Offset of field: vm_region_basic_info_64::offset"]
        [::std::mem::offset_of!(vm_region_basic_info_64, offset) - 20usize];
    ["Offset of field: vm_region_basic_info_64::behavior"]
        [::std::mem::offset_of!(vm_region_basic_info_64, behavior) - 28usize];
    ["Offset of field: vm_region_basic_info_64::user_wired_count"]
        [::std::mem::offset_of!(vm_region_basic_info_64, user_wired_count) - 32usize];
};
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_basic_info"][::std::mem::size_of::<vm_region_basic_info>() - 32usize];
    ["Alignment of vm_region_basic_info"][::std::mem::align_of::<vm_region_basic_info>() - 4usize];
    ["Offset of field: vm_region_basic_info::protection"]
        [::std::mem::offset_of!(vm_region_basic_info, protection) - 0usize];
    ["Offset of field: vm_region_basic_info::max_protection"]
        [::std::mem::offset_of!(vm_region_basic_info, max_protection) - 4usize];
    ["Offset of field: vm_region_basic_info::inheritance"]
        [::std::mem::offset_of!(vm_region_basic_info, inheritance) - 8usize];
    ["Offset of field: vm_region_basic_info::shared"]
        [::std::mem::offset_of!(vm_region_basic_info, shared) - 12usize];
    ["Offset of field: vm_region_basic_info::reserved"]
        [::std::mem::offset_of!(vm_region_basic_info, reserved) - 16usize];
    ["Offset of field: vm_region_basic_info::offset"]
        [::std::mem::offset_of!(vm_region_basic_info, offset) - 20usize];
    ["Offset of field: vm_region_basic_info::behavior"]
        [::std::mem::offset_of!(vm_region_basic_info, behavior) - 24usize];
    ["Offset of field: vm_region_basic_info::user_wired_count"]
        [::std::mem::offset_of!(vm_region_basic_info, user_wired_count) - 28usize];
};
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_extended_info"][::std::mem::size_of::<vm_region_extended_info>() - 36usize];
    ["Alignment of vm_region_extended_info"]
        [::std::mem::align_of::<vm_region_extended_info>() - 4usize];
    ["Offset of field: vm_region_extended_info::protection"]
        [::std::mem::offset_of!(vm_region_extended_info, protection) - 0usize];
    ["Offset of field: vm_region_extended_info::user_tag"]
        [::std::mem::offset_of!(vm_region_extended_info, user_tag) - 4usize];
    ["Offset of field: vm_region_extended_info::pages_resident"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_resident) - 8usize];
    ["Offset of field: vm_region_extended_info::pages_shared_now_private"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_shared_now_private) - 12usize];
    ["Offset of field: vm_region_extended_info::pages_swapped_out"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_swapped_out) - 16usize];
    ["Offset of field: vm_region_extended_info::pages_dirtied"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_dirtied) - 20usize];
    ["Offset of field: vm_region_extended_info::ref_count"]
        [::std::mem::offset_of!(vm_region_extended_info, ref_count) - 24usize];
    ["Offset of field: vm_region_extended_info::shadow_depth"]
        [::std::mem::offset_of!(vm_region_extended_info, shadow_depth) - 28usize];
    ["Offset of field: vm_region_extended_info::external_pager"]
        [::std::mem::offset_of!(vm_region_extended_info, external_pager) - 30usize];
    ["Offset of field: vm_region_extended_info::share_mode"]
        [::std::mem::offset_of!(vm_region_extended_info, share_mode) - 31usize];
    ["Offset of field: vm_region_extended_info::pages_reusable"]
        [::std::mem::offset_of!(vm_region_extended_info, pages_reusable) - 32usize];
};
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_top_info"][::std::mem::size_of::<vm_region_top_info>() - 20usize];
    ["Alignment of vm_region_top_info"][::std::mem::align_of::<vm_region_top_info>() - 4usize];
    ["Offset of field: vm_region_top_info::obj_id"]
        [::std::mem::offset_of!(vm_region_top_info, obj_id) - 0usize];
    ["Offset of field: vm_region_top_info::ref_count"]
        [::std::mem::offset_of!(vm_region_top_info, ref_count) - 4usize];
    ["Offset of field: vm_region_top_info::private_pages_resident"]
        [::std::mem::offset_of!(vm_region_top_info, private_pages_resident) - 8usize];
    ["Offset of field: vm_region_top_info::shared_pages_resident"]
        [::std::mem::offset_of!(vm_region_top_info, shared_pages_resident) - 12usize];
    ["Offset of field: vm_region_top_info::share_mode"]
        [::std::mem::offset_of!(vm_region_top_info, share_mode) - 16usize];
};
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_submap_info"][::std::mem::size_of::<vm_region_submap_info>() - 60usize];
    ["Alignment of vm_region_submap_info"]
        [::std::mem::align_of::<vm_region_submap_info>() - 4usize];
    ["Offset of field: vm_region_submap_info::protection"]
        [::std::mem::offset_of!(vm_region_submap_info, protection) - 0usize];
    ["Offset of field: vm_region_submap_info::max_protection"]
        [::std::mem::offset_of!(vm_region_submap_info, max_protection) - 4usize];
    ["Offset of field: vm_region_submap_info::inheritance"]
        [::std::mem::offset_of!(vm_region_submap_info, inheritance) - 8usize];
    ["Offset of field: vm_region_submap_info::offset"]
        [::std::mem::offset_of!(vm_region_submap_info, offset) - 12usize];
    ["Offset of field: vm_region_submap_info::user_tag"]
        [::std::mem::offset_of!(vm_region_submap_info, user_tag) - 16usize];
    ["Offset of field: vm_region_submap_info::pages_resident"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_resident) - 20usize];
    ["Offset of field: vm_region_submap_info::pages_shared_now_private"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_shared_now_private) - 24usize];
    ["Offset of field: vm_region_submap_info::pages_swapped_out"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_swapped_out) - 28usize];
    ["Offset of field: vm_region_submap_info::pages_dirtied"]
        [::std::mem::offset_of!(vm_region_submap_info, pages_dirtied) - 32usize];
    ["Offset of field: vm_region_submap_info::ref_count"]
        [::std::mem::offset_of!(vm_region_submap_info, ref_count) - 36usize];
    ["Offset of field: vm_region_submap_info::shadow_depth"]
        [::std::mem::offset_of!(vm_region_submap_info, shadow_depth) - 40usize];
    ["Offset of field: vm_region_submap_info::external_pager"]
        [::std::mem::offset_of!(vm_region_submap_info, external_pager) - 42usize];
    ["Offset of field: vm_region_submap_info::share_mode"]
        [::std::mem::offset_of!(vm_region_submap_info, share_mode) - 43usize];
    ["Offset of field: vm_region_submap_info::is_submap"]
        [::std::mem::offset_of!(vm_region_submap_info, is_submap) - 44usize];
    ["Offset of field: vm_region_submap_info::behavior"]
        [::std::mem::offset_of!(vm_region_submap_info, behavior) - 48usize];
    ["Offset of field: vm_region_submap_info::object_id"]
        [::std::mem::offset_of!(vm_region_submap_info, object_id) - 52usize];
    ["Offset of field: vm_region_submap_info::user_wired_count"]
        [::std::mem::offset_of!(vm_region_submap_info, user_wired_count) - 56usize];
};
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_submap_info_64"]
        [::std::mem::size_of::<vm_region_submap_info_64>() - 76usize];
    ["Alignment of vm_region_submap_info_64"]
        [::std::mem::align_of::<vm_region_submap_info_64>() - 4usize];
    ["Offset of field: vm_region_submap_info_64::protection"]
        [::std::mem::offset_of!(vm_region_submap_info_64, protection) - 0usize];
    ["Offset of field: vm_region_submap_info_64::max_protection"]
        [::std::mem::offset_of!(vm_region_submap_info_64, max_protection) - 4usize];
    ["Offset of field: vm_region_submap_info_64::inheritance"]
        [::std::mem::offset_of!(vm_region_submap_info_64, inheritance) - 8usize];
    ["Offset of field: vm_region_submap_info_64::offset"]
        [::std::mem::offset_of!(vm_region_submap_info_64, offset) - 12usize];
    ["Offset of field: vm_region_submap_info_64::user_tag"]
        [::std::mem::offset_of!(vm_region_submap_info_64, user_tag) - 20usize];
    ["Offset of field: vm_region_submap_info_64::pages_resident"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_resident) - 24usize];
    ["Offset of field: vm_region_submap_info_64::pages_shared_now_private"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_shared_now_private) - 28usize];
    ["Offset of field: vm_region_submap_info_64::pages_swapped_out"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_swapped_out) - 32usize];
    ["Offset of field: vm_region_submap_info_64::pages_dirtied"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_dirtied) - 36usize];
    ["Offset of field: vm_region_submap_info_64::ref_count"]
        [::std::mem::offset_of!(vm_region_submap_info_64, ref_count) - 40usize];
    ["Offset of field: vm_region_submap_info_64::shadow_depth"]
        [::std::mem::offset_of!(vm_region_submap_info_64, shadow_depth) - 44usize];
    ["Offset of field: vm_region_submap_info_64::external_pager"]
        [::std::mem::offset_of!(vm_region_submap_info_64, external_pager) - 46usize];
    ["Offset of field: vm_region_submap_info_64::share_mode"]
        [::std::mem::offset_of!(vm_region_submap_info_64, share_mode) - 47usize];
    ["Offset of field: vm_region_submap_info_64::is_submap"]
        [::std::mem::offset_of!(vm_region_submap_info_64, is_submap) - 48usize];
    ["Offset of field: vm_region_submap_info_64::behavior"]
        [::std::mem::offset_of!(vm_region_submap_info_64, behavior) - 52usize];
    ["Offset of field: vm_region_submap_info_64::object_id"]
        [::std::mem::offset_of!(vm_region_submap_info_64, object_id) - 56usize];
    ["Offset of field: vm_region_submap_info_64::user_wired_count"]
        [::std::mem::offset_of!(vm_region_submap_info_64, user_wired_count) - 60usize];
    ["Offset of field: vm_region_submap_info_64::pages_reusable"]
        [::std::mem::offset_of!(vm_region_submap_info_64, pages_reusable) - 64usize];
    ["Offset of field: vm_region_submap_info_64::object_id_full"]
        [::std::mem::offset_of!(vm_region_submap_info_64, object_id_full) - 68usize];
};
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region_submap_short_info_64"]
        [::std::mem::size_of::<vm_region_submap_short_info_64>() - 48usize];
    ["Alignment of vm_region_submap_short_info_64"]
        [::std::mem::align_of::<vm_region_submap_short_info_64>() - 4usize];
    ["Offset of field: vm_region_submap_short_info_64::protection"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, protection) - 0usize];
    ["Offset of field: vm_region_submap_short_info_64::max_protection"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, max_protection) - 4usize];
    ["Offset of field: vm_region_submap_short_info_64::inheritance"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, inheritance) - 8usize];
    ["Offset of field: vm_region_submap_short_info_64::offset"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, offset) - 12usize];
    ["Offset of field: vm_region_submap_short_info_64::user_tag"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, user_tag) - 20usize];
    ["Offset of field: vm_region_submap_short_info_64::ref_count"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, ref_count) - 24usize];
    ["Offset of field: vm_region_submap_short_info_64::shadow_depth"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, shadow_depth) - 28usize];
    ["Offset of field: vm_region_submap_short_info_64::external_pager"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, external_pager) - 30usize];
    ["Offset of field: vm_region_submap_short_info_64::share_mode"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, share_mode) - 31usize];
    ["Offset of field: vm_region_submap_short_info_64::is_submap"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, is_submap) - 32usize];
    ["Offset of field: vm_region_submap_short_info_64::behavior"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, behavior) - 36usize];
    ["Offset of field: vm_region_submap_short_info_64::object_id"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, object_id) - 40usize];
    ["Offset of field: vm_region_submap_short_info_64::user_wired_count"]
        [::std::mem::offset_of!(vm_region_submap_short_info_64, user_wired_count) - 44usize];
};
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_read_entry"][::std::mem::size_of::<mach_vm_read_entry>() - 16usize];
    ["Alignment of mach_vm_read_entry"][::std::mem::align_of::<mach_vm_read_entry>() - 4usize];
    ["Offset of field: mach_vm_read_entry::address"]
        [::std::mem::offset_of!(mach_vm_read_entry, address) - 0usize];
    ["Offset of field: mach_vm_read_entry::size"]
        [::std::mem::offset_of!(mach_vm_read_entry, size) - 8usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_read_entry"][::std::mem::size_of::<vm_read_entry>() - 16usize];
    ["Alignment of vm_read_entry"][::std::mem::align_of::<vm_read_entry>() - 4usize];
    ["Offset of field: vm_read_entry::address"]
        [::std::mem::offset_of!(vm_read_entry, address) - 0usize];
    ["Offset of field: vm_read_entry::size"][::std::mem::offset_of!(vm_read_entry, size) - 8usize];
};
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_page_info_basic"][::std::mem::size_of::<vm_page_info_basic>() - 32usize];
    ["Alignment of vm_page_info_basic"][::std::mem::align_of::<vm_page_info_basic>() - 8usize];
    ["Offset of field: vm_page_info_basic::disposition"]
        [::std::mem::offset_of!(vm_page_info_basic, disposition) - 0usize];
    ["Offset of field: vm_page_info_basic::ref_count"]
        [::std::mem::offset_of!(vm_page_info_basic, ref_count) - 4usize];
    ["Offset of field: vm_page_info_basic::object_id"]
        [::std::mem::offset_of!(vm_page_info_basic, object_id) - 8usize];
    ["Offset of field: vm_page_info_basic::offset"]
        [::std::mem::offset_of!(vm_page_info_basic, offset) - 16usize];
    ["Offset of field: vm_page_info_basic::depth"]
        [::std::mem::offset_of!(vm_page_info_basic, depth) - 24usize];
    ["Offset of field: vm_page_info_basic::__pad"]
        [::std::mem::offset_of!(vm_page_info_basic, __pad) - 28usize];
};
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_reference"][::std::mem::size_of::<kmod_reference>() - 16usize];
    ["Alignment of kmod_reference"][::std::mem::align_of::<kmod_reference>() - 4usize];
    ["Offset of field: kmod_reference::next"]
        [::std::mem::offset_of!(kmod_reference, next) - 0usize];
    ["Offset of field: kmod_reference::info"]
        [::std::mem::offset_of!(kmod_reference, info) - 8usize];
};
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_info"][::std::mem::size_of::<kmod_info>() - 196usize];
    ["Alignment of kmod_info"][::std::mem::align_of::<kmod_info>() - 4usize];
    ["Offset of field: kmod_info::next"][::std::mem::offset_of!(kmod_info, next) - 0usize];
    ["Offset of field: kmod_info::info_version"]
        [::std::mem::offset_of!(kmod_info, info_version) - 8usize];
    ["Offset of field: kmod_info::id"][::std::mem::offset_of!(kmod_info, id) - 12usize];
    ["Offset of field: kmod_info::name"][::std::mem::offset_of!(kmod_info, name) - 16usize];
    ["Offset of field: kmod_info::version"][::std::mem::offset_of!(kmod_info, version) - 80usize];
    ["Offset of field: kmod_info::reference_count"]
        [::std::mem::offset_of!(kmod_info, reference_count) - 144usize];
    ["Offset of field: kmod_info::reference_list"]
        [::std::mem::offset_of!(kmod_info, reference_list) - 148usize];
    ["Offset of field: kmod_info::address"][::std::mem::offset_of!(kmod_info, address) - 156usize];
    ["Offset of field: kmod_info::size"][::std::mem::offset_of!(kmod_info, size) - 164usize];
    ["Offset of field: kmod_info::hdr_size"]
        [::std::mem::offset_of!(kmod_info, hdr_size) - 172usize];
    ["Offset of field: kmod_info::start"][::std::mem::offset_of!(kmod_info, start) - 180usize];
    ["Offset of field: kmod_info::stop"][::std::mem::offset_of!(kmod_info, stop) - 188usize];
};
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_info_32_v1"][::std::mem::size_of::<kmod_info_32_v1>() - 168usize];
    ["Alignment of kmod_info_32_v1"][::std::mem::align_of::<kmod_info_32_v1>() - 4usize];
    ["Offset of field: kmod_info_32_v1::next_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, next_addr) - 0usize];
    ["Offset of field: kmod_info_32_v1::info_version"]
        [::std::mem::offset_of!(kmod_info_32_v1, info_version) - 4usize];
    ["Offset of field: kmod_info_32_v1::id"][::std::mem::offset_of!(kmod_info_32_v1, id) - 8usize];
    ["Offset of field: kmod_info_32_v1::name"]
        [::std::mem::offset_of!(kmod_info_32_v1, name) - 12usize];
    ["Offset of field: kmod_info_32_v1::version"]
        [::std::mem::offset_of!(kmod_info_32_v1, version) - 76usize];
    ["Offset of field: kmod_info_32_v1::reference_count"]
        [::std::mem::offset_of!(kmod_info_32_v1, reference_count) - 140usize];
    ["Offset of field: kmod_info_32_v1::reference_list_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, reference_list_addr) - 144usize];
    ["Offset of field: kmod_info_32_v1::address"]
        [::std::mem::offset_of!(kmod_info_32_v1, address) - 148usize];
    ["Offset of field: kmod_info_32_v1::size"]
        [::std::mem::offset_of!(kmod_info_32_v1, size) - 152usize];
    ["Offset of field: kmod_info_32_v1::hdr_size"]
        [::std::mem::offset_of!(kmod_info_32_v1, hdr_size) - 156usize];
    ["Offset of field: kmod_info_32_v1::start_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, start_addr) - 160usize];
    ["Offset of field: kmod_info_32_v1::stop_addr"]
        [::std::mem::offset_of!(kmod_info_32_v1, stop_addr) - 164usize];
};
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmod_info_64_v1"][::std::mem::size_of::<kmod_info_64_v1>() - 196usize];
    ["Alignment of kmod_info_64_v1"][::std::mem::align_of::<kmod_info_64_v1>() - 4usize];
    ["Offset of field: kmod_info_64_v1::next_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, next_addr) - 0usize];
    ["Offset of field: kmod_info_64_v1::info_version"]
        [::std::mem::offset_of!(kmod_info_64_v1, info_version) - 8usize];
    ["Offset of field: kmod_info_64_v1::id"][::std::mem::offset_of!(kmod_info_64_v1, id) - 12usize];
    ["Offset of field: kmod_info_64_v1::name"]
        [::std::mem::offset_of!(kmod_info_64_v1, name) - 16usize];
    ["Offset of field: kmod_info_64_v1::version"]
        [::std::mem::offset_of!(kmod_info_64_v1, version) - 80usize];
    ["Offset of field: kmod_info_64_v1::reference_count"]
        [::std::mem::offset_of!(kmod_info_64_v1, reference_count) - 144usize];
    ["Offset of field: kmod_info_64_v1::reference_list_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, reference_list_addr) - 148usize];
    ["Offset of field: kmod_info_64_v1::address"]
        [::std::mem::offset_of!(kmod_info_64_v1, address) - 156usize];
    ["Offset of field: kmod_info_64_v1::size"]
        [::std::mem::offset_of!(kmod_info_64_v1, size) - 164usize];
    ["Offset of field: kmod_info_64_v1::hdr_size"]
        [::std::mem::offset_of!(kmod_info_64_v1, hdr_size) - 172usize];
    ["Offset of field: kmod_info_64_v1::start_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, start_addr) - 180usize];
    ["Offset of field: kmod_info_64_v1::stop_addr"]
        [::std::mem::offset_of!(kmod_info_64_v1, stop_addr) - 188usize];
};
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsid"][::std::mem::size_of::<fsid>() - 8usize];
    ["Alignment of fsid"][::std::mem::align_of::<fsid>() - 4usize];
    ["Offset of field: fsid::val"][::std::mem::offset_of!(fsid, val) - 0usize];
};
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsobj_id"][::std::mem::size_of::<fsobj_id>() - 8usize];
    ["Alignment of fsobj_id"][::std::mem::align_of::<fsobj_id>() - 4usize];
    ["Offset of field: fsobj_id::fid_objno"][::std::mem::offset_of!(fsobj_id, fid_objno) - 0usize];
    ["Offset of field: fsobj_id::fid_generation"]
        [::std::mem::offset_of!(fsobj_id, fid_generation) - 4usize];
};
pub type fsobj_id_t = fsobj_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_kernel_image_info"][::std::mem::size_of::<dyld_kernel_image_info>() - 40usize];
    ["Alignment of dyld_kernel_image_info"]
        [::std::mem::align_of::<dyld_kernel_image_info>() - 8usize];
    ["Offset of field: dyld_kernel_image_info::uuid"]
        [::std::mem::offset_of!(dyld_kernel_image_info, uuid) - 0usize];
    ["Offset of field: dyld_kernel_image_info::fsobjid"]
        [::std::mem::offset_of!(dyld_kernel_image_info, fsobjid) - 16usize];
    ["Offset of field: dyld_kernel_image_info::fsid"]
        [::std::mem::offset_of!(dyld_kernel_image_info, fsid) - 24usize];
    ["Offset of field: dyld_kernel_image_info::load_addr"]
        [::std::mem::offset_of!(dyld_kernel_image_info, load_addr) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_kernel_process_info"]
        [::std::mem::size_of::<dyld_kernel_process_info>() - 72usize];
    ["Alignment of dyld_kernel_process_info"]
        [::std::mem::align_of::<dyld_kernel_process_info>() - 8usize];
    ["Offset of field: dyld_kernel_process_info::cache_image_info"]
        [::std::mem::offset_of!(dyld_kernel_process_info, cache_image_info) - 0usize];
    ["Offset of field: dyld_kernel_process_info::timestamp"]
        [::std::mem::offset_of!(dyld_kernel_process_info, timestamp) - 40usize];
    ["Offset of field: dyld_kernel_process_info::imageCount"]
        [::std::mem::offset_of!(dyld_kernel_process_info, imageCount) - 48usize];
    ["Offset of field: dyld_kernel_process_info::initialImageCount"]
        [::std::mem::offset_of!(dyld_kernel_process_info, initialImageCount) - 52usize];
    ["Offset of field: dyld_kernel_process_info::dyldState"]
        [::std::mem::offset_of!(dyld_kernel_process_info, dyldState) - 56usize];
    ["Offset of field: dyld_kernel_process_info::no_cache"]
        [::std::mem::offset_of!(dyld_kernel_process_info, no_cache) - 60usize];
    ["Offset of field: dyld_kernel_process_info::private_cache"]
        [::std::mem::offset_of!(dyld_kernel_process_info, private_cache) - 64usize];
};
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 8192usize];
pub type nspace_name_t = [::std::os::raw::c_char; 8192usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU16"][::std::mem::size_of::<_OSUnalignedU16>() - 2usize];
    ["Alignment of _OSUnalignedU16"][::std::mem::align_of::<_OSUnalignedU16>() - 1usize];
    ["Offset of field: _OSUnalignedU16::__val"]
        [::std::mem::offset_of!(_OSUnalignedU16, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU32"][::std::mem::size_of::<_OSUnalignedU32>() - 4usize];
    ["Alignment of _OSUnalignedU32"][::std::mem::align_of::<_OSUnalignedU32>() - 1usize];
    ["Offset of field: _OSUnalignedU32::__val"]
        [::std::mem::offset_of!(_OSUnalignedU32, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSUnalignedU64"][::std::mem::size_of::<_OSUnalignedU64>() - 8usize];
    ["Alignment of _OSUnalignedU64"][::std::mem::align_of::<_OSUnalignedU64>() - 1usize];
    ["Offset of field: _OSUnalignedU64::__val"]
        [::std::mem::offset_of!(_OSUnalignedU64, __val) - 0usize];
};
pub const OSUnknownByteOrder: _bindgen_ty_1 = 0;
pub const OSLittleEndian: _bindgen_ty_1 = 1;
pub const OSBigEndian: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDR_record_t"][::std::mem::size_of::<NDR_record_t>() - 8usize];
    ["Alignment of NDR_record_t"][::std::mem::align_of::<NDR_record_t>() - 1usize];
    ["Offset of field: NDR_record_t::mig_vers"]
        [::std::mem::offset_of!(NDR_record_t, mig_vers) - 0usize];
    ["Offset of field: NDR_record_t::if_vers"]
        [::std::mem::offset_of!(NDR_record_t, if_vers) - 1usize];
    ["Offset of field: NDR_record_t::reserved1"]
        [::std::mem::offset_of!(NDR_record_t, reserved1) - 2usize];
    ["Offset of field: NDR_record_t::mig_encoding"]
        [::std::mem::offset_of!(NDR_record_t, mig_encoding) - 3usize];
    ["Offset of field: NDR_record_t::int_rep"]
        [::std::mem::offset_of!(NDR_record_t, int_rep) - 4usize];
    ["Offset of field: NDR_record_t::char_rep"]
        [::std::mem::offset_of!(NDR_record_t, char_rep) - 5usize];
    ["Offset of field: NDR_record_t::float_rep"]
        [::std::mem::offset_of!(NDR_record_t, float_rep) - 6usize];
    ["Offset of field: NDR_record_t::reserved2"]
        [::std::mem::offset_of!(NDR_record_t, reserved2) - 7usize];
};
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_deleted_notification_t"]
        [::std::mem::size_of::<mach_port_deleted_notification_t>() - 56usize];
    ["Alignment of mach_port_deleted_notification_t"]
        [::std::mem::align_of::<mach_port_deleted_notification_t>() - 4usize];
    ["Offset of field: mach_port_deleted_notification_t::not_header"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, not_header) - 0usize];
    ["Offset of field: mach_port_deleted_notification_t::NDR"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, NDR) - 24usize];
    ["Offset of field: mach_port_deleted_notification_t::not_port"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, not_port) - 32usize];
    ["Offset of field: mach_port_deleted_notification_t::trailer"]
        [::std::mem::offset_of!(mach_port_deleted_notification_t, trailer) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_send_possible_notification_t"]
        [::std::mem::size_of::<mach_send_possible_notification_t>() - 56usize];
    ["Alignment of mach_send_possible_notification_t"]
        [::std::mem::align_of::<mach_send_possible_notification_t>() - 4usize];
    ["Offset of field: mach_send_possible_notification_t::not_header"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, not_header) - 0usize];
    ["Offset of field: mach_send_possible_notification_t::NDR"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, NDR) - 24usize];
    ["Offset of field: mach_send_possible_notification_t::not_port"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, not_port) - 32usize];
    ["Offset of field: mach_send_possible_notification_t::trailer"]
        [::std::mem::offset_of!(mach_send_possible_notification_t, trailer) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_port_destroyed_notification_t"]
        [::std::mem::size_of::<mach_port_destroyed_notification_t>() - 60usize];
    ["Alignment of mach_port_destroyed_notification_t"]
        [::std::mem::align_of::<mach_port_destroyed_notification_t>() - 4usize];
    ["Offset of field: mach_port_destroyed_notification_t::not_header"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, not_header) - 0usize];
    ["Offset of field: mach_port_destroyed_notification_t::not_body"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, not_body) - 24usize];
    ["Offset of field: mach_port_destroyed_notification_t::not_port"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, not_port) - 28usize];
    ["Offset of field: mach_port_destroyed_notification_t::trailer"]
        [::std::mem::offset_of!(mach_port_destroyed_notification_t, trailer) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_no_senders_notification_t"]
        [::std::mem::size_of::<mach_no_senders_notification_t>() - 56usize];
    ["Alignment of mach_no_senders_notification_t"]
        [::std::mem::align_of::<mach_no_senders_notification_t>() - 4usize];
    ["Offset of field: mach_no_senders_notification_t::not_header"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, not_header) - 0usize];
    ["Offset of field: mach_no_senders_notification_t::NDR"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, NDR) - 24usize];
    ["Offset of field: mach_no_senders_notification_t::not_count"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, not_count) - 32usize];
    ["Offset of field: mach_no_senders_notification_t::trailer"]
        [::std::mem::offset_of!(mach_no_senders_notification_t, trailer) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_send_once_notification_t"]
        [::std::mem::size_of::<mach_send_once_notification_t>() - 44usize];
    ["Alignment of mach_send_once_notification_t"]
        [::std::mem::align_of::<mach_send_once_notification_t>() - 4usize];
    ["Offset of field: mach_send_once_notification_t::not_header"]
        [::std::mem::offset_of!(mach_send_once_notification_t, not_header) - 0usize];
    ["Offset of field: mach_send_once_notification_t::trailer"]
        [::std::mem::offset_of!(mach_send_once_notification_t, trailer) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_dead_name_notification_t"]
        [::std::mem::size_of::<mach_dead_name_notification_t>() - 56usize];
    ["Alignment of mach_dead_name_notification_t"]
        [::std::mem::align_of::<mach_dead_name_notification_t>() - 4usize];
    ["Offset of field: mach_dead_name_notification_t::not_header"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, not_header) - 0usize];
    ["Offset of field: mach_dead_name_notification_t::NDR"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, NDR) - 24usize];
    ["Offset of field: mach_dead_name_notification_t::not_port"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, not_port) - 32usize];
    ["Offset of field: mach_dead_name_notification_t::trailer"]
        [::std::mem::offset_of!(mach_dead_name_notification_t, trailer) - 36usize];
};
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of routine_descriptor"][::std::mem::size_of::<routine_descriptor>() - 40usize];
    ["Alignment of routine_descriptor"][::std::mem::align_of::<routine_descriptor>() - 8usize];
    ["Offset of field: routine_descriptor::impl_routine"]
        [::std::mem::offset_of!(routine_descriptor, impl_routine) - 0usize];
    ["Offset of field: routine_descriptor::stub_routine"]
        [::std::mem::offset_of!(routine_descriptor, stub_routine) - 8usize];
    ["Offset of field: routine_descriptor::argc"]
        [::std::mem::offset_of!(routine_descriptor, argc) - 16usize];
    ["Offset of field: routine_descriptor::descr_count"]
        [::std::mem::offset_of!(routine_descriptor, descr_count) - 20usize];
    ["Offset of field: routine_descriptor::arg_descr"]
        [::std::mem::offset_of!(routine_descriptor, arg_descr) - 24usize];
    ["Offset of field: routine_descriptor::max_reply_msg"]
        [::std::mem::offset_of!(routine_descriptor, max_reply_msg) - 32usize];
};
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mig_subsystem"][::std::mem::size_of::<mig_subsystem>() - 72usize];
    ["Alignment of mig_subsystem"][::std::mem::align_of::<mig_subsystem>() - 8usize];
    ["Offset of field: mig_subsystem::server"]
        [::std::mem::offset_of!(mig_subsystem, server) - 0usize];
    ["Offset of field: mig_subsystem::start"]
        [::std::mem::offset_of!(mig_subsystem, start) - 8usize];
    ["Offset of field: mig_subsystem::end"][::std::mem::offset_of!(mig_subsystem, end) - 12usize];
    ["Offset of field: mig_subsystem::maxsize"]
        [::std::mem::offset_of!(mig_subsystem, maxsize) - 16usize];
    ["Offset of field: mig_subsystem::reserved"]
        [::std::mem::offset_of!(mig_subsystem, reserved) - 24usize];
    ["Offset of field: mig_subsystem::routine"]
        [::std::mem::offset_of!(mig_subsystem, routine) - 32usize];
};
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mig_symtab"][::std::mem::size_of::<mig_symtab>() - 24usize];
    ["Alignment of mig_symtab"][::std::mem::align_of::<mig_symtab>() - 8usize];
    ["Offset of field: mig_symtab::ms_routine_name"]
        [::std::mem::offset_of!(mig_symtab, ms_routine_name) - 0usize];
    ["Offset of field: mig_symtab::ms_routine_number"]
        [::std::mem::offset_of!(mig_symtab, ms_routine_number) - 8usize];
    ["Offset of field: mig_symtab::ms_routine"]
        [::std::mem::offset_of!(mig_symtab, ms_routine) - 16usize];
};
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mig_reply_error_t"][::std::mem::size_of::<mig_reply_error_t>() - 36usize];
    ["Alignment of mig_reply_error_t"][::std::mem::align_of::<mig_reply_error_t>() - 4usize];
    ["Offset of field: mig_reply_error_t::Head"]
        [::std::mem::offset_of!(mig_reply_error_t, Head) - 0usize];
    ["Offset of field: mig_reply_error_t::NDR"]
        [::std::mem::offset_of!(mig_reply_error_t, NDR) - 24usize];
    ["Offset of field: mig_reply_error_t::RetCode"]
        [::std::mem::offset_of!(mig_reply_error_t, RetCode) - 32usize];
};
extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_attributes(
        clock_ctrl: clock_ctrl_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__clock_set_time_t"]
        [::std::mem::size_of::<__Request__clock_set_time_t>() - 40usize];
    ["Alignment of __Request__clock_set_time_t"]
        [::std::mem::align_of::<__Request__clock_set_time_t>() - 4usize];
    ["Offset of field: __Request__clock_set_time_t::Head"]
        [::std::mem::offset_of!(__Request__clock_set_time_t, Head) - 0usize];
    ["Offset of field: __Request__clock_set_time_t::NDR"]
        [::std::mem::offset_of!(__Request__clock_set_time_t, NDR) - 24usize];
    ["Offset of field: __Request__clock_set_time_t::new_time"]
        [::std::mem::offset_of!(__Request__clock_set_time_t, new_time) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__clock_set_attributes_t"]
        [::std::mem::size_of::<__Request__clock_set_attributes_t>() - 44usize];
    ["Alignment of __Request__clock_set_attributes_t"]
        [::std::mem::align_of::<__Request__clock_set_attributes_t>() - 4usize];
    ["Offset of field: __Request__clock_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__clock_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__clock_set_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, flavor) - 32usize];
    ["Offset of field: __Request__clock_set_attributes_t::clock_attrCnt"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, clock_attrCnt) - 36usize];
    ["Offset of field: __Request__clock_set_attributes_t::clock_attr"]
        [::std::mem::offset_of!(__Request__clock_set_attributes_t, clock_attr) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__clock_priv_subsystem"]
        [::std::mem::size_of::<__RequestUnion__clock_priv_subsystem>() - 44usize];
    ["Alignment of __RequestUnion__clock_priv_subsystem"]
        [::std::mem::align_of::<__RequestUnion__clock_priv_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__clock_priv_subsystem::Request_clock_set_time"][::std::mem::offset_of!(
        __RequestUnion__clock_priv_subsystem,
        Request_clock_set_time
    ) - 0usize];
    ["Offset of field: __RequestUnion__clock_priv_subsystem::Request_clock_set_attributes"][::std::mem::offset_of!(
        __RequestUnion__clock_priv_subsystem,
        Request_clock_set_attributes
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__clock_set_time_t"]
        [::std::mem::size_of::<__Reply__clock_set_time_t>() - 36usize];
    ["Alignment of __Reply__clock_set_time_t"]
        [::std::mem::align_of::<__Reply__clock_set_time_t>() - 4usize];
    ["Offset of field: __Reply__clock_set_time_t::Head"]
        [::std::mem::offset_of!(__Reply__clock_set_time_t, Head) - 0usize];
    ["Offset of field: __Reply__clock_set_time_t::NDR"]
        [::std::mem::offset_of!(__Reply__clock_set_time_t, NDR) - 24usize];
    ["Offset of field: __Reply__clock_set_time_t::RetCode"]
        [::std::mem::offset_of!(__Reply__clock_set_time_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__clock_set_attributes_t"]
        [::std::mem::size_of::<__Reply__clock_set_attributes_t>() - 36usize];
    ["Alignment of __Reply__clock_set_attributes_t"]
        [::std::mem::align_of::<__Reply__clock_set_attributes_t>() - 4usize];
    ["Offset of field: __Reply__clock_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__clock_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__clock_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__clock_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__clock_set_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__clock_set_attributes_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__clock_priv_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__clock_priv_subsystem>() - 36usize];
    ["Alignment of __ReplyUnion__clock_priv_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__clock_priv_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__clock_priv_subsystem::Reply_clock_set_time"]
        [::std::mem::offset_of!(__ReplyUnion__clock_priv_subsystem, Reply_clock_set_time) - 0usize];
    ["Offset of field: __ReplyUnion__clock_priv_subsystem::Reply_clock_set_attributes"][::std::mem::offset_of!(
        __ReplyUnion__clock_priv_subsystem,
        Reply_clock_set_attributes
    ) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_vm_info_region"][::std::mem::size_of::<mach_vm_info_region>() - 56usize];
    ["Alignment of mach_vm_info_region"][::std::mem::align_of::<mach_vm_info_region>() - 4usize];
    ["Offset of field: mach_vm_info_region::vir_start"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_start) - 0usize];
    ["Offset of field: mach_vm_info_region::vir_end"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_end) - 8usize];
    ["Offset of field: mach_vm_info_region::vir_object"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_object) - 16usize];
    ["Offset of field: mach_vm_info_region::vir_offset"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_offset) - 24usize];
    ["Offset of field: mach_vm_info_region::vir_needs_copy"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_needs_copy) - 32usize];
    ["Offset of field: mach_vm_info_region::vir_protection"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_protection) - 36usize];
    ["Offset of field: mach_vm_info_region::vir_max_protection"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_max_protection) - 40usize];
    ["Offset of field: mach_vm_info_region::vir_inheritance"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_inheritance) - 44usize];
    ["Offset of field: mach_vm_info_region::vir_wired_count"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_wired_count) - 48usize];
    ["Offset of field: mach_vm_info_region::vir_user_wired_count"]
        [::std::mem::offset_of!(mach_vm_info_region, vir_user_wired_count) - 52usize];
};
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_info_region_64"][::std::mem::size_of::<vm_info_region_64>() - 44usize];
    ["Alignment of vm_info_region_64"][::std::mem::align_of::<vm_info_region_64>() - 4usize];
    ["Offset of field: vm_info_region_64::vir_start"]
        [::std::mem::offset_of!(vm_info_region_64, vir_start) - 0usize];
    ["Offset of field: vm_info_region_64::vir_end"]
        [::std::mem::offset_of!(vm_info_region_64, vir_end) - 4usize];
    ["Offset of field: vm_info_region_64::vir_object"]
        [::std::mem::offset_of!(vm_info_region_64, vir_object) - 8usize];
    ["Offset of field: vm_info_region_64::vir_offset"]
        [::std::mem::offset_of!(vm_info_region_64, vir_offset) - 12usize];
    ["Offset of field: vm_info_region_64::vir_needs_copy"]
        [::std::mem::offset_of!(vm_info_region_64, vir_needs_copy) - 20usize];
    ["Offset of field: vm_info_region_64::vir_protection"]
        [::std::mem::offset_of!(vm_info_region_64, vir_protection) - 24usize];
    ["Offset of field: vm_info_region_64::vir_max_protection"]
        [::std::mem::offset_of!(vm_info_region_64, vir_max_protection) - 28usize];
    ["Offset of field: vm_info_region_64::vir_inheritance"]
        [::std::mem::offset_of!(vm_info_region_64, vir_inheritance) - 32usize];
    ["Offset of field: vm_info_region_64::vir_wired_count"]
        [::std::mem::offset_of!(vm_info_region_64, vir_wired_count) - 36usize];
    ["Offset of field: vm_info_region_64::vir_user_wired_count"]
        [::std::mem::offset_of!(vm_info_region_64, vir_user_wired_count) - 40usize];
};
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_info_region"][::std::mem::size_of::<vm_info_region>() - 40usize];
    ["Alignment of vm_info_region"][::std::mem::align_of::<vm_info_region>() - 4usize];
    ["Offset of field: vm_info_region::vir_start"]
        [::std::mem::offset_of!(vm_info_region, vir_start) - 0usize];
    ["Offset of field: vm_info_region::vir_end"]
        [::std::mem::offset_of!(vm_info_region, vir_end) - 4usize];
    ["Offset of field: vm_info_region::vir_object"]
        [::std::mem::offset_of!(vm_info_region, vir_object) - 8usize];
    ["Offset of field: vm_info_region::vir_offset"]
        [::std::mem::offset_of!(vm_info_region, vir_offset) - 12usize];
    ["Offset of field: vm_info_region::vir_needs_copy"]
        [::std::mem::offset_of!(vm_info_region, vir_needs_copy) - 16usize];
    ["Offset of field: vm_info_region::vir_protection"]
        [::std::mem::offset_of!(vm_info_region, vir_protection) - 20usize];
    ["Offset of field: vm_info_region::vir_max_protection"]
        [::std::mem::offset_of!(vm_info_region, vir_max_protection) - 24usize];
    ["Offset of field: vm_info_region::vir_inheritance"]
        [::std::mem::offset_of!(vm_info_region, vir_inheritance) - 28usize];
    ["Offset of field: vm_info_region::vir_wired_count"]
        [::std::mem::offset_of!(vm_info_region, vir_wired_count) - 32usize];
    ["Offset of field: vm_info_region::vir_user_wired_count"]
        [::std::mem::offset_of!(vm_info_region, vir_user_wired_count) - 36usize];
};
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_info_object"][::std::mem::size_of::<vm_info_object>() - 88usize];
    ["Alignment of vm_info_object"][::std::mem::align_of::<vm_info_object>() - 4usize];
    ["Offset of field: vm_info_object::vio_object"]
        [::std::mem::offset_of!(vm_info_object, vio_object) - 0usize];
    ["Offset of field: vm_info_object::vio_size"]
        [::std::mem::offset_of!(vm_info_object, vio_size) - 4usize];
    ["Offset of field: vm_info_object::vio_ref_count"]
        [::std::mem::offset_of!(vm_info_object, vio_ref_count) - 8usize];
    ["Offset of field: vm_info_object::vio_resident_page_count"]
        [::std::mem::offset_of!(vm_info_object, vio_resident_page_count) - 12usize];
    ["Offset of field: vm_info_object::vio_absent_count"]
        [::std::mem::offset_of!(vm_info_object, vio_absent_count) - 16usize];
    ["Offset of field: vm_info_object::vio_copy"]
        [::std::mem::offset_of!(vm_info_object, vio_copy) - 20usize];
    ["Offset of field: vm_info_object::vio_shadow"]
        [::std::mem::offset_of!(vm_info_object, vio_shadow) - 24usize];
    ["Offset of field: vm_info_object::vio_shadow_offset"]
        [::std::mem::offset_of!(vm_info_object, vio_shadow_offset) - 28usize];
    ["Offset of field: vm_info_object::vio_paging_offset"]
        [::std::mem::offset_of!(vm_info_object, vio_paging_offset) - 32usize];
    ["Offset of field: vm_info_object::vio_copy_strategy"]
        [::std::mem::offset_of!(vm_info_object, vio_copy_strategy) - 36usize];
    ["Offset of field: vm_info_object::vio_last_alloc"]
        [::std::mem::offset_of!(vm_info_object, vio_last_alloc) - 40usize];
    ["Offset of field: vm_info_object::vio_paging_in_progress"]
        [::std::mem::offset_of!(vm_info_object, vio_paging_in_progress) - 48usize];
    ["Offset of field: vm_info_object::vio_pager_created"]
        [::std::mem::offset_of!(vm_info_object, vio_pager_created) - 52usize];
    ["Offset of field: vm_info_object::vio_pager_initialized"]
        [::std::mem::offset_of!(vm_info_object, vio_pager_initialized) - 56usize];
    ["Offset of field: vm_info_object::vio_pager_ready"]
        [::std::mem::offset_of!(vm_info_object, vio_pager_ready) - 60usize];
    ["Offset of field: vm_info_object::vio_can_persist"]
        [::std::mem::offset_of!(vm_info_object, vio_can_persist) - 64usize];
    ["Offset of field: vm_info_object::vio_internal"]
        [::std::mem::offset_of!(vm_info_object, vio_internal) - 68usize];
    ["Offset of field: vm_info_object::vio_temporary"]
        [::std::mem::offset_of!(vm_info_object, vio_temporary) - 72usize];
    ["Offset of field: vm_info_object::vio_alive"]
        [::std::mem::offset_of!(vm_info_object, vio_alive) - 76usize];
    ["Offset of field: vm_info_object::vio_purgable"]
        [::std::mem::offset_of!(vm_info_object, vio_purgable) - 80usize];
    ["Offset of field: vm_info_object::vio_purgable_volatile"]
        [::std::mem::offset_of!(vm_info_object, vio_purgable_volatile) - 84usize];
};
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zone_name"][::std::mem::size_of::<zone_name>() - 80usize];
    ["Alignment of zone_name"][::std::mem::align_of::<zone_name>() - 1usize];
    ["Offset of field: zone_name::zn_name"][::std::mem::offset_of!(zone_name, zn_name) - 0usize];
};
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zone_info"][::std::mem::size_of::<zone_info>() - 56usize];
    ["Alignment of zone_info"][::std::mem::align_of::<zone_info>() - 8usize];
    ["Offset of field: zone_info::zi_count"][::std::mem::offset_of!(zone_info, zi_count) - 0usize];
    ["Offset of field: zone_info::zi_cur_size"]
        [::std::mem::offset_of!(zone_info, zi_cur_size) - 8usize];
    ["Offset of field: zone_info::zi_max_size"]
        [::std::mem::offset_of!(zone_info, zi_max_size) - 16usize];
    ["Offset of field: zone_info::zi_elem_size"]
        [::std::mem::offset_of!(zone_info, zi_elem_size) - 24usize];
    ["Offset of field: zone_info::zi_alloc_size"]
        [::std::mem::offset_of!(zone_info, zi_alloc_size) - 32usize];
    ["Offset of field: zone_info::zi_pageable"]
        [::std::mem::offset_of!(zone_info, zi_pageable) - 40usize];
    ["Offset of field: zone_info::zi_sleepable"]
        [::std::mem::offset_of!(zone_info, zi_sleepable) - 44usize];
    ["Offset of field: zone_info::zi_exhaustible"]
        [::std::mem::offset_of!(zone_info, zi_exhaustible) - 48usize];
    ["Offset of field: zone_info::zi_collectable"]
        [::std::mem::offset_of!(zone_info, zi_collectable) - 52usize];
};
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_zone_name"][::std::mem::size_of::<mach_zone_name>() - 80usize];
    ["Alignment of mach_zone_name"][::std::mem::align_of::<mach_zone_name>() - 1usize];
    ["Offset of field: mach_zone_name::mzn_name"]
        [::std::mem::offset_of!(mach_zone_name, mzn_name) - 0usize];
};
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_zone_info_data"][::std::mem::size_of::<mach_zone_info_data>() - 64usize];
    ["Alignment of mach_zone_info_data"][::std::mem::align_of::<mach_zone_info_data>() - 8usize];
    ["Offset of field: mach_zone_info_data::mzi_count"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_count) - 0usize];
    ["Offset of field: mach_zone_info_data::mzi_cur_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_cur_size) - 8usize];
    ["Offset of field: mach_zone_info_data::mzi_max_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_max_size) - 16usize];
    ["Offset of field: mach_zone_info_data::mzi_elem_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_elem_size) - 24usize];
    ["Offset of field: mach_zone_info_data::mzi_alloc_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_alloc_size) - 32usize];
    ["Offset of field: mach_zone_info_data::mzi_sum_size"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_sum_size) - 40usize];
    ["Offset of field: mach_zone_info_data::mzi_exhaustible"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_exhaustible) - 48usize];
    ["Offset of field: mach_zone_info_data::mzi_collectable"]
        [::std::mem::offset_of!(mach_zone_info_data, mzi_collectable) - 56usize];
};
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_zone_info_data"][::std::mem::size_of::<task_zone_info_data>() - 88usize];
    ["Alignment of task_zone_info_data"][::std::mem::align_of::<task_zone_info_data>() - 8usize];
    ["Offset of field: task_zone_info_data::tzi_count"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_count) - 0usize];
    ["Offset of field: task_zone_info_data::tzi_cur_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_cur_size) - 8usize];
    ["Offset of field: task_zone_info_data::tzi_max_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_max_size) - 16usize];
    ["Offset of field: task_zone_info_data::tzi_elem_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_elem_size) - 24usize];
    ["Offset of field: task_zone_info_data::tzi_alloc_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_alloc_size) - 32usize];
    ["Offset of field: task_zone_info_data::tzi_sum_size"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_sum_size) - 40usize];
    ["Offset of field: task_zone_info_data::tzi_exhaustible"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_exhaustible) - 48usize];
    ["Offset of field: task_zone_info_data::tzi_collectable"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_collectable) - 56usize];
    ["Offset of field: task_zone_info_data::tzi_caller_acct"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_caller_acct) - 64usize];
    ["Offset of field: task_zone_info_data::tzi_task_alloc"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_task_alloc) - 72usize];
    ["Offset of field: task_zone_info_data::tzi_task_free"]
        [::std::mem::offset_of!(task_zone_info_data, tzi_task_free) - 80usize];
};
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_memory_info"][::std::mem::size_of::<mach_memory_info>() - 176usize];
    ["Alignment of mach_memory_info"][::std::mem::align_of::<mach_memory_info>() - 8usize];
    ["Offset of field: mach_memory_info::flags"]
        [::std::mem::offset_of!(mach_memory_info, flags) - 0usize];
    ["Offset of field: mach_memory_info::site"]
        [::std::mem::offset_of!(mach_memory_info, site) - 8usize];
    ["Offset of field: mach_memory_info::size"]
        [::std::mem::offset_of!(mach_memory_info, size) - 16usize];
    ["Offset of field: mach_memory_info::free"]
        [::std::mem::offset_of!(mach_memory_info, free) - 24usize];
    ["Offset of field: mach_memory_info::largest"]
        [::std::mem::offset_of!(mach_memory_info, largest) - 32usize];
    ["Offset of field: mach_memory_info::collectable_bytes"]
        [::std::mem::offset_of!(mach_memory_info, collectable_bytes) - 40usize];
    ["Offset of field: mach_memory_info::mapped"]
        [::std::mem::offset_of!(mach_memory_info, mapped) - 48usize];
    ["Offset of field: mach_memory_info::peak"]
        [::std::mem::offset_of!(mach_memory_info, peak) - 56usize];
    ["Offset of field: mach_memory_info::tag"]
        [::std::mem::offset_of!(mach_memory_info, tag) - 64usize];
    ["Offset of field: mach_memory_info::zone"]
        [::std::mem::offset_of!(mach_memory_info, zone) - 66usize];
    ["Offset of field: mach_memory_info::_resvA"]
        [::std::mem::offset_of!(mach_memory_info, _resvA) - 68usize];
    ["Offset of field: mach_memory_info::_resv"]
        [::std::mem::offset_of!(mach_memory_info, _resv) - 72usize];
    ["Offset of field: mach_memory_info::name"]
        [::std::mem::offset_of!(mach_memory_info, name) - 96usize];
};
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zone_btrecord"][::std::mem::size_of::<zone_btrecord>() - 128usize];
    ["Alignment of zone_btrecord"][::std::mem::align_of::<zone_btrecord>() - 8usize];
    ["Offset of field: zone_btrecord::ref_count"]
        [::std::mem::offset_of!(zone_btrecord, ref_count) - 0usize];
    ["Offset of field: zone_btrecord::operation_type"]
        [::std::mem::offset_of!(zone_btrecord, operation_type) - 4usize];
    ["Offset of field: zone_btrecord::bt"][::std::mem::offset_of!(zone_btrecord, bt) - 8usize];
};
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hash_info_bucket"][::std::mem::size_of::<hash_info_bucket>() - 4usize];
    ["Alignment of hash_info_bucket"][::std::mem::align_of::<hash_info_bucket>() - 4usize];
    ["Offset of field: hash_info_bucket::hib_count"]
        [::std::mem::offset_of!(hash_info_bucket, hib_count) - 0usize];
};
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockgroup_info"][::std::mem::size_of::<lockgroup_info>() - 264usize];
    ["Alignment of lockgroup_info"][::std::mem::align_of::<lockgroup_info>() - 8usize];
    ["Offset of field: lockgroup_info::lockgroup_name"]
        [::std::mem::offset_of!(lockgroup_info, lockgroup_name) - 0usize];
    ["Offset of field: lockgroup_info::lockgroup_attr"]
        [::std::mem::offset_of!(lockgroup_info, lockgroup_attr) - 64usize];
    ["Offset of field: lockgroup_info::lock_spin_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_cnt) - 72usize];
    ["Offset of field: lockgroup_info::lock_spin_util_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_util_cnt) - 80usize];
    ["Offset of field: lockgroup_info::lock_spin_held_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_held_cnt) - 88usize];
    ["Offset of field: lockgroup_info::lock_spin_miss_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_miss_cnt) - 96usize];
    ["Offset of field: lockgroup_info::lock_spin_held_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_held_max) - 104usize];
    ["Offset of field: lockgroup_info::lock_spin_held_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_spin_held_cum) - 112usize];
    ["Offset of field: lockgroup_info::lock_mtx_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_cnt) - 120usize];
    ["Offset of field: lockgroup_info::lock_mtx_util_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_util_cnt) - 128usize];
    ["Offset of field: lockgroup_info::lock_mtx_held_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_held_cnt) - 136usize];
    ["Offset of field: lockgroup_info::lock_mtx_miss_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_miss_cnt) - 144usize];
    ["Offset of field: lockgroup_info::lock_mtx_wait_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_wait_cnt) - 152usize];
    ["Offset of field: lockgroup_info::lock_mtx_held_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_held_max) - 160usize];
    ["Offset of field: lockgroup_info::lock_mtx_held_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_held_cum) - 168usize];
    ["Offset of field: lockgroup_info::lock_mtx_wait_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_wait_max) - 176usize];
    ["Offset of field: lockgroup_info::lock_mtx_wait_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_mtx_wait_cum) - 184usize];
    ["Offset of field: lockgroup_info::lock_rw_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_cnt) - 192usize];
    ["Offset of field: lockgroup_info::lock_rw_util_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_util_cnt) - 200usize];
    ["Offset of field: lockgroup_info::lock_rw_held_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_held_cnt) - 208usize];
    ["Offset of field: lockgroup_info::lock_rw_miss_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_miss_cnt) - 216usize];
    ["Offset of field: lockgroup_info::lock_rw_wait_cnt"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_wait_cnt) - 224usize];
    ["Offset of field: lockgroup_info::lock_rw_held_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_held_max) - 232usize];
    ["Offset of field: lockgroup_info::lock_rw_held_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_held_cum) - 240usize];
    ["Offset of field: lockgroup_info::lock_rw_wait_max"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_wait_max) - 248usize];
    ["Offset of field: lockgroup_info::lock_rw_wait_cum"]
        [::std::mem::offset_of!(lockgroup_info, lock_rw_wait_cum) - 256usize];
};
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_details"][::std::mem::size_of::<mach_core_details>() - 32usize];
    ["Alignment of mach_core_details"][::std::mem::align_of::<mach_core_details>() - 8usize];
    ["Offset of field: mach_core_details::gzip_offset"]
        [::std::mem::offset_of!(mach_core_details, gzip_offset) - 0usize];
    ["Offset of field: mach_core_details::gzip_length"]
        [::std::mem::offset_of!(mach_core_details, gzip_length) - 8usize];
    ["Offset of field: mach_core_details::core_name"]
        [::std::mem::offset_of!(mach_core_details, core_name) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_fileheader"][::std::mem::size_of::<mach_core_fileheader>() - 544usize];
    ["Alignment of mach_core_fileheader"][::std::mem::align_of::<mach_core_fileheader>() - 8usize];
    ["Offset of field: mach_core_fileheader::signature"]
        [::std::mem::offset_of!(mach_core_fileheader, signature) - 0usize];
    ["Offset of field: mach_core_fileheader::log_offset"]
        [::std::mem::offset_of!(mach_core_fileheader, log_offset) - 8usize];
    ["Offset of field: mach_core_fileheader::log_length"]
        [::std::mem::offset_of!(mach_core_fileheader, log_length) - 16usize];
    ["Offset of field: mach_core_fileheader::num_files"]
        [::std::mem::offset_of!(mach_core_fileheader, num_files) - 24usize];
    ["Offset of field: mach_core_fileheader::files"]
        [::std::mem::offset_of!(mach_core_fileheader, files) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_details_v2"][::std::mem::size_of::<mach_core_details_v2>() - 40usize];
    ["Alignment of mach_core_details_v2"][::std::mem::align_of::<mach_core_details_v2>() - 8usize];
    ["Offset of field: mach_core_details_v2::flags"]
        [::std::mem::offset_of!(mach_core_details_v2, flags) - 0usize];
    ["Offset of field: mach_core_details_v2::offset"]
        [::std::mem::offset_of!(mach_core_details_v2, offset) - 8usize];
    ["Offset of field: mach_core_details_v2::length"]
        [::std::mem::offset_of!(mach_core_details_v2, length) - 16usize];
    ["Offset of field: mach_core_details_v2::core_name"]
        [::std::mem::offset_of!(mach_core_details_v2, core_name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_fileheader_base"]
        [::std::mem::size_of::<mach_core_fileheader_base>() - 16usize];
    ["Alignment of mach_core_fileheader_base"]
        [::std::mem::align_of::<mach_core_fileheader_base>() - 8usize];
    ["Offset of field: mach_core_fileheader_base::signature"]
        [::std::mem::offset_of!(mach_core_fileheader_base, signature) - 0usize];
    ["Offset of field: mach_core_fileheader_base::version"]
        [::std::mem::offset_of!(mach_core_fileheader_base, version) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mach_core_fileheader_v2"][::std::mem::size_of::<mach_core_fileheader_v2>() - 64usize];
    ["Alignment of mach_core_fileheader_v2"]
        [::std::mem::align_of::<mach_core_fileheader_v2>() - 8usize];
    ["Offset of field: mach_core_fileheader_v2::signature"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, signature) - 0usize];
    ["Offset of field: mach_core_fileheader_v2::version"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, version) - 8usize];
    ["Offset of field: mach_core_fileheader_v2::flags"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, flags) - 16usize];
    ["Offset of field: mach_core_fileheader_v2::pub_key_offset"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, pub_key_offset) - 24usize];
    ["Offset of field: mach_core_fileheader_v2::pub_key_length"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, pub_key_length) - 32usize];
    ["Offset of field: mach_core_fileheader_v2::log_offset"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, log_offset) - 40usize];
    ["Offset of field: mach_core_fileheader_v2::log_length"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, log_length) - 48usize];
    ["Offset of field: mach_core_fileheader_v2::num_files"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, num_files) - 56usize];
    ["Offset of field: mach_core_fileheader_v2::files"]
        [::std::mem::offset_of!(mach_core_fileheader_v2, files) - 64usize];
};
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn host_get_boot_info(
        host_priv: host_priv_t,
        boot_info: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn host_priv_statistics(
        host_priv: host_priv_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_default_memory_manager(
        host_priv: host_priv_t,
        default_manager: *mut memory_object_default_t,
        cluster_size: memory_object_cluster_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_wire(
        host_priv: host_priv_t,
        thread: thread_act_t,
        wired: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate_cpm(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processors(
        host_priv: host_priv_t,
        out_processor_list: *mut processor_array_t,
        out_processor_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_control(
        host_priv: host_priv_t,
        clock_id: clock_id_t,
        clock_ctrl: *mut clock_ctrl_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_create(
        host_priv: host_priv_t,
        info: vm_address_t,
        module: *mut kmod_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t;
}
extern "C" {
    pub fn kmod_control(
        host_priv: host_priv_t,
        module: kmod_t,
        flavor: kmod_control_flavor_t,
        data: *mut kmod_args_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_special_port(
        host_priv: host_priv_t,
        node: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_special_port(
        host_priv: host_priv_t,
        which: ::std::os::raw::c_int,
        port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_swap_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_sets(
        host_priv: host_priv_t,
        processor_sets: *mut processor_set_name_array_t,
        processor_setsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_set_priv(
        host_priv: host_priv_t,
        set_name: processor_set_name_t,
        set: *mut processor_set_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn kext_request(
        host_priv: host_priv_t,
        user_log_flags: u32,
        request_data: vm_offset_t,
        request_dataCnt: mach_msg_type_number_t,
        response_data: *mut vm_offset_t,
        response_dataCnt: *mut mach_msg_type_number_t,
        log_data: *mut vm_offset_t,
        log_dataCnt: *mut mach_msg_type_number_t,
        op_result: *mut kern_return_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_boot_info_t"]
        [::std::mem::size_of::<__Request__host_get_boot_info_t>() - 24usize];
    ["Alignment of __Request__host_get_boot_info_t"]
        [::std::mem::align_of::<__Request__host_get_boot_info_t>() - 4usize];
    ["Offset of field: __Request__host_get_boot_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_boot_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_reboot_t"]
        [::std::mem::size_of::<__Request__host_reboot_t>() - 36usize];
    ["Alignment of __Request__host_reboot_t"]
        [::std::mem::align_of::<__Request__host_reboot_t>() - 4usize];
    ["Offset of field: __Request__host_reboot_t::Head"]
        [::std::mem::offset_of!(__Request__host_reboot_t, Head) - 0usize];
    ["Offset of field: __Request__host_reboot_t::NDR"]
        [::std::mem::offset_of!(__Request__host_reboot_t, NDR) - 24usize];
    ["Offset of field: __Request__host_reboot_t::options"]
        [::std::mem::offset_of!(__Request__host_reboot_t, options) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_priv_statistics_t"]
        [::std::mem::size_of::<__Request__host_priv_statistics_t>() - 40usize];
    ["Alignment of __Request__host_priv_statistics_t"]
        [::std::mem::align_of::<__Request__host_priv_statistics_t>() - 4usize];
    ["Offset of field: __Request__host_priv_statistics_t::Head"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, Head) - 0usize];
    ["Offset of field: __Request__host_priv_statistics_t::NDR"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, NDR) - 24usize];
    ["Offset of field: __Request__host_priv_statistics_t::flavor"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, flavor) - 32usize];
    ["Offset of field: __Request__host_priv_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Request__host_priv_statistics_t, host_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_default_memory_manager_t"]
        [::std::mem::size_of::<__Request__host_default_memory_manager_t>() - 52usize];
    ["Alignment of __Request__host_default_memory_manager_t"]
        [::std::mem::align_of::<__Request__host_default_memory_manager_t>() - 4usize];
    ["Offset of field: __Request__host_default_memory_manager_t::Head"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, Head) - 0usize];
    ["Offset of field: __Request__host_default_memory_manager_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_default_memory_manager_t::default_manager"][::std::mem::offset_of!(
        __Request__host_default_memory_manager_t,
        default_manager
    ) - 28usize];
    ["Offset of field: __Request__host_default_memory_manager_t::NDR"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, NDR) - 40usize];
    ["Offset of field: __Request__host_default_memory_manager_t::cluster_size"]
        [::std::mem::offset_of!(__Request__host_default_memory_manager_t, cluster_size) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_wire_t"][::std::mem::size_of::<__Request__vm_wire_t>() - 68usize];
    ["Alignment of __Request__vm_wire_t"][::std::mem::align_of::<__Request__vm_wire_t>() - 4usize];
    ["Offset of field: __Request__vm_wire_t::Head"]
        [::std::mem::offset_of!(__Request__vm_wire_t, Head) - 0usize];
    ["Offset of field: __Request__vm_wire_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_wire_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_wire_t::task"]
        [::std::mem::offset_of!(__Request__vm_wire_t, task) - 28usize];
    ["Offset of field: __Request__vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_wire_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_wire_t::address"]
        [::std::mem::offset_of!(__Request__vm_wire_t, address) - 48usize];
    ["Offset of field: __Request__vm_wire_t::size"]
        [::std::mem::offset_of!(__Request__vm_wire_t, size) - 56usize];
    ["Offset of field: __Request__vm_wire_t::desired_access"]
        [::std::mem::offset_of!(__Request__vm_wire_t, desired_access) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_wire_t"]
        [::std::mem::size_of::<__Request__thread_wire_t>() - 52usize];
    ["Alignment of __Request__thread_wire_t"]
        [::std::mem::align_of::<__Request__thread_wire_t>() - 4usize];
    ["Offset of field: __Request__thread_wire_t::Head"]
        [::std::mem::offset_of!(__Request__thread_wire_t, Head) - 0usize];
    ["Offset of field: __Request__thread_wire_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_wire_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_wire_t::thread"]
        [::std::mem::offset_of!(__Request__thread_wire_t, thread) - 28usize];
    ["Offset of field: __Request__thread_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_wire_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_wire_t::wired"]
        [::std::mem::offset_of!(__Request__thread_wire_t, wired) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_allocate_cpm_t"]
        [::std::mem::size_of::<__Request__vm_allocate_cpm_t>() - 68usize];
    ["Alignment of __Request__vm_allocate_cpm_t"]
        [::std::mem::align_of::<__Request__vm_allocate_cpm_t>() - 4usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::Head"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, Head) - 0usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::task"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, task) - 28usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::address"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, address) - 48usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::size"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, size) - 56usize];
    ["Offset of field: __Request__vm_allocate_cpm_t::flags"]
        [::std::mem::offset_of!(__Request__vm_allocate_cpm_t, flags) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processors_t"]
        [::std::mem::size_of::<__Request__host_processors_t>() - 24usize];
    ["Alignment of __Request__host_processors_t"]
        [::std::mem::align_of::<__Request__host_processors_t>() - 4usize];
    ["Offset of field: __Request__host_processors_t::Head"]
        [::std::mem::offset_of!(__Request__host_processors_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_clock_control_t"]
        [::std::mem::size_of::<__Request__host_get_clock_control_t>() - 36usize];
    ["Alignment of __Request__host_get_clock_control_t"]
        [::std::mem::align_of::<__Request__host_get_clock_control_t>() - 4usize];
    ["Offset of field: __Request__host_get_clock_control_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_clock_control_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_clock_control_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_clock_control_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_clock_control_t::clock_id"]
        [::std::mem::offset_of!(__Request__host_get_clock_control_t, clock_id) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_create_t"]
        [::std::mem::size_of::<__Request__kmod_create_t>() - 40usize];
    ["Alignment of __Request__kmod_create_t"]
        [::std::mem::align_of::<__Request__kmod_create_t>() - 4usize];
    ["Offset of field: __Request__kmod_create_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_create_t, Head) - 0usize];
    ["Offset of field: __Request__kmod_create_t::NDR"]
        [::std::mem::offset_of!(__Request__kmod_create_t, NDR) - 24usize];
    ["Offset of field: __Request__kmod_create_t::info"]
        [::std::mem::offset_of!(__Request__kmod_create_t, info) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_destroy_t"]
        [::std::mem::size_of::<__Request__kmod_destroy_t>() - 36usize];
    ["Alignment of __Request__kmod_destroy_t"]
        [::std::mem::align_of::<__Request__kmod_destroy_t>() - 4usize];
    ["Offset of field: __Request__kmod_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__kmod_destroy_t::NDR"]
        [::std::mem::offset_of!(__Request__kmod_destroy_t, NDR) - 24usize];
    ["Offset of field: __Request__kmod_destroy_t::module"]
        [::std::mem::offset_of!(__Request__kmod_destroy_t, module) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_control_t"]
        [::std::mem::size_of::<__Request__kmod_control_t>() - 64usize];
    ["Alignment of __Request__kmod_control_t"]
        [::std::mem::align_of::<__Request__kmod_control_t>() - 4usize];
    ["Offset of field: __Request__kmod_control_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_control_t, Head) - 0usize];
    ["Offset of field: __Request__kmod_control_t::msgh_body"]
        [::std::mem::offset_of!(__Request__kmod_control_t, msgh_body) - 24usize];
    ["Offset of field: __Request__kmod_control_t::data"]
        [::std::mem::offset_of!(__Request__kmod_control_t, data) - 28usize];
    ["Offset of field: __Request__kmod_control_t::NDR"]
        [::std::mem::offset_of!(__Request__kmod_control_t, NDR) - 44usize];
    ["Offset of field: __Request__kmod_control_t::module"]
        [::std::mem::offset_of!(__Request__kmod_control_t, module) - 52usize];
    ["Offset of field: __Request__kmod_control_t::flavor"]
        [::std::mem::offset_of!(__Request__kmod_control_t, flavor) - 56usize];
    ["Offset of field: __Request__kmod_control_t::dataCnt"]
        [::std::mem::offset_of!(__Request__kmod_control_t, dataCnt) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_special_port_t"]
        [::std::mem::size_of::<__Request__host_get_special_port_t>() - 40usize];
    ["Alignment of __Request__host_get_special_port_t"]
        [::std::mem::align_of::<__Request__host_get_special_port_t>() - 4usize];
    ["Offset of field: __Request__host_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_special_port_t::node"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, node) - 32usize];
    ["Offset of field: __Request__host_get_special_port_t::which"]
        [::std::mem::offset_of!(__Request__host_get_special_port_t, which) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_special_port_t"]
        [::std::mem::size_of::<__Request__host_set_special_port_t>() - 52usize];
    ["Alignment of __Request__host_set_special_port_t"]
        [::std::mem::align_of::<__Request__host_set_special_port_t>() - 4usize];
    ["Offset of field: __Request__host_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_set_special_port_t::port"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, port) - 28usize];
    ["Offset of field: __Request__host_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, NDR) - 40usize];
    ["Offset of field: __Request__host_set_special_port_t::which"]
        [::std::mem::offset_of!(__Request__host_set_special_port_t, which) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_exception_ports_t"]
        [::std::mem::size_of::<__Request__host_set_exception_ports_t>() - 60usize];
    ["Alignment of __Request__host_set_exception_ports_t"]
        [::std::mem::align_of::<__Request__host_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__host_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_set_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__host_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__host_set_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__host_set_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__host_set_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__host_set_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_exception_ports_t"]
        [::std::mem::size_of::<__Request__host_get_exception_ports_t>() - 36usize];
    ["Alignment of __Request__host_get_exception_ports_t"]
        [::std::mem::align_of::<__Request__host_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__host_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__host_get_exception_ports_t, exception_mask) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_swap_exception_ports_t"]
        [::std::mem::size_of::<__Request__host_swap_exception_ports_t>() - 60usize];
    ["Alignment of __Request__host_swap_exception_ports_t"]
        [::std::mem::align_of::<__Request__host_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__host_swap_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__host_swap_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_vm_wire_t"]
        [::std::mem::size_of::<__Request__mach_vm_wire_t>() - 68usize];
    ["Alignment of __Request__mach_vm_wire_t"]
        [::std::mem::align_of::<__Request__mach_vm_wire_t>() - 4usize];
    ["Offset of field: __Request__mach_vm_wire_t::Head"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, Head) - 0usize];
    ["Offset of field: __Request__mach_vm_wire_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_vm_wire_t::task"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, task) - 28usize];
    ["Offset of field: __Request__mach_vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_vm_wire_t::address"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, address) - 48usize];
    ["Offset of field: __Request__mach_vm_wire_t::size"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, size) - 56usize];
    ["Offset of field: __Request__mach_vm_wire_t::desired_access"]
        [::std::mem::offset_of!(__Request__mach_vm_wire_t, desired_access) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processor_sets_t"]
        [::std::mem::size_of::<__Request__host_processor_sets_t>() - 24usize];
    ["Alignment of __Request__host_processor_sets_t"]
        [::std::mem::align_of::<__Request__host_processor_sets_t>() - 4usize];
    ["Offset of field: __Request__host_processor_sets_t::Head"]
        [::std::mem::offset_of!(__Request__host_processor_sets_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processor_set_priv_t"]
        [::std::mem::size_of::<__Request__host_processor_set_priv_t>() - 40usize];
    ["Alignment of __Request__host_processor_set_priv_t"]
        [::std::mem::align_of::<__Request__host_processor_set_priv_t>() - 4usize];
    ["Offset of field: __Request__host_processor_set_priv_t::Head"]
        [::std::mem::offset_of!(__Request__host_processor_set_priv_t, Head) - 0usize];
    ["Offset of field: __Request__host_processor_set_priv_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_processor_set_priv_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_processor_set_priv_t::set_name"]
        [::std::mem::offset_of!(__Request__host_processor_set_priv_t, set_name) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_UNDServer_t"]
        [::std::mem::size_of::<__Request__host_set_UNDServer_t>() - 40usize];
    ["Alignment of __Request__host_set_UNDServer_t"]
        [::std::mem::align_of::<__Request__host_set_UNDServer_t>() - 4usize];
    ["Offset of field: __Request__host_set_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_UNDServer_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_UNDServer_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_set_UNDServer_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_set_UNDServer_t::server"]
        [::std::mem::offset_of!(__Request__host_set_UNDServer_t, server) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_UNDServer_t"]
        [::std::mem::size_of::<__Request__host_get_UNDServer_t>() - 24usize];
    ["Alignment of __Request__host_get_UNDServer_t"]
        [::std::mem::align_of::<__Request__host_get_UNDServer_t>() - 4usize];
    ["Offset of field: __Request__host_get_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_UNDServer_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kext_request_t"]
        [::std::mem::size_of::<__Request__kext_request_t>() - 60usize];
    ["Alignment of __Request__kext_request_t"]
        [::std::mem::align_of::<__Request__kext_request_t>() - 4usize];
    ["Offset of field: __Request__kext_request_t::Head"]
        [::std::mem::offset_of!(__Request__kext_request_t, Head) - 0usize];
    ["Offset of field: __Request__kext_request_t::msgh_body"]
        [::std::mem::offset_of!(__Request__kext_request_t, msgh_body) - 24usize];
    ["Offset of field: __Request__kext_request_t::request_data"]
        [::std::mem::offset_of!(__Request__kext_request_t, request_data) - 28usize];
    ["Offset of field: __Request__kext_request_t::NDR"]
        [::std::mem::offset_of!(__Request__kext_request_t, NDR) - 44usize];
    ["Offset of field: __Request__kext_request_t::user_log_flags"]
        [::std::mem::offset_of!(__Request__kext_request_t, user_log_flags) - 52usize];
    ["Offset of field: __Request__kext_request_t::request_dataCnt"]
        [::std::mem::offset_of!(__Request__kext_request_t, request_dataCnt) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__host_priv_subsystem"]
        [::std::mem::size_of::<__RequestUnion__host_priv_subsystem>() - 68usize];
    ["Alignment of __RequestUnion__host_priv_subsystem"]
        [::std::mem::align_of::<__RequestUnion__host_priv_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_boot_info"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_boot_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_reboot"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_host_reboot) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_priv_statistics"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_priv_statistics
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_default_memory_manager"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_default_memory_manager
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_vm_wire"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_vm_wire) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_thread_wire"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_thread_wire) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_vm_allocate_cpm"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_vm_allocate_cpm
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_processors"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_processors
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_clock_control"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_clock_control
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kmod_create"]
        [::std::mem::offset_of!(__RequestUnion__host_priv_subsystem, Request_kmod_create) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kmod_destroy"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_kmod_destroy
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kmod_control"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_kmod_control
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_special_port"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_set_special_port"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_set_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_set_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_swap_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_mach_vm_wire"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_mach_vm_wire
    ) - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_processor_sets"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_processor_sets
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_processor_set_priv"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_processor_set_priv
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_set_UNDServer"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_set_UNDServer
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_host_get_UNDServer"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_host_get_UNDServer
    )
        - 0usize];
    ["Offset of field: __RequestUnion__host_priv_subsystem::Request_kext_request"][::std::mem::offset_of!(
        __RequestUnion__host_priv_subsystem,
        Request_kext_request
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_boot_info_t"]
        [::std::mem::size_of::<__Reply__host_get_boot_info_t>() - 4140usize];
    ["Alignment of __Reply__host_get_boot_info_t"]
        [::std::mem::align_of::<__Reply__host_get_boot_info_t>() - 4usize];
    ["Offset of field: __Reply__host_get_boot_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_boot_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_get_boot_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_get_boot_info_t::boot_infoOffset"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, boot_infoOffset) - 36usize];
    ["Offset of field: __Reply__host_get_boot_info_t::boot_infoCnt"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, boot_infoCnt) - 40usize];
    ["Offset of field: __Reply__host_get_boot_info_t::boot_info"]
        [::std::mem::offset_of!(__Reply__host_get_boot_info_t, boot_info) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_reboot_t"][::std::mem::size_of::<__Reply__host_reboot_t>() - 36usize];
    ["Alignment of __Reply__host_reboot_t"]
        [::std::mem::align_of::<__Reply__host_reboot_t>() - 4usize];
    ["Offset of field: __Reply__host_reboot_t::Head"]
        [::std::mem::offset_of!(__Reply__host_reboot_t, Head) - 0usize];
    ["Offset of field: __Reply__host_reboot_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_reboot_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_reboot_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_reboot_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_priv_statistics_t"]
        [::std::mem::size_of::<__Reply__host_priv_statistics_t>() - 312usize];
    ["Alignment of __Reply__host_priv_statistics_t"]
        [::std::mem::align_of::<__Reply__host_priv_statistics_t>() - 4usize];
    ["Offset of field: __Reply__host_priv_statistics_t::Head"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, Head) - 0usize];
    ["Offset of field: __Reply__host_priv_statistics_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_priv_statistics_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_priv_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, host_info_outCnt) - 36usize];
    ["Offset of field: __Reply__host_priv_statistics_t::host_info_out"]
        [::std::mem::offset_of!(__Reply__host_priv_statistics_t, host_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_default_memory_manager_t"]
        [::std::mem::size_of::<__Reply__host_default_memory_manager_t>() - 40usize];
    ["Alignment of __Reply__host_default_memory_manager_t"]
        [::std::mem::align_of::<__Reply__host_default_memory_manager_t>() - 4usize];
    ["Offset of field: __Reply__host_default_memory_manager_t::Head"]
        [::std::mem::offset_of!(__Reply__host_default_memory_manager_t, Head) - 0usize];
    ["Offset of field: __Reply__host_default_memory_manager_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_default_memory_manager_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_default_memory_manager_t::default_manager"]
        [::std::mem::offset_of!(__Reply__host_default_memory_manager_t, default_manager) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_wire_t"][::std::mem::size_of::<__Reply__vm_wire_t>() - 36usize];
    ["Alignment of __Reply__vm_wire_t"][::std::mem::align_of::<__Reply__vm_wire_t>() - 4usize];
    ["Offset of field: __Reply__vm_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_wire_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_wire_t"][::std::mem::size_of::<__Reply__thread_wire_t>() - 36usize];
    ["Alignment of __Reply__thread_wire_t"]
        [::std::mem::align_of::<__Reply__thread_wire_t>() - 4usize];
    ["Offset of field: __Reply__thread_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_wire_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_allocate_cpm_t"]
        [::std::mem::size_of::<__Reply__vm_allocate_cpm_t>() - 44usize];
    ["Alignment of __Reply__vm_allocate_cpm_t"]
        [::std::mem::align_of::<__Reply__vm_allocate_cpm_t>() - 4usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_allocate_cpm_t::address"]
        [::std::mem::offset_of!(__Reply__vm_allocate_cpm_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processors_t"]
        [::std::mem::size_of::<__Reply__host_processors_t>() - 56usize];
    ["Alignment of __Reply__host_processors_t"]
        [::std::mem::align_of::<__Reply__host_processors_t>() - 4usize];
    ["Offset of field: __Reply__host_processors_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processors_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processors_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processors_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processors_t::out_processor_list"]
        [::std::mem::offset_of!(__Reply__host_processors_t, out_processor_list) - 28usize];
    ["Offset of field: __Reply__host_processors_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_processors_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_processors_t::out_processor_listCnt"]
        [::std::mem::offset_of!(__Reply__host_processors_t, out_processor_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_clock_control_t"]
        [::std::mem::size_of::<__Reply__host_get_clock_control_t>() - 40usize];
    ["Alignment of __Reply__host_get_clock_control_t"]
        [::std::mem::align_of::<__Reply__host_get_clock_control_t>() - 4usize];
    ["Offset of field: __Reply__host_get_clock_control_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_clock_control_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_clock_control_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_clock_control_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_clock_control_t::clock_ctrl"]
        [::std::mem::offset_of!(__Reply__host_get_clock_control_t, clock_ctrl) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_create_t"][::std::mem::size_of::<__Reply__kmod_create_t>() - 40usize];
    ["Alignment of __Reply__kmod_create_t"]
        [::std::mem::align_of::<__Reply__kmod_create_t>() - 4usize];
    ["Offset of field: __Reply__kmod_create_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_create_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, NDR) - 24usize];
    ["Offset of field: __Reply__kmod_create_t::RetCode"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, RetCode) - 32usize];
    ["Offset of field: __Reply__kmod_create_t::module"]
        [::std::mem::offset_of!(__Reply__kmod_create_t, module) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_destroy_t"][::std::mem::size_of::<__Reply__kmod_destroy_t>() - 36usize];
    ["Alignment of __Reply__kmod_destroy_t"]
        [::std::mem::align_of::<__Reply__kmod_destroy_t>() - 4usize];
    ["Offset of field: __Reply__kmod_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__kmod_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__kmod_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_control_t"][::std::mem::size_of::<__Reply__kmod_control_t>() - 56usize];
    ["Alignment of __Reply__kmod_control_t"]
        [::std::mem::align_of::<__Reply__kmod_control_t>() - 4usize];
    ["Offset of field: __Reply__kmod_control_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_control_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__kmod_control_t::data"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, data) - 28usize];
    ["Offset of field: __Reply__kmod_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, NDR) - 44usize];
    ["Offset of field: __Reply__kmod_control_t::dataCnt"]
        [::std::mem::offset_of!(__Reply__kmod_control_t, dataCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_special_port_t"]
        [::std::mem::size_of::<__Reply__host_get_special_port_t>() - 40usize];
    ["Alignment of __Reply__host_get_special_port_t"]
        [::std::mem::align_of::<__Reply__host_get_special_port_t>() - 4usize];
    ["Offset of field: __Reply__host_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_special_port_t::port"]
        [::std::mem::offset_of!(__Reply__host_get_special_port_t, port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_special_port_t"]
        [::std::mem::size_of::<__Reply__host_set_special_port_t>() - 36usize];
    ["Alignment of __Reply__host_set_special_port_t"]
        [::std::mem::align_of::<__Reply__host_set_special_port_t>() - 4usize];
    ["Offset of field: __Reply__host_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_special_port_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_special_port_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_special_port_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_exception_ports_t"]
        [::std::mem::size_of::<__Reply__host_set_exception_ports_t>() - 36usize];
    ["Alignment of __Reply__host_set_exception_ports_t"]
        [::std::mem::align_of::<__Reply__host_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__host_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_exception_ports_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_exception_ports_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_exception_ports_t"]
        [::std::mem::size_of::<__Reply__host_get_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__host_get_exception_ports_t"]
        [::std::mem::align_of::<__Reply__host_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__host_get_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__host_get_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_swap_exception_ports_t"]
        [::std::mem::size_of::<__Reply__host_swap_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__host_swap_exception_ports_t"]
        [::std::mem::align_of::<__Reply__host_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::old_handlerss"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, old_handlerss) - 28usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__host_swap_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__host_swap_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_vm_wire_t"][::std::mem::size_of::<__Reply__mach_vm_wire_t>() - 36usize];
    ["Alignment of __Reply__mach_vm_wire_t"]
        [::std::mem::align_of::<__Reply__mach_vm_wire_t>() - 4usize];
    ["Offset of field: __Reply__mach_vm_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_vm_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_vm_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_vm_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_vm_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_vm_wire_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processor_sets_t"]
        [::std::mem::size_of::<__Reply__host_processor_sets_t>() - 56usize];
    ["Alignment of __Reply__host_processor_sets_t"]
        [::std::mem::align_of::<__Reply__host_processor_sets_t>() - 4usize];
    ["Offset of field: __Reply__host_processor_sets_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processor_sets_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processor_sets_t::processor_sets"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, processor_sets) - 28usize];
    ["Offset of field: __Reply__host_processor_sets_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_processor_sets_t::processor_setsCnt"]
        [::std::mem::offset_of!(__Reply__host_processor_sets_t, processor_setsCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processor_set_priv_t"]
        [::std::mem::size_of::<__Reply__host_processor_set_priv_t>() - 40usize];
    ["Alignment of __Reply__host_processor_set_priv_t"]
        [::std::mem::align_of::<__Reply__host_processor_set_priv_t>() - 4usize];
    ["Offset of field: __Reply__host_processor_set_priv_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processor_set_priv_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processor_set_priv_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processor_set_priv_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processor_set_priv_t::set"]
        [::std::mem::offset_of!(__Reply__host_processor_set_priv_t, set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_UNDServer_t"]
        [::std::mem::size_of::<__Reply__host_set_UNDServer_t>() - 36usize];
    ["Alignment of __Reply__host_set_UNDServer_t"]
        [::std::mem::align_of::<__Reply__host_set_UNDServer_t>() - 4usize];
    ["Offset of field: __Reply__host_set_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_UNDServer_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_UNDServer_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_UNDServer_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_UNDServer_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_UNDServer_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_UNDServer_t"]
        [::std::mem::size_of::<__Reply__host_get_UNDServer_t>() - 40usize];
    ["Alignment of __Reply__host_get_UNDServer_t"]
        [::std::mem::align_of::<__Reply__host_get_UNDServer_t>() - 4usize];
    ["Offset of field: __Reply__host_get_UNDServer_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_UNDServer_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_UNDServer_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_UNDServer_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_UNDServer_t::server"]
        [::std::mem::offset_of!(__Reply__host_get_UNDServer_t, server) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kext_request_t"][::std::mem::size_of::<__Reply__kext_request_t>() - 80usize];
    ["Alignment of __Reply__kext_request_t"]
        [::std::mem::align_of::<__Reply__kext_request_t>() - 4usize];
    ["Offset of field: __Reply__kext_request_t::Head"]
        [::std::mem::offset_of!(__Reply__kext_request_t, Head) - 0usize];
    ["Offset of field: __Reply__kext_request_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__kext_request_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__kext_request_t::response_data"]
        [::std::mem::offset_of!(__Reply__kext_request_t, response_data) - 28usize];
    ["Offset of field: __Reply__kext_request_t::log_data"]
        [::std::mem::offset_of!(__Reply__kext_request_t, log_data) - 44usize];
    ["Offset of field: __Reply__kext_request_t::NDR"]
        [::std::mem::offset_of!(__Reply__kext_request_t, NDR) - 60usize];
    ["Offset of field: __Reply__kext_request_t::response_dataCnt"]
        [::std::mem::offset_of!(__Reply__kext_request_t, response_dataCnt) - 68usize];
    ["Offset of field: __Reply__kext_request_t::log_dataCnt"]
        [::std::mem::offset_of!(__Reply__kext_request_t, log_dataCnt) - 72usize];
    ["Offset of field: __Reply__kext_request_t::op_result"]
        [::std::mem::offset_of!(__Reply__kext_request_t, op_result) - 76usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__host_priv_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__host_priv_subsystem>() - 4140usize];
    ["Alignment of __ReplyUnion__host_priv_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__host_priv_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_boot_info"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_boot_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_reboot"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_host_reboot) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_priv_statistics"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_priv_statistics
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_default_memory_manager"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_default_memory_manager
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_vm_wire"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_vm_wire) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_thread_wire"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_thread_wire) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_vm_allocate_cpm"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_vm_allocate_cpm) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_processors"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_host_processors) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_clock_control"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_clock_control
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kmod_create"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kmod_create) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kmod_destroy"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kmod_destroy) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kmod_control"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kmod_control) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_special_port"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_set_special_port"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_set_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_set_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_swap_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_mach_vm_wire"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_mach_vm_wire) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_processor_sets"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_processor_sets
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_processor_set_priv"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_processor_set_priv
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_set_UNDServer"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_set_UNDServer
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_host_get_UNDServer"][::std::mem::offset_of!(
        __ReplyUnion__host_priv_subsystem,
        Reply_host_get_UNDServer
    ) - 0usize];
    ["Offset of field: __ReplyUnion__host_priv_subsystem::Reply_kext_request"]
        [::std::mem::offset_of!(__ReplyUnion__host_priv_subsystem, Reply_kext_request) - 0usize];
};
extern "C" {
    pub fn host_security_create_task_token(
        host_security: host_security_t,
        parent_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_security_set_task_token(
        host_security: host_security_t,
        target_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_security_create_task_token_t"]
        [::std::mem::size_of::<__Request__host_security_create_task_token_t>() - 124usize];
    ["Alignment of __Request__host_security_create_task_token_t"]
        [::std::mem::align_of::<__Request__host_security_create_task_token_t>() - 4usize];
    ["Offset of field: __Request__host_security_create_task_token_t::Head"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, Head) - 0usize];
    ["Offset of field: __Request__host_security_create_task_token_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_security_create_task_token_t::parent_task"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        parent_task
    ) - 28usize];
    ["Offset of field: __Request__host_security_create_task_token_t::host"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, host) - 40usize];
    ["Offset of field: __Request__host_security_create_task_token_t::ledgers"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, ledgers) - 52usize];
    ["Offset of field: __Request__host_security_create_task_token_t::NDR"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, NDR) - 68usize];
    ["Offset of field: __Request__host_security_create_task_token_t::sec_token"]
        [::std::mem::offset_of!(__Request__host_security_create_task_token_t, sec_token) - 76usize];
    ["Offset of field: __Request__host_security_create_task_token_t::audit_token"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        audit_token
    ) - 84usize];
    ["Offset of field: __Request__host_security_create_task_token_t::ledgersCnt"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        ledgersCnt
    ) - 116usize];
    ["Offset of field: __Request__host_security_create_task_token_t::inherit_memory"][::std::mem::offset_of!(
        __Request__host_security_create_task_token_t,
        inherit_memory
    ) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_security_set_task_token_t"]
        [::std::mem::size_of::<__Request__host_security_set_task_token_t>() - 100usize];
    ["Alignment of __Request__host_security_set_task_token_t"]
        [::std::mem::align_of::<__Request__host_security_set_task_token_t>() - 4usize];
    ["Offset of field: __Request__host_security_set_task_token_t::Head"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, Head) - 0usize];
    ["Offset of field: __Request__host_security_set_task_token_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_security_set_task_token_t::target_task"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, target_task) - 28usize];
    ["Offset of field: __Request__host_security_set_task_token_t::host"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, host) - 40usize];
    ["Offset of field: __Request__host_security_set_task_token_t::NDR"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, NDR) - 52usize];
    ["Offset of field: __Request__host_security_set_task_token_t::sec_token"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, sec_token) - 60usize];
    ["Offset of field: __Request__host_security_set_task_token_t::audit_token"]
        [::std::mem::offset_of!(__Request__host_security_set_task_token_t, audit_token) - 68usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__host_security_subsystem"]
        [::std::mem::size_of::<__RequestUnion__host_security_subsystem>() - 124usize];
    ["Alignment of __RequestUnion__host_security_subsystem"]
        [::std::mem::align_of::<__RequestUnion__host_security_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__host_security_subsystem::Request_host_security_create_task_token"] [:: std :: mem :: offset_of ! (__RequestUnion__host_security_subsystem , Request_host_security_create_task_token) - 0usize] ;
    ["Offset of field: __RequestUnion__host_security_subsystem::Request_host_security_set_task_token"] [:: std :: mem :: offset_of ! (__RequestUnion__host_security_subsystem , Request_host_security_set_task_token) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_security_create_task_token_t"]
        [::std::mem::size_of::<__Reply__host_security_create_task_token_t>() - 40usize];
    ["Alignment of __Reply__host_security_create_task_token_t"]
        [::std::mem::align_of::<__Reply__host_security_create_task_token_t>() - 4usize];
    ["Offset of field: __Reply__host_security_create_task_token_t::Head"]
        [::std::mem::offset_of!(__Reply__host_security_create_task_token_t, Head) - 0usize];
    ["Offset of field: __Reply__host_security_create_task_token_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_security_create_task_token_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_security_create_task_token_t::child_task"]
        [::std::mem::offset_of!(__Reply__host_security_create_task_token_t, child_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_security_set_task_token_t"]
        [::std::mem::size_of::<__Reply__host_security_set_task_token_t>() - 36usize];
    ["Alignment of __Reply__host_security_set_task_token_t"]
        [::std::mem::align_of::<__Reply__host_security_set_task_token_t>() - 4usize];
    ["Offset of field: __Reply__host_security_set_task_token_t::Head"]
        [::std::mem::offset_of!(__Reply__host_security_set_task_token_t, Head) - 0usize];
    ["Offset of field: __Reply__host_security_set_task_token_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_security_set_task_token_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_security_set_task_token_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_security_set_task_token_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__host_security_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__host_security_subsystem>() - 40usize];
    ["Alignment of __ReplyUnion__host_security_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__host_security_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__host_security_subsystem::Reply_host_security_create_task_token"] [:: std :: mem :: offset_of ! (__ReplyUnion__host_security_subsystem , Reply_host_security_create_task_token) - 0usize] ;
    ["Offset of field: __ReplyUnion__host_security_subsystem::Reply_host_security_set_task_token"] [:: std :: mem :: offset_of ! (__ReplyUnion__host_security_subsystem , Reply_host_security_set_task_token) - 0usize] ;
};
extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_info(
        processor: processor_t,
        flavor: processor_flavor_t,
        host: *mut host_t,
        processor_info_out: processor_info_t,
        processor_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_control(
        processor: processor_t,
        processor_cmd: processor_info_t,
        processor_cmdCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_assign(
        processor: processor_t,
        new_set: processor_set_t,
        wait: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_get_assignment(
        processor: processor_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_start_t"]
        [::std::mem::size_of::<__Request__processor_start_t>() - 24usize];
    ["Alignment of __Request__processor_start_t"]
        [::std::mem::align_of::<__Request__processor_start_t>() - 4usize];
    ["Offset of field: __Request__processor_start_t::Head"]
        [::std::mem::offset_of!(__Request__processor_start_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_exit_t"]
        [::std::mem::size_of::<__Request__processor_exit_t>() - 24usize];
    ["Alignment of __Request__processor_exit_t"]
        [::std::mem::align_of::<__Request__processor_exit_t>() - 4usize];
    ["Offset of field: __Request__processor_exit_t::Head"]
        [::std::mem::offset_of!(__Request__processor_exit_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_info_t"]
        [::std::mem::size_of::<__Request__processor_info_t>() - 40usize];
    ["Alignment of __Request__processor_info_t"]
        [::std::mem::align_of::<__Request__processor_info_t>() - 4usize];
    ["Offset of field: __Request__processor_info_t::Head"]
        [::std::mem::offset_of!(__Request__processor_info_t, Head) - 0usize];
    ["Offset of field: __Request__processor_info_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_info_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_info_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_info_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_info_t::processor_info_outCnt"]
        [::std::mem::offset_of!(__Request__processor_info_t, processor_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_control_t"]
        [::std::mem::size_of::<__Request__processor_control_t>() - 116usize];
    ["Alignment of __Request__processor_control_t"]
        [::std::mem::align_of::<__Request__processor_control_t>() - 4usize];
    ["Offset of field: __Request__processor_control_t::Head"]
        [::std::mem::offset_of!(__Request__processor_control_t, Head) - 0usize];
    ["Offset of field: __Request__processor_control_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_control_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_control_t::processor_cmdCnt"]
        [::std::mem::offset_of!(__Request__processor_control_t, processor_cmdCnt) - 32usize];
    ["Offset of field: __Request__processor_control_t::processor_cmd"]
        [::std::mem::offset_of!(__Request__processor_control_t, processor_cmd) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_assign_t"]
        [::std::mem::size_of::<__Request__processor_assign_t>() - 52usize];
    ["Alignment of __Request__processor_assign_t"]
        [::std::mem::align_of::<__Request__processor_assign_t>() - 4usize];
    ["Offset of field: __Request__processor_assign_t::Head"]
        [::std::mem::offset_of!(__Request__processor_assign_t, Head) - 0usize];
    ["Offset of field: __Request__processor_assign_t::msgh_body"]
        [::std::mem::offset_of!(__Request__processor_assign_t, msgh_body) - 24usize];
    ["Offset of field: __Request__processor_assign_t::new_set"]
        [::std::mem::offset_of!(__Request__processor_assign_t, new_set) - 28usize];
    ["Offset of field: __Request__processor_assign_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_assign_t, NDR) - 40usize];
    ["Offset of field: __Request__processor_assign_t::wait"]
        [::std::mem::offset_of!(__Request__processor_assign_t, wait) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_get_assignment_t"]
        [::std::mem::size_of::<__Request__processor_get_assignment_t>() - 24usize];
    ["Alignment of __Request__processor_get_assignment_t"]
        [::std::mem::align_of::<__Request__processor_get_assignment_t>() - 4usize];
    ["Offset of field: __Request__processor_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Request__processor_get_assignment_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__processor_subsystem"]
        [::std::mem::size_of::<__RequestUnion__processor_subsystem>() - 116usize];
    ["Alignment of __RequestUnion__processor_subsystem"]
        [::std::mem::align_of::<__RequestUnion__processor_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_start"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_start
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_exit"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_exit
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_info"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_control"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_control
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_assign"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_assign
    ) - 0usize];
    ["Offset of field: __RequestUnion__processor_subsystem::Request_processor_get_assignment"][::std::mem::offset_of!(
        __RequestUnion__processor_subsystem,
        Request_processor_get_assignment
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_start_t"]
        [::std::mem::size_of::<__Reply__processor_start_t>() - 36usize];
    ["Alignment of __Reply__processor_start_t"]
        [::std::mem::align_of::<__Reply__processor_start_t>() - 4usize];
    ["Offset of field: __Reply__processor_start_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_start_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_start_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_start_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_start_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_start_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_exit_t"]
        [::std::mem::size_of::<__Reply__processor_exit_t>() - 36usize];
    ["Alignment of __Reply__processor_exit_t"]
        [::std::mem::align_of::<__Reply__processor_exit_t>() - 4usize];
    ["Offset of field: __Reply__processor_exit_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_exit_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_exit_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_exit_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_exit_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_exit_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_info_t"]
        [::std::mem::size_of::<__Reply__processor_info_t>() - 132usize];
    ["Alignment of __Reply__processor_info_t"]
        [::std::mem::align_of::<__Reply__processor_info_t>() - 4usize];
    ["Offset of field: __Reply__processor_info_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_info_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_info_t::host"]
        [::std::mem::offset_of!(__Reply__processor_info_t, host) - 28usize];
    ["Offset of field: __Reply__processor_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_info_t, NDR) - 40usize];
    ["Offset of field: __Reply__processor_info_t::processor_info_outCnt"]
        [::std::mem::offset_of!(__Reply__processor_info_t, processor_info_outCnt) - 48usize];
    ["Offset of field: __Reply__processor_info_t::processor_info_out"]
        [::std::mem::offset_of!(__Reply__processor_info_t, processor_info_out) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_control_t"]
        [::std::mem::size_of::<__Reply__processor_control_t>() - 36usize];
    ["Alignment of __Reply__processor_control_t"]
        [::std::mem::align_of::<__Reply__processor_control_t>() - 4usize];
    ["Offset of field: __Reply__processor_control_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_control_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_control_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_control_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_control_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_assign_t"]
        [::std::mem::size_of::<__Reply__processor_assign_t>() - 36usize];
    ["Alignment of __Reply__processor_assign_t"]
        [::std::mem::align_of::<__Reply__processor_assign_t>() - 4usize];
    ["Offset of field: __Reply__processor_assign_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_assign_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_assign_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_assign_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_assign_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_assign_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_get_assignment_t"]
        [::std::mem::size_of::<__Reply__processor_get_assignment_t>() - 40usize];
    ["Alignment of __Reply__processor_get_assignment_t"]
        [::std::mem::align_of::<__Reply__processor_get_assignment_t>() - 4usize];
    ["Offset of field: __Reply__processor_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_get_assignment_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_get_assignment_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_get_assignment_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_get_assignment_t::assigned_set"]
        [::std::mem::offset_of!(__Reply__processor_get_assignment_t, assigned_set) - 28usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__processor_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__processor_subsystem>() - 132usize];
    ["Alignment of __ReplyUnion__processor_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__processor_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_start"]
        [::std::mem::offset_of!(__ReplyUnion__processor_subsystem, Reply_processor_start) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_exit"]
        [::std::mem::offset_of!(__ReplyUnion__processor_subsystem, Reply_processor_exit) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_info"]
        [::std::mem::offset_of!(__ReplyUnion__processor_subsystem, Reply_processor_info) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_control"][::std::mem::offset_of!(
        __ReplyUnion__processor_subsystem,
        Reply_processor_control
    ) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_assign"][::std::mem::offset_of!(
        __ReplyUnion__processor_subsystem,
        Reply_processor_assign
    ) - 0usize];
    ["Offset of field: __ReplyUnion__processor_subsystem::Reply_processor_get_assignment"][::std::mem::offset_of!(
        __ReplyUnion__processor_subsystem,
        Reply_processor_get_assignment
    )
        - 0usize];
};
extern "C" {
    pub fn processor_set_statistics(
        pset: processor_set_name_t,
        flavor: processor_set_flavor_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_max_priority(
        processor_set: processor_set_t,
        max_priority: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_enable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_disable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks(
        processor_set: processor_set_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_threads(
        processor_set: processor_set_t,
        thread_list: *mut thread_act_array_t,
        thread_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_control(
        pset: processor_set_t,
        flavor: processor_set_flavor_t,
        policy_info: processor_set_info_t,
        policy_infoCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_stack_usage(
        pset: processor_set_t,
        ltotal: *mut ::std::os::raw::c_uint,
        space: *mut vm_size_t,
        resident: *mut vm_size_t,
        maxusage: *mut vm_size_t,
        maxstack: *mut vm_offset_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_info(
        set_name: processor_set_name_t,
        flavor: ::std::os::raw::c_int,
        host: *mut host_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks_with_flavor(
        processor_set: processor_set_t,
        flavor: mach_task_flavor_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_statistics_t"]
        [::std::mem::size_of::<__Request__processor_set_statistics_t>() - 40usize];
    ["Alignment of __Request__processor_set_statistics_t"]
        [::std::mem::align_of::<__Request__processor_set_statistics_t>() - 4usize];
    ["Offset of field: __Request__processor_set_statistics_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_statistics_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_statistics_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_set_statistics_t::info_outCnt"]
        [::std::mem::offset_of!(__Request__processor_set_statistics_t, info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_destroy_t"]
        [::std::mem::size_of::<__Request__processor_set_destroy_t>() - 24usize];
    ["Alignment of __Request__processor_set_destroy_t"]
        [::std::mem::align_of::<__Request__processor_set_destroy_t>() - 4usize];
    ["Offset of field: __Request__processor_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_destroy_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_max_priority_t"]
        [::std::mem::size_of::<__Request__processor_set_max_priority_t>() - 40usize];
    ["Alignment of __Request__processor_set_max_priority_t"]
        [::std::mem::align_of::<__Request__processor_set_max_priority_t>() - 4usize];
    ["Offset of field: __Request__processor_set_max_priority_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_max_priority_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_max_priority_t::max_priority"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, max_priority) - 32usize];
    ["Offset of field: __Request__processor_set_max_priority_t::change_threads"]
        [::std::mem::offset_of!(__Request__processor_set_max_priority_t, change_threads) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_policy_enable_t"]
        [::std::mem::size_of::<__Request__processor_set_policy_enable_t>() - 36usize];
    ["Alignment of __Request__processor_set_policy_enable_t"]
        [::std::mem::align_of::<__Request__processor_set_policy_enable_t>() - 4usize];
    ["Offset of field: __Request__processor_set_policy_enable_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_policy_enable_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_policy_enable_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_policy_enable_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_policy_enable_t::policy"]
        [::std::mem::offset_of!(__Request__processor_set_policy_enable_t, policy) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_policy_disable_t"]
        [::std::mem::size_of::<__Request__processor_set_policy_disable_t>() - 40usize];
    ["Alignment of __Request__processor_set_policy_disable_t"]
        [::std::mem::align_of::<__Request__processor_set_policy_disable_t>() - 4usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_policy_disable_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_policy_disable_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::policy"]
        [::std::mem::offset_of!(__Request__processor_set_policy_disable_t, policy) - 32usize];
    ["Offset of field: __Request__processor_set_policy_disable_t::change_threads"][::std::mem::offset_of!(
        __Request__processor_set_policy_disable_t,
        change_threads
    ) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_tasks_t"]
        [::std::mem::size_of::<__Request__processor_set_tasks_t>() - 24usize];
    ["Alignment of __Request__processor_set_tasks_t"]
        [::std::mem::align_of::<__Request__processor_set_tasks_t>() - 4usize];
    ["Offset of field: __Request__processor_set_tasks_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_threads_t"]
        [::std::mem::size_of::<__Request__processor_set_threads_t>() - 24usize];
    ["Alignment of __Request__processor_set_threads_t"]
        [::std::mem::align_of::<__Request__processor_set_threads_t>() - 4usize];
    ["Offset of field: __Request__processor_set_threads_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_threads_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_policy_control_t"]
        [::std::mem::size_of::<__Request__processor_set_policy_control_t>() - 64usize];
    ["Alignment of __Request__processor_set_policy_control_t"]
        [::std::mem::align_of::<__Request__processor_set_policy_control_t>() - 4usize];
    ["Offset of field: __Request__processor_set_policy_control_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_policy_control_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_policy_control_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_set_policy_control_t::policy_infoCnt"][::std::mem::offset_of!(
        __Request__processor_set_policy_control_t,
        policy_infoCnt
    ) - 36usize];
    ["Offset of field: __Request__processor_set_policy_control_t::policy_info"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, policy_info) - 40usize];
    ["Offset of field: __Request__processor_set_policy_control_t::change"]
        [::std::mem::offset_of!(__Request__processor_set_policy_control_t, change) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_stack_usage_t"]
        [::std::mem::size_of::<__Request__processor_set_stack_usage_t>() - 24usize];
    ["Alignment of __Request__processor_set_stack_usage_t"]
        [::std::mem::align_of::<__Request__processor_set_stack_usage_t>() - 4usize];
    ["Offset of field: __Request__processor_set_stack_usage_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_stack_usage_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_info_t"]
        [::std::mem::size_of::<__Request__processor_set_info_t>() - 40usize];
    ["Alignment of __Request__processor_set_info_t"]
        [::std::mem::align_of::<__Request__processor_set_info_t>() - 4usize];
    ["Offset of field: __Request__processor_set_info_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_info_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_info_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, flavor) - 32usize];
    ["Offset of field: __Request__processor_set_info_t::info_outCnt"]
        [::std::mem::offset_of!(__Request__processor_set_info_t, info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: mach_task_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_tasks_with_flavor_t"]
        [::std::mem::size_of::<__Request__processor_set_tasks_with_flavor_t>() - 36usize];
    ["Alignment of __Request__processor_set_tasks_with_flavor_t"]
        [::std::mem::align_of::<__Request__processor_set_tasks_with_flavor_t>() - 4usize];
    ["Offset of field: __Request__processor_set_tasks_with_flavor_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_with_flavor_t, Head) - 0usize];
    ["Offset of field: __Request__processor_set_tasks_with_flavor_t::NDR"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_with_flavor_t, NDR) - 24usize];
    ["Offset of field: __Request__processor_set_tasks_with_flavor_t::flavor"]
        [::std::mem::offset_of!(__Request__processor_set_tasks_with_flavor_t, flavor) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    pub Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__processor_set_subsystem"]
        [::std::mem::size_of::<__RequestUnion__processor_set_subsystem>() - 64usize];
    ["Alignment of __RequestUnion__processor_set_subsystem"]
        [::std::mem::align_of::<__RequestUnion__processor_set_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_statistics"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_statistics) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_destroy"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_destroy
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_max_priority"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_max_priority) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_policy_enable"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_policy_enable) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_policy_disable"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_policy_disable) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_tasks"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_tasks
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_threads"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_threads
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_policy_control"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_policy_control) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_stack_usage"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_stack_usage) - 0usize] ;
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_info"][::std::mem::offset_of!(
        __RequestUnion__processor_set_subsystem,
        Request_processor_set_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__processor_set_subsystem::Request_processor_set_tasks_with_flavor"] [:: std :: mem :: offset_of ! (__RequestUnion__processor_set_subsystem , Request_processor_set_tasks_with_flavor) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_statistics_t"]
        [::std::mem::size_of::<__Reply__processor_set_statistics_t>() - 60usize];
    ["Alignment of __Reply__processor_set_statistics_t"]
        [::std::mem::align_of::<__Reply__processor_set_statistics_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_statistics_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_statistics_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_statistics_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, RetCode) - 32usize];
    ["Offset of field: __Reply__processor_set_statistics_t::info_outCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, info_outCnt) - 36usize];
    ["Offset of field: __Reply__processor_set_statistics_t::info_out"]
        [::std::mem::offset_of!(__Reply__processor_set_statistics_t, info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_destroy_t"]
        [::std::mem::size_of::<__Reply__processor_set_destroy_t>() - 36usize];
    ["Alignment of __Reply__processor_set_destroy_t"]
        [::std::mem::align_of::<__Reply__processor_set_destroy_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_max_priority_t"]
        [::std::mem::size_of::<__Reply__processor_set_max_priority_t>() - 36usize];
    ["Alignment of __Reply__processor_set_max_priority_t"]
        [::std::mem::align_of::<__Reply__processor_set_max_priority_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_max_priority_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_max_priority_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_max_priority_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_max_priority_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_max_priority_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_max_priority_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_policy_enable_t"]
        [::std::mem::size_of::<__Reply__processor_set_policy_enable_t>() - 36usize];
    ["Alignment of __Reply__processor_set_policy_enable_t"]
        [::std::mem::align_of::<__Reply__processor_set_policy_enable_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_policy_enable_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_enable_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_policy_enable_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_enable_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_policy_enable_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_enable_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_policy_disable_t"]
        [::std::mem::size_of::<__Reply__processor_set_policy_disable_t>() - 36usize];
    ["Alignment of __Reply__processor_set_policy_disable_t"]
        [::std::mem::align_of::<__Reply__processor_set_policy_disable_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_policy_disable_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_disable_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_policy_disable_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_disable_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_policy_disable_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_disable_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_tasks_t"]
        [::std::mem::size_of::<__Reply__processor_set_tasks_t>() - 56usize];
    ["Alignment of __Reply__processor_set_tasks_t"]
        [::std::mem::align_of::<__Reply__processor_set_tasks_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_tasks_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_tasks_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_tasks_t::task_list"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, task_list) - 28usize];
    ["Offset of field: __Reply__processor_set_tasks_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, NDR) - 44usize];
    ["Offset of field: __Reply__processor_set_tasks_t::task_listCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_t, task_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_threads_t"]
        [::std::mem::size_of::<__Reply__processor_set_threads_t>() - 56usize];
    ["Alignment of __Reply__processor_set_threads_t"]
        [::std::mem::align_of::<__Reply__processor_set_threads_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_threads_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_threads_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_threads_t::thread_list"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, thread_list) - 28usize];
    ["Offset of field: __Reply__processor_set_threads_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, NDR) - 44usize];
    ["Offset of field: __Reply__processor_set_threads_t::thread_listCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_threads_t, thread_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_policy_control_t"]
        [::std::mem::size_of::<__Reply__processor_set_policy_control_t>() - 36usize];
    ["Alignment of __Reply__processor_set_policy_control_t"]
        [::std::mem::align_of::<__Reply__processor_set_policy_control_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_policy_control_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_control_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_policy_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_control_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_policy_control_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_policy_control_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_stack_usage_t"]
        [::std::mem::size_of::<__Reply__processor_set_stack_usage_t>() - 72usize];
    ["Alignment of __Reply__processor_set_stack_usage_t"]
        [::std::mem::align_of::<__Reply__processor_set_stack_usage_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, NDR) - 24usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::RetCode"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, RetCode) - 32usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::ltotal"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, ltotal) - 36usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::space"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, space) - 40usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::resident"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, resident) - 48usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::maxusage"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, maxusage) - 56usize];
    ["Offset of field: __Reply__processor_set_stack_usage_t::maxstack"]
        [::std::mem::offset_of!(__Reply__processor_set_stack_usage_t, maxstack) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_info_t"]
        [::std::mem::size_of::<__Reply__processor_set_info_t>() - 72usize];
    ["Alignment of __Reply__processor_set_info_t"]
        [::std::mem::align_of::<__Reply__processor_set_info_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_info_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_info_t::host"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, host) - 28usize];
    ["Offset of field: __Reply__processor_set_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, NDR) - 40usize];
    ["Offset of field: __Reply__processor_set_info_t::info_outCnt"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, info_outCnt) - 48usize];
    ["Offset of field: __Reply__processor_set_info_t::info_out"]
        [::std::mem::offset_of!(__Reply__processor_set_info_t, info_out) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_tasks_with_flavor_t"]
        [::std::mem::size_of::<__Reply__processor_set_tasks_with_flavor_t>() - 56usize];
    ["Alignment of __Reply__processor_set_tasks_with_flavor_t"]
        [::std::mem::align_of::<__Reply__processor_set_tasks_with_flavor_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::task_list"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, task_list) - 28usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::NDR"]
        [::std::mem::offset_of!(__Reply__processor_set_tasks_with_flavor_t, NDR) - 44usize];
    ["Offset of field: __Reply__processor_set_tasks_with_flavor_t::task_listCnt"][::std::mem::offset_of!(
        __Reply__processor_set_tasks_with_flavor_t,
        task_listCnt
    ) - 52usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    pub Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__processor_set_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__processor_set_subsystem>() - 72usize];
    ["Alignment of __ReplyUnion__processor_set_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__processor_set_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_statistics"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_statistics
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_destroy"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_destroy
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_max_priority"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_max_priority
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_policy_enable"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_policy_enable
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_policy_disable"] [:: std :: mem :: offset_of ! (__ReplyUnion__processor_set_subsystem , Reply_processor_set_policy_disable) - 0usize] ;
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_tasks"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_tasks
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_threads"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_threads
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_policy_control"] [:: std :: mem :: offset_of ! (__ReplyUnion__processor_set_subsystem , Reply_processor_set_policy_control) - 0usize] ;
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_stack_usage"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_stack_usage
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_info"][::std::mem::offset_of!(
        __ReplyUnion__processor_set_subsystem,
        Reply_processor_set_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__processor_set_subsystem::Reply_processor_set_tasks_with_flavor"] [:: std :: mem :: offset_of ! (__ReplyUnion__processor_set_subsystem , Reply_processor_set_tasks_with_flavor) - 0usize] ;
};
pub type sync_policy_t = ::std::os::raw::c_int;
extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t)
        -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
        wait_time: mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t;
}
extern "C" {
    pub fn task_create(
        target_task: task_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_threads(
        target_task: task_inspect_t,
        act_list: *mut thread_act_array_t,
        act_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_register(
        target_task: task_t,
        init_port_set: mach_port_array_t,
        init_port_setCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_lookup(
        target_task: task_t,
        init_port_set: *mut mach_port_array_t,
        init_port_setCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_info(
        target_task: task_name_t,
        flavor: task_flavor_t,
        task_info_out: task_info_t,
        task_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_info(
        target_task: task_t,
        flavor: task_flavor_t,
        task_info_in: task_info_t,
        task_info_inCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_resume(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_special_port(
        task: task_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_special_port(
        task: task_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_create_running(
        parent_task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
        child_act: *mut thread_act_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_create(
        task: task_t,
        new_lock_set: *mut lock_set_t,
        n_ulocks: ::std::os::raw::c_int,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_create(
        task: task_t,
        semaphore: *mut semaphore_t,
        policy: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_set(
        task: task_policy_set_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_get(
        task: task_policy_get_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy(
        task: task_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation(
        target_port: task_t,
        routine_entry_pt: vm_address_t,
        routine_number: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_emulation_vector(
        task: task_t,
        vector_start: *mut ::std::os::raw::c_int,
        emulation_vector: *mut emulation_vector_t,
        emulation_vectorCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation_vector(
        task: task_t,
        vector_start: ::std::os::raw::c_int,
        emulation_vector: emulation_vector_t,
        emulation_vectorCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_ras_pc(
        target_task: task_t,
        basepc: vm_address_t,
        boundspc: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_zone_info(
        target_task: task_inspect_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut task_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign(
        task: task_t,
        new_set: processor_set_t,
        assign_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_assignment(
        task: task_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_policy(
        task: task_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_state(
        task: task_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_state(
        task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_phys_footprint_limit(
        task: task_t,
        new_limit: ::std::os::raw::c_int,
        old_limit: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend2(
        target_task: task_read_t,
        suspend_token: *mut task_suspension_token_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_purgable_info(
        task: task_inspect_t,
        stats: *mut task_purgable_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_mach_voucher(
        task: task_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_mach_voucher(
        task: task_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_generate_corpse(
        task: task_read_t,
        corpse_task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut vm_address_t,
        kcd_size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_unregister_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_dyld_image_infos(
        task: task_read_t,
        dyld_images: *mut dyld_kernel_image_info_array_t,
        dyld_imagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_shared_cache_image_info(
        task: task_t,
        dyld_cache_image: dyld_kernel_image_info_t,
        no_cache: boolean_t,
        private_cache: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_get_process_state(
        task: task_t,
        dyld_process_state: *mut dyld_kernel_process_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info_64(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_inspect(
        task: task_inspect_t,
        flavor: task_inspect_flavor_t,
        info_out: task_inspect_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exc_guard_behavior(
        task: task_inspect_t,
        behavior: *mut task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exc_guard_behavior(
        task: task_t,
        behavior: task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_register(
        target_task: task_read_t,
        notify: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_create_identity_token(task: task_t, token: *mut task_id_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_identity_token_get_task_port(
        token: task_id_token_t,
        flavor: task_flavor_t,
        task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_deregister(
        target_task: task_read_t,
        notify: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_sync_upcall(task: task_t, port: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_set_corpse_forking_behavior(
        task: task_t,
        behavior: task_corpse_forking_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_async_upcall_propagation(
        task: task_t,
        port: mach_port_t,
        qos: ::std::os::raw::c_int,
        iotier: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_kcdata_object_64(
        task: task_t,
        kcdata_object: kcdata_object_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_hardened_exception_handler(
        task: task_t,
        signed_pc_key: u32,
        exceptions_allowed: exception_mask_t,
        behaviors_allowed: exception_behavior_t,
        flavors_allowed: thread_state_flavor_t,
        new_exception_port: mach_port_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_create_t"]
        [::std::mem::size_of::<__Request__task_create_t>() - 60usize];
    ["Alignment of __Request__task_create_t"]
        [::std::mem::align_of::<__Request__task_create_t>() - 4usize];
    ["Offset of field: __Request__task_create_t::Head"]
        [::std::mem::offset_of!(__Request__task_create_t, Head) - 0usize];
    ["Offset of field: __Request__task_create_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_create_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_create_t::ledgers"]
        [::std::mem::offset_of!(__Request__task_create_t, ledgers) - 28usize];
    ["Offset of field: __Request__task_create_t::NDR"]
        [::std::mem::offset_of!(__Request__task_create_t, NDR) - 44usize];
    ["Offset of field: __Request__task_create_t::ledgersCnt"]
        [::std::mem::offset_of!(__Request__task_create_t, ledgersCnt) - 52usize];
    ["Offset of field: __Request__task_create_t::inherit_memory"]
        [::std::mem::offset_of!(__Request__task_create_t, inherit_memory) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_terminate_t"]
        [::std::mem::size_of::<__Request__task_terminate_t>() - 24usize];
    ["Alignment of __Request__task_terminate_t"]
        [::std::mem::align_of::<__Request__task_terminate_t>() - 4usize];
    ["Offset of field: __Request__task_terminate_t::Head"]
        [::std::mem::offset_of!(__Request__task_terminate_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_threads_t"]
        [::std::mem::size_of::<__Request__task_threads_t>() - 24usize];
    ["Alignment of __Request__task_threads_t"]
        [::std::mem::align_of::<__Request__task_threads_t>() - 4usize];
    ["Offset of field: __Request__task_threads_t::Head"]
        [::std::mem::offset_of!(__Request__task_threads_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_ports_register_t"]
        [::std::mem::size_of::<__Request__mach_ports_register_t>() - 56usize];
    ["Alignment of __Request__mach_ports_register_t"]
        [::std::mem::align_of::<__Request__mach_ports_register_t>() - 4usize];
    ["Offset of field: __Request__mach_ports_register_t::Head"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, Head) - 0usize];
    ["Offset of field: __Request__mach_ports_register_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_ports_register_t::init_port_set"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, init_port_set) - 28usize];
    ["Offset of field: __Request__mach_ports_register_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, NDR) - 44usize];
    ["Offset of field: __Request__mach_ports_register_t::init_port_setCnt"]
        [::std::mem::offset_of!(__Request__mach_ports_register_t, init_port_setCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_ports_lookup_t"]
        [::std::mem::size_of::<__Request__mach_ports_lookup_t>() - 24usize];
    ["Alignment of __Request__mach_ports_lookup_t"]
        [::std::mem::align_of::<__Request__mach_ports_lookup_t>() - 4usize];
    ["Offset of field: __Request__mach_ports_lookup_t::Head"]
        [::std::mem::offset_of!(__Request__mach_ports_lookup_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_info_t"][::std::mem::size_of::<__Request__task_info_t>() - 40usize];
    ["Alignment of __Request__task_info_t"]
        [::std::mem::align_of::<__Request__task_info_t>() - 4usize];
    ["Offset of field: __Request__task_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_info_t::NDR"]
        [::std::mem::offset_of!(__Request__task_info_t, NDR) - 24usize];
    ["Offset of field: __Request__task_info_t::flavor"]
        [::std::mem::offset_of!(__Request__task_info_t, flavor) - 32usize];
    ["Offset of field: __Request__task_info_t::task_info_outCnt"]
        [::std::mem::offset_of!(__Request__task_info_t, task_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 94usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_info_t"]
        [::std::mem::size_of::<__Request__task_set_info_t>() - 416usize];
    ["Alignment of __Request__task_set_info_t"]
        [::std::mem::align_of::<__Request__task_set_info_t>() - 4usize];
    ["Offset of field: __Request__task_set_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_info_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_info_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_info_t::flavor"]
        [::std::mem::offset_of!(__Request__task_set_info_t, flavor) - 32usize];
    ["Offset of field: __Request__task_set_info_t::task_info_inCnt"]
        [::std::mem::offset_of!(__Request__task_set_info_t, task_info_inCnt) - 36usize];
    ["Offset of field: __Request__task_set_info_t::task_info_in"]
        [::std::mem::offset_of!(__Request__task_set_info_t, task_info_in) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_suspend_t"]
        [::std::mem::size_of::<__Request__task_suspend_t>() - 24usize];
    ["Alignment of __Request__task_suspend_t"]
        [::std::mem::align_of::<__Request__task_suspend_t>() - 4usize];
    ["Offset of field: __Request__task_suspend_t::Head"]
        [::std::mem::offset_of!(__Request__task_suspend_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_resume_t"]
        [::std::mem::size_of::<__Request__task_resume_t>() - 24usize];
    ["Alignment of __Request__task_resume_t"]
        [::std::mem::align_of::<__Request__task_resume_t>() - 4usize];
    ["Offset of field: __Request__task_resume_t::Head"]
        [::std::mem::offset_of!(__Request__task_resume_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_special_port_t"]
        [::std::mem::size_of::<__Request__task_get_special_port_t>() - 36usize];
    ["Alignment of __Request__task_get_special_port_t"]
        [::std::mem::align_of::<__Request__task_get_special_port_t>() - 4usize];
    ["Offset of field: __Request__task_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_special_port_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__task_get_special_port_t, which_port) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_special_port_t"]
        [::std::mem::size_of::<__Request__task_set_special_port_t>() - 52usize];
    ["Alignment of __Request__task_set_special_port_t"]
        [::std::mem::align_of::<__Request__task_set_special_port_t>() - 4usize];
    ["Offset of field: __Request__task_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_special_port_t::special_port"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, special_port) - 28usize];
    ["Offset of field: __Request__task_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, NDR) - 40usize];
    ["Offset of field: __Request__task_set_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__task_set_special_port_t, which_port) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_create_t"]
        [::std::mem::size_of::<__Request__thread_create_t>() - 24usize];
    ["Alignment of __Request__thread_create_t"]
        [::std::mem::align_of::<__Request__thread_create_t>() - 4usize];
    ["Offset of field: __Request__thread_create_t::Head"]
        [::std::mem::offset_of!(__Request__thread_create_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_create_running_t"]
        [::std::mem::size_of::<__Request__thread_create_running_t>() - 5224usize];
    ["Alignment of __Request__thread_create_running_t"]
        [::std::mem::align_of::<__Request__thread_create_running_t>() - 4usize];
    ["Offset of field: __Request__thread_create_running_t::Head"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, Head) - 0usize];
    ["Offset of field: __Request__thread_create_running_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_create_running_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_create_running_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__thread_create_running_t::new_state"]
        [::std::mem::offset_of!(__Request__thread_create_running_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_exception_ports_t"]
        [::std::mem::size_of::<__Request__task_set_exception_ports_t>() - 60usize];
    ["Alignment of __Request__task_set_exception_ports_t"]
        [::std::mem::align_of::<__Request__task_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__task_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__task_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__task_set_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__task_set_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__task_set_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__task_set_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_exception_ports_t"]
        [::std::mem::size_of::<__Request__task_get_exception_ports_t>() - 36usize];
    ["Alignment of __Request__task_get_exception_ports_t"]
        [::std::mem::align_of::<__Request__task_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__task_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_t, exception_mask) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_swap_exception_ports_t"]
        [::std::mem::size_of::<__Request__task_swap_exception_ports_t>() - 60usize];
    ["Alignment of __Request__task_swap_exception_ports_t"]
        [::std::mem::align_of::<__Request__task_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__task_swap_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__task_swap_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__lock_set_create_t"]
        [::std::mem::size_of::<__Request__lock_set_create_t>() - 40usize];
    ["Alignment of __Request__lock_set_create_t"]
        [::std::mem::align_of::<__Request__lock_set_create_t>() - 4usize];
    ["Offset of field: __Request__lock_set_create_t::Head"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, Head) - 0usize];
    ["Offset of field: __Request__lock_set_create_t::NDR"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, NDR) - 24usize];
    ["Offset of field: __Request__lock_set_create_t::n_ulocks"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, n_ulocks) - 32usize];
    ["Offset of field: __Request__lock_set_create_t::policy"]
        [::std::mem::offset_of!(__Request__lock_set_create_t, policy) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__lock_set_destroy_t"]
        [::std::mem::size_of::<__Request__lock_set_destroy_t>() - 40usize];
    ["Alignment of __Request__lock_set_destroy_t"]
        [::std::mem::align_of::<__Request__lock_set_destroy_t>() - 4usize];
    ["Offset of field: __Request__lock_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__lock_set_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__lock_set_destroy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__lock_set_destroy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__lock_set_destroy_t::lock_set"]
        [::std::mem::offset_of!(__Request__lock_set_destroy_t, lock_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__semaphore_create_t"]
        [::std::mem::size_of::<__Request__semaphore_create_t>() - 40usize];
    ["Alignment of __Request__semaphore_create_t"]
        [::std::mem::align_of::<__Request__semaphore_create_t>() - 4usize];
    ["Offset of field: __Request__semaphore_create_t::Head"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, Head) - 0usize];
    ["Offset of field: __Request__semaphore_create_t::NDR"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, NDR) - 24usize];
    ["Offset of field: __Request__semaphore_create_t::policy"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, policy) - 32usize];
    ["Offset of field: __Request__semaphore_create_t::value"]
        [::std::mem::offset_of!(__Request__semaphore_create_t, value) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__semaphore_destroy_t"]
        [::std::mem::size_of::<__Request__semaphore_destroy_t>() - 40usize];
    ["Alignment of __Request__semaphore_destroy_t"]
        [::std::mem::align_of::<__Request__semaphore_destroy_t>() - 4usize];
    ["Offset of field: __Request__semaphore_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__semaphore_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__semaphore_destroy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__semaphore_destroy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__semaphore_destroy_t::semaphore"]
        [::std::mem::offset_of!(__Request__semaphore_destroy_t, semaphore) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_policy_set_t"]
        [::std::mem::size_of::<__Request__task_policy_set_t>() - 104usize];
    ["Alignment of __Request__task_policy_set_t"]
        [::std::mem::align_of::<__Request__task_policy_set_t>() - 4usize];
    ["Offset of field: __Request__task_policy_set_t::Head"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, Head) - 0usize];
    ["Offset of field: __Request__task_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Request__task_policy_set_t::flavor"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, flavor) - 32usize];
    ["Offset of field: __Request__task_policy_set_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__task_policy_set_t::policy_info"]
        [::std::mem::offset_of!(__Request__task_policy_set_t, policy_info) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_policy_get_t"]
        [::std::mem::size_of::<__Request__task_policy_get_t>() - 44usize];
    ["Alignment of __Request__task_policy_get_t"]
        [::std::mem::align_of::<__Request__task_policy_get_t>() - 4usize];
    ["Offset of field: __Request__task_policy_get_t::Head"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, Head) - 0usize];
    ["Offset of field: __Request__task_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Request__task_policy_get_t::flavor"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, flavor) - 32usize];
    ["Offset of field: __Request__task_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__task_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Request__task_policy_get_t, get_default) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_sample_t"]
        [::std::mem::size_of::<__Request__task_sample_t>() - 40usize];
    ["Alignment of __Request__task_sample_t"]
        [::std::mem::align_of::<__Request__task_sample_t>() - 4usize];
    ["Offset of field: __Request__task_sample_t::Head"]
        [::std::mem::offset_of!(__Request__task_sample_t, Head) - 0usize];
    ["Offset of field: __Request__task_sample_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_sample_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_sample_t::reply"]
        [::std::mem::offset_of!(__Request__task_sample_t, reply) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_policy_t"]
        [::std::mem::size_of::<__Request__task_policy_t>() - 68usize];
    ["Alignment of __Request__task_policy_t"]
        [::std::mem::align_of::<__Request__task_policy_t>() - 4usize];
    ["Offset of field: __Request__task_policy_t::Head"]
        [::std::mem::offset_of!(__Request__task_policy_t, Head) - 0usize];
    ["Offset of field: __Request__task_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__task_policy_t, NDR) - 24usize];
    ["Offset of field: __Request__task_policy_t::policy"]
        [::std::mem::offset_of!(__Request__task_policy_t, policy) - 32usize];
    ["Offset of field: __Request__task_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__task_policy_t, baseCnt) - 36usize];
    ["Offset of field: __Request__task_policy_t::base"]
        [::std::mem::offset_of!(__Request__task_policy_t, base) - 40usize];
    ["Offset of field: __Request__task_policy_t::set_limit"]
        [::std::mem::offset_of!(__Request__task_policy_t, set_limit) - 60usize];
    ["Offset of field: __Request__task_policy_t::change"]
        [::std::mem::offset_of!(__Request__task_policy_t, change) - 64usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_emulation_t"]
        [::std::mem::size_of::<__Request__task_set_emulation_t>() - 44usize];
    ["Alignment of __Request__task_set_emulation_t"]
        [::std::mem::align_of::<__Request__task_set_emulation_t>() - 4usize];
    ["Offset of field: __Request__task_set_emulation_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_emulation_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_emulation_t::routine_entry_pt"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, routine_entry_pt) - 32usize];
    ["Offset of field: __Request__task_set_emulation_t::routine_number"]
        [::std::mem::offset_of!(__Request__task_set_emulation_t, routine_number) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_emulation_vector_t"]
        [::std::mem::size_of::<__Request__task_get_emulation_vector_t>() - 24usize];
    ["Alignment of __Request__task_get_emulation_vector_t"]
        [::std::mem::align_of::<__Request__task_get_emulation_vector_t>() - 4usize];
    ["Offset of field: __Request__task_get_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_emulation_vector_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_emulation_vector_t"]
        [::std::mem::size_of::<__Request__task_set_emulation_vector_t>() - 60usize];
    ["Alignment of __Request__task_set_emulation_vector_t"]
        [::std::mem::align_of::<__Request__task_set_emulation_vector_t>() - 4usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::emulation_vector"][::std::mem::offset_of!(
        __Request__task_set_emulation_vector_t,
        emulation_vector
    ) - 28usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, NDR) - 44usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::vector_start"]
        [::std::mem::offset_of!(__Request__task_set_emulation_vector_t, vector_start) - 52usize];
    ["Offset of field: __Request__task_set_emulation_vector_t::emulation_vectorCnt"][::std::mem::offset_of!(
        __Request__task_set_emulation_vector_t,
        emulation_vectorCnt
    ) - 56usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_ras_pc_t"]
        [::std::mem::size_of::<__Request__task_set_ras_pc_t>() - 48usize];
    ["Alignment of __Request__task_set_ras_pc_t"]
        [::std::mem::align_of::<__Request__task_set_ras_pc_t>() - 4usize];
    ["Offset of field: __Request__task_set_ras_pc_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_ras_pc_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_ras_pc_t::basepc"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, basepc) - 32usize];
    ["Offset of field: __Request__task_set_ras_pc_t::boundspc"]
        [::std::mem::offset_of!(__Request__task_set_ras_pc_t, boundspc) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_zone_info_t"]
        [::std::mem::size_of::<__Request__task_zone_info_t>() - 24usize];
    ["Alignment of __Request__task_zone_info_t"]
        [::std::mem::align_of::<__Request__task_zone_info_t>() - 4usize];
    ["Offset of field: __Request__task_zone_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_zone_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_assign_t"]
        [::std::mem::size_of::<__Request__task_assign_t>() - 52usize];
    ["Alignment of __Request__task_assign_t"]
        [::std::mem::align_of::<__Request__task_assign_t>() - 4usize];
    ["Offset of field: __Request__task_assign_t::Head"]
        [::std::mem::offset_of!(__Request__task_assign_t, Head) - 0usize];
    ["Offset of field: __Request__task_assign_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_assign_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_assign_t::new_set"]
        [::std::mem::offset_of!(__Request__task_assign_t, new_set) - 28usize];
    ["Offset of field: __Request__task_assign_t::NDR"]
        [::std::mem::offset_of!(__Request__task_assign_t, NDR) - 40usize];
    ["Offset of field: __Request__task_assign_t::assign_threads"]
        [::std::mem::offset_of!(__Request__task_assign_t, assign_threads) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_assign_default_t"]
        [::std::mem::size_of::<__Request__task_assign_default_t>() - 36usize];
    ["Alignment of __Request__task_assign_default_t"]
        [::std::mem::align_of::<__Request__task_assign_default_t>() - 4usize];
    ["Offset of field: __Request__task_assign_default_t::Head"]
        [::std::mem::offset_of!(__Request__task_assign_default_t, Head) - 0usize];
    ["Offset of field: __Request__task_assign_default_t::NDR"]
        [::std::mem::offset_of!(__Request__task_assign_default_t, NDR) - 24usize];
    ["Offset of field: __Request__task_assign_default_t::assign_threads"]
        [::std::mem::offset_of!(__Request__task_assign_default_t, assign_threads) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_assignment_t"]
        [::std::mem::size_of::<__Request__task_get_assignment_t>() - 24usize];
    ["Alignment of __Request__task_get_assignment_t"]
        [::std::mem::align_of::<__Request__task_get_assignment_t>() - 4usize];
    ["Offset of field: __Request__task_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_assignment_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_policy_t"]
        [::std::mem::size_of::<__Request__task_set_policy_t>() - 88usize];
    ["Alignment of __Request__task_set_policy_t"]
        [::std::mem::align_of::<__Request__task_set_policy_t>() - 4usize];
    ["Offset of field: __Request__task_set_policy_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_policy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_policy_t::pset"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, pset) - 28usize];
    ["Offset of field: __Request__task_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, NDR) - 40usize];
    ["Offset of field: __Request__task_set_policy_t::policy"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, policy) - 48usize];
    ["Offset of field: __Request__task_set_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, baseCnt) - 52usize];
    ["Offset of field: __Request__task_set_policy_t::base"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, base) - 56usize];
    ["Offset of field: __Request__task_set_policy_t::limitCnt"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, limitCnt) - 76usize];
    ["Offset of field: __Request__task_set_policy_t::limit"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, limit) - 80usize];
    ["Offset of field: __Request__task_set_policy_t::change"]
        [::std::mem::offset_of!(__Request__task_set_policy_t, change) - 84usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_state_t"]
        [::std::mem::size_of::<__Request__task_get_state_t>() - 40usize];
    ["Alignment of __Request__task_get_state_t"]
        [::std::mem::align_of::<__Request__task_get_state_t>() - 4usize];
    ["Offset of field: __Request__task_get_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_state_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_state_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_state_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_state_t::flavor"]
        [::std::mem::offset_of!(__Request__task_get_state_t, flavor) - 32usize];
    ["Offset of field: __Request__task_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Request__task_get_state_t, old_stateCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_state_t"]
        [::std::mem::size_of::<__Request__task_set_state_t>() - 5224usize];
    ["Alignment of __Request__task_set_state_t"]
        [::std::mem::align_of::<__Request__task_set_state_t>() - 4usize];
    ["Offset of field: __Request__task_set_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_state_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_state_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_state_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_state_t::flavor"]
        [::std::mem::offset_of!(__Request__task_set_state_t, flavor) - 32usize];
    ["Offset of field: __Request__task_set_state_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__task_set_state_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__task_set_state_t::new_state"]
        [::std::mem::offset_of!(__Request__task_set_state_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_phys_footprint_limit_t"]
        [::std::mem::size_of::<__Request__task_set_phys_footprint_limit_t>() - 36usize];
    ["Alignment of __Request__task_set_phys_footprint_limit_t"]
        [::std::mem::align_of::<__Request__task_set_phys_footprint_limit_t>() - 4usize];
    ["Offset of field: __Request__task_set_phys_footprint_limit_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_phys_footprint_limit_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_phys_footprint_limit_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_phys_footprint_limit_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_phys_footprint_limit_t::new_limit"]
        [::std::mem::offset_of!(__Request__task_set_phys_footprint_limit_t, new_limit) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_suspend2_t"]
        [::std::mem::size_of::<__Request__task_suspend2_t>() - 24usize];
    ["Alignment of __Request__task_suspend2_t"]
        [::std::mem::align_of::<__Request__task_suspend2_t>() - 4usize];
    ["Offset of field: __Request__task_suspend2_t::Head"]
        [::std::mem::offset_of!(__Request__task_suspend2_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_resume2_t"]
        [::std::mem::size_of::<__Request__task_resume2_t>() - 24usize];
    ["Alignment of __Request__task_resume2_t"]
        [::std::mem::align_of::<__Request__task_resume2_t>() - 4usize];
    ["Offset of field: __Request__task_resume2_t::Head"]
        [::std::mem::offset_of!(__Request__task_resume2_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_purgable_info_t"]
        [::std::mem::size_of::<__Request__task_purgable_info_t>() - 24usize];
    ["Alignment of __Request__task_purgable_info_t"]
        [::std::mem::align_of::<__Request__task_purgable_info_t>() - 4usize];
    ["Offset of field: __Request__task_purgable_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_purgable_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_mach_voucher_t"]
        [::std::mem::size_of::<__Request__task_get_mach_voucher_t>() - 36usize];
    ["Alignment of __Request__task_get_mach_voucher_t"]
        [::std::mem::align_of::<__Request__task_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__task_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_mach_voucher_t::which"]
        [::std::mem::offset_of!(__Request__task_get_mach_voucher_t, which) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_mach_voucher_t"]
        [::std::mem::size_of::<__Request__task_set_mach_voucher_t>() - 40usize];
    ["Alignment of __Request__task_set_mach_voucher_t"]
        [::std::mem::align_of::<__Request__task_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__task_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_set_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_set_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Request__task_set_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Request__task_swap_mach_voucher_t>() - 52usize];
    ["Alignment of __Request__task_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Request__task_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::new_voucher"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, new_voucher) - 28usize];
    ["Offset of field: __Request__task_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Request__task_swap_mach_voucher_t, old_voucher) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_generate_corpse_t"]
        [::std::mem::size_of::<__Request__task_generate_corpse_t>() - 24usize];
    ["Alignment of __Request__task_generate_corpse_t"]
        [::std::mem::align_of::<__Request__task_generate_corpse_t>() - 4usize];
    ["Offset of field: __Request__task_generate_corpse_t::Head"]
        [::std::mem::offset_of!(__Request__task_generate_corpse_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_map_corpse_info_t"]
        [::std::mem::size_of::<__Request__task_map_corpse_info_t>() - 40usize];
    ["Alignment of __Request__task_map_corpse_info_t"]
        [::std::mem::align_of::<__Request__task_map_corpse_info_t>() - 4usize];
    ["Offset of field: __Request__task_map_corpse_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_map_corpse_info_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_map_corpse_info_t::corspe_task"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_t, corspe_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_image_infos_t"]
        [::std::mem::size_of::<__Request__task_register_dyld_image_infos_t>() - 56usize];
    ["Alignment of __Request__task_register_dyld_image_infos_t"]
        [::std::mem::align_of::<__Request__task_register_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Request__task_register_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_register_dyld_image_infos_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::dyld_images"][::std::mem::offset_of!(
        __Request__task_register_dyld_image_infos_t,
        dyld_images
    ) - 28usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Request__task_register_dyld_image_infos_t, NDR) - 44usize];
    ["Offset of field: __Request__task_register_dyld_image_infos_t::dyld_imagesCnt"][::std::mem::offset_of!(
        __Request__task_register_dyld_image_infos_t,
        dyld_imagesCnt
    ) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_unregister_dyld_image_infos_t"]
        [::std::mem::size_of::<__Request__task_unregister_dyld_image_infos_t>() - 56usize];
    ["Alignment of __Request__task_unregister_dyld_image_infos_t"]
        [::std::mem::align_of::<__Request__task_unregister_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Request__task_unregister_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_unregister_dyld_image_infos_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::dyld_images"][::std::mem::offset_of!(
        __Request__task_unregister_dyld_image_infos_t,
        dyld_images
    ) - 28usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Request__task_unregister_dyld_image_infos_t, NDR) - 44usize];
    ["Offset of field: __Request__task_unregister_dyld_image_infos_t::dyld_imagesCnt"][::std::mem::offset_of!(
        __Request__task_unregister_dyld_image_infos_t,
        dyld_imagesCnt
    ) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_dyld_image_infos_t"]
        [::std::mem::size_of::<__Request__task_get_dyld_image_infos_t>() - 24usize];
    ["Alignment of __Request__task_get_dyld_image_infos_t"]
        [::std::mem::align_of::<__Request__task_get_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Request__task_get_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_dyld_image_infos_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_cache_image: dyld_kernel_image_info_t,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_shared_cache_image_info_t"][::std::mem::size_of::<
        __Request__task_register_dyld_shared_cache_image_info_t,
    >() - 80usize];
    ["Alignment of __Request__task_register_dyld_shared_cache_image_info_t"][::std::mem::align_of::<
        __Request__task_register_dyld_shared_cache_image_info_t,
    >() - 4usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::Head"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::NDR"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::dyld_cache_image"] [:: std :: mem :: offset_of ! (__Request__task_register_dyld_shared_cache_image_info_t , dyld_cache_image) - 32usize] ;
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::no_cache"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        no_cache
    )
        - 72usize];
    ["Offset of field: __Request__task_register_dyld_shared_cache_image_info_t::private_cache"][::std::mem::offset_of!(
        __Request__task_register_dyld_shared_cache_image_info_t,
        private_cache
    )
        - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_state: u8,
    pub dyld_statePad: [::std::os::raw::c_char; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_set_dyld_state_t"]
        [::std::mem::size_of::<__Request__task_register_dyld_set_dyld_state_t>() - 36usize];
    ["Alignment of __Request__task_register_dyld_set_dyld_state_t"]
        [::std::mem::align_of::<__Request__task_register_dyld_set_dyld_state_t>() - 4usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_register_dyld_set_dyld_state_t, Head) - 0usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::NDR"]
        [::std::mem::offset_of!(__Request__task_register_dyld_set_dyld_state_t, NDR) - 24usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::dyld_state"][::std::mem::offset_of!(
        __Request__task_register_dyld_set_dyld_state_t,
        dyld_state
    ) - 32usize];
    ["Offset of field: __Request__task_register_dyld_set_dyld_state_t::dyld_statePad"][::std::mem::offset_of!(
        __Request__task_register_dyld_set_dyld_state_t,
        dyld_statePad
    ) - 33usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_dyld_get_process_state_t"]
        [::std::mem::size_of::<__Request__task_register_dyld_get_process_state_t>() - 24usize];
    ["Alignment of __Request__task_register_dyld_get_process_state_t"]
        [::std::mem::align_of::<__Request__task_register_dyld_get_process_state_t>() - 4usize];
    ["Offset of field: __Request__task_register_dyld_get_process_state_t::Head"]
        [::std::mem::offset_of!(__Request__task_register_dyld_get_process_state_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_map_corpse_info_64_t"]
        [::std::mem::size_of::<__Request__task_map_corpse_info_64_t>() - 40usize];
    ["Alignment of __Request__task_map_corpse_info_64_t"]
        [::std::mem::align_of::<__Request__task_map_corpse_info_64_t>() - 4usize];
    ["Offset of field: __Request__task_map_corpse_info_64_t::Head"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_64_t, Head) - 0usize];
    ["Offset of field: __Request__task_map_corpse_info_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_map_corpse_info_64_t::corspe_task"]
        [::std::mem::offset_of!(__Request__task_map_corpse_info_64_t, corspe_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_inspect_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_inspect_t"]
        [::std::mem::size_of::<__Request__task_inspect_t>() - 40usize];
    ["Alignment of __Request__task_inspect_t"]
        [::std::mem::align_of::<__Request__task_inspect_t>() - 4usize];
    ["Offset of field: __Request__task_inspect_t::Head"]
        [::std::mem::offset_of!(__Request__task_inspect_t, Head) - 0usize];
    ["Offset of field: __Request__task_inspect_t::NDR"]
        [::std::mem::offset_of!(__Request__task_inspect_t, NDR) - 24usize];
    ["Offset of field: __Request__task_inspect_t::flavor"]
        [::std::mem::offset_of!(__Request__task_inspect_t, flavor) - 32usize];
    ["Offset of field: __Request__task_inspect_t::info_outCnt"]
        [::std::mem::offset_of!(__Request__task_inspect_t, info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Request__task_get_exc_guard_behavior_t>() - 24usize];
    ["Alignment of __Request__task_get_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Request__task_get_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Request__task_get_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_exc_guard_behavior_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Request__task_set_exc_guard_behavior_t>() - 36usize];
    ["Alignment of __Request__task_set_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Request__task_set_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Request__task_set_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_exc_guard_behavior_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_exc_guard_behavior_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_exc_guard_behavior_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_exc_guard_behavior_t::behavior"]
        [::std::mem::offset_of!(__Request__task_set_exc_guard_behavior_t, behavior) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_dyld_process_info_notify_register_t"]
        [::std::mem::size_of::<__Request__task_dyld_process_info_notify_register_t>() - 40usize];
    ["Alignment of __Request__task_dyld_process_info_notify_register_t"]
        [::std::mem::align_of::<__Request__task_dyld_process_info_notify_register_t>() - 4usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_register_t::Head"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_register_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_register_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_register_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_register_t::notify"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_register_t,
        notify
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_create_identity_token_t"]
        [::std::mem::size_of::<__Request__task_create_identity_token_t>() - 24usize];
    ["Alignment of __Request__task_create_identity_token_t"]
        [::std::mem::align_of::<__Request__task_create_identity_token_t>() - 4usize];
    ["Offset of field: __Request__task_create_identity_token_t::Head"]
        [::std::mem::offset_of!(__Request__task_create_identity_token_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_identity_token_get_task_port_t"]
        [::std::mem::size_of::<__Request__task_identity_token_get_task_port_t>() - 36usize];
    ["Alignment of __Request__task_identity_token_get_task_port_t"]
        [::std::mem::align_of::<__Request__task_identity_token_get_task_port_t>() - 4usize];
    ["Offset of field: __Request__task_identity_token_get_task_port_t::Head"]
        [::std::mem::offset_of!(__Request__task_identity_token_get_task_port_t, Head) - 0usize];
    ["Offset of field: __Request__task_identity_token_get_task_port_t::NDR"]
        [::std::mem::offset_of!(__Request__task_identity_token_get_task_port_t, NDR) - 24usize];
    ["Offset of field: __Request__task_identity_token_get_task_port_t::flavor"]
        [::std::mem::offset_of!(__Request__task_identity_token_get_task_port_t, flavor) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub notify: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::size_of::<__Request__task_dyld_process_info_notify_deregister_t>() - 36usize];
    ["Alignment of __Request__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::align_of::<__Request__task_dyld_process_info_notify_deregister_t>() - 4usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_deregister_t::Head"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_deregister_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_deregister_t::NDR"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_deregister_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Request__task_dyld_process_info_notify_deregister_t::notify"][::std::mem::offset_of!(
        __Request__task_dyld_process_info_notify_deregister_t,
        notify
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Request__task_get_exception_ports_info_t>() - 36usize];
    ["Alignment of __Request__task_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Request__task_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Request__task_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Request__task_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Request__task_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Request__task_get_exception_ports_info_t::exception_mask"][::std::mem::offset_of!(
        __Request__task_get_exception_ports_info_t,
        exception_mask
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_test_sync_upcall_t"]
        [::std::mem::size_of::<__Request__task_test_sync_upcall_t>() - 40usize];
    ["Alignment of __Request__task_test_sync_upcall_t"]
        [::std::mem::align_of::<__Request__task_test_sync_upcall_t>() - 4usize];
    ["Offset of field: __Request__task_test_sync_upcall_t::Head"]
        [::std::mem::offset_of!(__Request__task_test_sync_upcall_t, Head) - 0usize];
    ["Offset of field: __Request__task_test_sync_upcall_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_test_sync_upcall_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_test_sync_upcall_t::port"]
        [::std::mem::offset_of!(__Request__task_test_sync_upcall_t, port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_corpse_forking_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_corpse_forking_behavior_t"]
        [::std::mem::size_of::<__Request__task_set_corpse_forking_behavior_t>() - 36usize];
    ["Alignment of __Request__task_set_corpse_forking_behavior_t"]
        [::std::mem::align_of::<__Request__task_set_corpse_forking_behavior_t>() - 4usize];
    ["Offset of field: __Request__task_set_corpse_forking_behavior_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_corpse_forking_behavior_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_corpse_forking_behavior_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_corpse_forking_behavior_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_corpse_forking_behavior_t::behavior"]
        [::std::mem::offset_of!(__Request__task_set_corpse_forking_behavior_t, behavior) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub qos: ::std::os::raw::c_int,
    pub iotier: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_test_async_upcall_propagation_t"]
        [::std::mem::size_of::<__Request__task_test_async_upcall_propagation_t>() - 56usize];
    ["Alignment of __Request__task_test_async_upcall_propagation_t"]
        [::std::mem::align_of::<__Request__task_test_async_upcall_propagation_t>() - 4usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::Head"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, Head) - 0usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_test_async_upcall_propagation_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::port"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, port) - 28usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::NDR"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, NDR) - 40usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::qos"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, qos) - 48usize];
    ["Offset of field: __Request__task_test_async_upcall_propagation_t::iotier"]
        [::std::mem::offset_of!(__Request__task_test_async_upcall_propagation_t, iotier) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub kcdata_object: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_map_kcdata_object_64_t"]
        [::std::mem::size_of::<__Request__task_map_kcdata_object_64_t>() - 40usize];
    ["Alignment of __Request__task_map_kcdata_object_64_t"]
        [::std::mem::align_of::<__Request__task_map_kcdata_object_64_t>() - 4usize];
    ["Offset of field: __Request__task_map_kcdata_object_64_t::Head"]
        [::std::mem::offset_of!(__Request__task_map_kcdata_object_64_t, Head) - 0usize];
    ["Offset of field: __Request__task_map_kcdata_object_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__task_map_kcdata_object_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__task_map_kcdata_object_64_t::kcdata_object"]
        [::std::mem::offset_of!(__Request__task_map_kcdata_object_64_t, kcdata_object) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_hardened_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_exception_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub signed_pc_key: u32,
    pub exceptions_allowed: exception_mask_t,
    pub behaviors_allowed: exception_behavior_t,
    pub flavors_allowed: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_register_hardened_exception_handler_t"]
        [::std::mem::size_of::<__Request__task_register_hardened_exception_handler_t>() - 64usize];
    ["Alignment of __Request__task_register_hardened_exception_handler_t"]
        [::std::mem::align_of::<__Request__task_register_hardened_exception_handler_t>() - 4usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::Head"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::msgh_body"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::new_exception_port"] [:: std :: mem :: offset_of ! (__Request__task_register_hardened_exception_handler_t , new_exception_port) - 28usize] ;
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::NDR"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        NDR
    ) - 40usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::signed_pc_key"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        signed_pc_key
    )
        - 48usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::exceptions_allowed"] [:: std :: mem :: offset_of ! (__Request__task_register_hardened_exception_handler_t , exceptions_allowed) - 52usize] ;
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::behaviors_allowed"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        behaviors_allowed
    )
        - 56usize];
    ["Offset of field: __Request__task_register_hardened_exception_handler_t::flavors_allowed"][::std::mem::offset_of!(
        __Request__task_register_hardened_exception_handler_t,
        flavors_allowed
    )
        - 60usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    pub Request_task_generate_corpse: __Request__task_generate_corpse_t,
    pub Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    pub Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    pub Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    pub Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    pub Request_task_register_dyld_shared_cache_image_info:
        __Request__task_register_dyld_shared_cache_image_info_t,
    pub Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    pub Request_task_register_dyld_get_process_state:
        __Request__task_register_dyld_get_process_state_t,
    pub Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    pub Request_task_inspect: __Request__task_inspect_t,
    pub Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    pub Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    pub Request_task_dyld_process_info_notify_register:
        __Request__task_dyld_process_info_notify_register_t,
    pub Request_task_create_identity_token: __Request__task_create_identity_token_t,
    pub Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t,
    pub Request_task_dyld_process_info_notify_deregister:
        __Request__task_dyld_process_info_notify_deregister_t,
    pub Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t,
    pub Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t,
    pub Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t,
    pub Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t,
    pub Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t,
    pub Request_task_register_hardened_exception_handler:
        __Request__task_register_hardened_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__task_subsystem"]
        [::std::mem::size_of::<__RequestUnion__task_subsystem>() - 5224usize];
    ["Alignment of __RequestUnion__task_subsystem"]
        [::std::mem::align_of::<__RequestUnion__task_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_terminate"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_terminate) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_threads"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_threads) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_mach_ports_register"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_mach_ports_register
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_mach_ports_lookup"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_mach_ports_lookup
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_info"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_info) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_info"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_info) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_suspend"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_suspend) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_resume"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_resume) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_special_port"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_special_port
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_special_port"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_special_port
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_thread_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_thread_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_thread_create_running"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_thread_create_running
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_swap_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_lock_set_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_lock_set_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_lock_set_destroy"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_lock_set_destroy) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_semaphore_create"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_semaphore_create) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_semaphore_destroy"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_semaphore_destroy
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_policy_set"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_policy_set) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_policy_get"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_policy_get) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_sample"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_sample) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_policy"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_policy) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_emulation"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_emulation
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_emulation_vector"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_emulation_vector
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_emulation_vector"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_emulation_vector
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_ras_pc"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_ras_pc) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_zone_info"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_zone_info) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_assign"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_assign) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_assign_default"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_assign_default
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_assignment"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_assignment
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_policy"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_policy) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_state"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_get_state) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_state"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_set_state) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_phys_footprint_limit"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_phys_footprint_limit
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_suspend2"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_suspend2) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_resume2"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_resume2) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_purgable_info"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_purgable_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_mach_voucher
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_mach_voucher
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_swap_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_swap_mach_voucher
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_generate_corpse"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_generate_corpse
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_map_corpse_info"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_map_corpse_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_image_infos"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_register_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_unregister_dyld_image_infos"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_unregister_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_dyld_image_infos"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_shared_cache_image_info"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_dyld_shared_cache_image_info) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_set_dyld_state"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_dyld_set_dyld_state) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_dyld_get_process_state"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_dyld_get_process_state) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_map_corpse_info_64"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_map_corpse_info_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_inspect"]
        [::std::mem::offset_of!(__RequestUnion__task_subsystem, Request_task_inspect) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_exc_guard_behavior"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_exc_guard_behavior"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_dyld_process_info_notify_register"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_dyld_process_info_notify_register) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_create_identity_token"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_create_identity_token
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_identity_token_get_task_port"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_identity_token_get_task_port) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_dyld_process_info_notify_deregister"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_dyld_process_info_notify_deregister) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_get_exception_ports_info"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_get_exception_ports_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_test_sync_upcall"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_test_sync_upcall
    ) - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_set_corpse_forking_behavior"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_set_corpse_forking_behavior
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_test_async_upcall_propagation"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_test_async_upcall_propagation) - 0usize] ;
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_map_kcdata_object_64"][::std::mem::offset_of!(
        __RequestUnion__task_subsystem,
        Request_task_map_kcdata_object_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__task_subsystem::Request_task_register_hardened_exception_handler"] [:: std :: mem :: offset_of ! (__RequestUnion__task_subsystem , Request_task_register_hardened_exception_handler) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_create_t"][::std::mem::size_of::<__Reply__task_create_t>() - 40usize];
    ["Alignment of __Reply__task_create_t"]
        [::std::mem::align_of::<__Reply__task_create_t>() - 4usize];
    ["Offset of field: __Reply__task_create_t::Head"]
        [::std::mem::offset_of!(__Reply__task_create_t, Head) - 0usize];
    ["Offset of field: __Reply__task_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_create_t::child_task"]
        [::std::mem::offset_of!(__Reply__task_create_t, child_task) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_terminate_t"]
        [::std::mem::size_of::<__Reply__task_terminate_t>() - 36usize];
    ["Alignment of __Reply__task_terminate_t"]
        [::std::mem::align_of::<__Reply__task_terminate_t>() - 4usize];
    ["Offset of field: __Reply__task_terminate_t::Head"]
        [::std::mem::offset_of!(__Reply__task_terminate_t, Head) - 0usize];
    ["Offset of field: __Reply__task_terminate_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_terminate_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_terminate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_terminate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_threads_t"][::std::mem::size_of::<__Reply__task_threads_t>() - 56usize];
    ["Alignment of __Reply__task_threads_t"]
        [::std::mem::align_of::<__Reply__task_threads_t>() - 4usize];
    ["Offset of field: __Reply__task_threads_t::Head"]
        [::std::mem::offset_of!(__Reply__task_threads_t, Head) - 0usize];
    ["Offset of field: __Reply__task_threads_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_threads_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_threads_t::act_list"]
        [::std::mem::offset_of!(__Reply__task_threads_t, act_list) - 28usize];
    ["Offset of field: __Reply__task_threads_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_threads_t, NDR) - 44usize];
    ["Offset of field: __Reply__task_threads_t::act_listCnt"]
        [::std::mem::offset_of!(__Reply__task_threads_t, act_listCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_ports_register_t"]
        [::std::mem::size_of::<__Reply__mach_ports_register_t>() - 36usize];
    ["Alignment of __Reply__mach_ports_register_t"]
        [::std::mem::align_of::<__Reply__mach_ports_register_t>() - 4usize];
    ["Offset of field: __Reply__mach_ports_register_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_ports_register_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_ports_register_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_ports_register_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_ports_register_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_ports_register_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_ports_lookup_t"]
        [::std::mem::size_of::<__Reply__mach_ports_lookup_t>() - 56usize];
    ["Alignment of __Reply__mach_ports_lookup_t"]
        [::std::mem::align_of::<__Reply__mach_ports_lookup_t>() - 4usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::init_port_set"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, init_port_set) - 28usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_ports_lookup_t::init_port_setCnt"]
        [::std::mem::offset_of!(__Reply__mach_ports_lookup_t, init_port_setCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 94usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_info_t"][::std::mem::size_of::<__Reply__task_info_t>() - 416usize];
    ["Alignment of __Reply__task_info_t"][::std::mem::align_of::<__Reply__task_info_t>() - 4usize];
    ["Offset of field: __Reply__task_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_info_t::task_info_outCnt"]
        [::std::mem::offset_of!(__Reply__task_info_t, task_info_outCnt) - 36usize];
    ["Offset of field: __Reply__task_info_t::task_info_out"]
        [::std::mem::offset_of!(__Reply__task_info_t, task_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_info_t"]
        [::std::mem::size_of::<__Reply__task_set_info_t>() - 36usize];
    ["Alignment of __Reply__task_set_info_t"]
        [::std::mem::align_of::<__Reply__task_set_info_t>() - 4usize];
    ["Offset of field: __Reply__task_set_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_info_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_suspend_t"][::std::mem::size_of::<__Reply__task_suspend_t>() - 36usize];
    ["Alignment of __Reply__task_suspend_t"]
        [::std::mem::align_of::<__Reply__task_suspend_t>() - 4usize];
    ["Offset of field: __Reply__task_suspend_t::Head"]
        [::std::mem::offset_of!(__Reply__task_suspend_t, Head) - 0usize];
    ["Offset of field: __Reply__task_suspend_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_suspend_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_suspend_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_suspend_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_resume_t"][::std::mem::size_of::<__Reply__task_resume_t>() - 36usize];
    ["Alignment of __Reply__task_resume_t"]
        [::std::mem::align_of::<__Reply__task_resume_t>() - 4usize];
    ["Offset of field: __Reply__task_resume_t::Head"]
        [::std::mem::offset_of!(__Reply__task_resume_t, Head) - 0usize];
    ["Offset of field: __Reply__task_resume_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_resume_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_resume_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_resume_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_special_port_t"]
        [::std::mem::size_of::<__Reply__task_get_special_port_t>() - 40usize];
    ["Alignment of __Reply__task_get_special_port_t"]
        [::std::mem::align_of::<__Reply__task_get_special_port_t>() - 4usize];
    ["Offset of field: __Reply__task_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_special_port_t::special_port"]
        [::std::mem::offset_of!(__Reply__task_get_special_port_t, special_port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_special_port_t"]
        [::std::mem::size_of::<__Reply__task_set_special_port_t>() - 36usize];
    ["Alignment of __Reply__task_set_special_port_t"]
        [::std::mem::align_of::<__Reply__task_set_special_port_t>() - 4usize];
    ["Offset of field: __Reply__task_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_special_port_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_special_port_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_special_port_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_create_t"]
        [::std::mem::size_of::<__Reply__thread_create_t>() - 40usize];
    ["Alignment of __Reply__thread_create_t"]
        [::std::mem::align_of::<__Reply__thread_create_t>() - 4usize];
    ["Offset of field: __Reply__thread_create_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_create_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_create_t::child_act"]
        [::std::mem::offset_of!(__Reply__thread_create_t, child_act) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_create_running_t"]
        [::std::mem::size_of::<__Reply__thread_create_running_t>() - 40usize];
    ["Alignment of __Reply__thread_create_running_t"]
        [::std::mem::align_of::<__Reply__thread_create_running_t>() - 4usize];
    ["Offset of field: __Reply__thread_create_running_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_create_running_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_create_running_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_create_running_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_create_running_t::child_act"]
        [::std::mem::offset_of!(__Reply__thread_create_running_t, child_act) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_exception_ports_t"]
        [::std::mem::size_of::<__Reply__task_set_exception_ports_t>() - 36usize];
    ["Alignment of __Reply__task_set_exception_ports_t"]
        [::std::mem::align_of::<__Reply__task_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__task_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_exception_ports_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_exception_ports_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_exception_ports_t"]
        [::std::mem::size_of::<__Reply__task_get_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__task_get_exception_ports_t"]
        [::std::mem::align_of::<__Reply__task_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__task_get_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_swap_exception_ports_t"]
        [::std::mem::size_of::<__Reply__task_swap_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__task_swap_exception_ports_t"]
        [::std::mem::align_of::<__Reply__task_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__task_swap_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__task_swap_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__lock_set_create_t"]
        [::std::mem::size_of::<__Reply__lock_set_create_t>() - 40usize];
    ["Alignment of __Reply__lock_set_create_t"]
        [::std::mem::align_of::<__Reply__lock_set_create_t>() - 4usize];
    ["Offset of field: __Reply__lock_set_create_t::Head"]
        [::std::mem::offset_of!(__Reply__lock_set_create_t, Head) - 0usize];
    ["Offset of field: __Reply__lock_set_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__lock_set_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__lock_set_create_t::new_lock_set"]
        [::std::mem::offset_of!(__Reply__lock_set_create_t, new_lock_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__lock_set_destroy_t"]
        [::std::mem::size_of::<__Reply__lock_set_destroy_t>() - 36usize];
    ["Alignment of __Reply__lock_set_destroy_t"]
        [::std::mem::align_of::<__Reply__lock_set_destroy_t>() - 4usize];
    ["Offset of field: __Reply__lock_set_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__lock_set_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__lock_set_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__lock_set_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__lock_set_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__lock_set_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__semaphore_create_t"]
        [::std::mem::size_of::<__Reply__semaphore_create_t>() - 40usize];
    ["Alignment of __Reply__semaphore_create_t"]
        [::std::mem::align_of::<__Reply__semaphore_create_t>() - 4usize];
    ["Offset of field: __Reply__semaphore_create_t::Head"]
        [::std::mem::offset_of!(__Reply__semaphore_create_t, Head) - 0usize];
    ["Offset of field: __Reply__semaphore_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__semaphore_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__semaphore_create_t::semaphore"]
        [::std::mem::offset_of!(__Reply__semaphore_create_t, semaphore) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__semaphore_destroy_t"]
        [::std::mem::size_of::<__Reply__semaphore_destroy_t>() - 36usize];
    ["Alignment of __Reply__semaphore_destroy_t"]
        [::std::mem::align_of::<__Reply__semaphore_destroy_t>() - 4usize];
    ["Offset of field: __Reply__semaphore_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__semaphore_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__semaphore_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__semaphore_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__semaphore_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__semaphore_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_policy_set_t"]
        [::std::mem::size_of::<__Reply__task_policy_set_t>() - 36usize];
    ["Alignment of __Reply__task_policy_set_t"]
        [::std::mem::align_of::<__Reply__task_policy_set_t>() - 4usize];
    ["Offset of field: __Reply__task_policy_set_t::Head"]
        [::std::mem::offset_of!(__Reply__task_policy_set_t, Head) - 0usize];
    ["Offset of field: __Reply__task_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_policy_set_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_policy_set_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_policy_get_t"]
        [::std::mem::size_of::<__Reply__task_policy_get_t>() - 108usize];
    ["Alignment of __Reply__task_policy_get_t"]
        [::std::mem::align_of::<__Reply__task_policy_get_t>() - 4usize];
    ["Offset of field: __Reply__task_policy_get_t::Head"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, Head) - 0usize];
    ["Offset of field: __Reply__task_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_policy_get_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Reply__task_policy_get_t::policy_info"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, policy_info) - 40usize];
    ["Offset of field: __Reply__task_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Reply__task_policy_get_t, get_default) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_sample_t"][::std::mem::size_of::<__Reply__task_sample_t>() - 36usize];
    ["Alignment of __Reply__task_sample_t"]
        [::std::mem::align_of::<__Reply__task_sample_t>() - 4usize];
    ["Offset of field: __Reply__task_sample_t::Head"]
        [::std::mem::offset_of!(__Reply__task_sample_t, Head) - 0usize];
    ["Offset of field: __Reply__task_sample_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_sample_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_sample_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_sample_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_policy_t"][::std::mem::size_of::<__Reply__task_policy_t>() - 36usize];
    ["Alignment of __Reply__task_policy_t"]
        [::std::mem::align_of::<__Reply__task_policy_t>() - 4usize];
    ["Offset of field: __Reply__task_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__task_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__task_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_emulation_t"]
        [::std::mem::size_of::<__Reply__task_set_emulation_t>() - 36usize];
    ["Alignment of __Reply__task_set_emulation_t"]
        [::std::mem::align_of::<__Reply__task_set_emulation_t>() - 4usize];
    ["Offset of field: __Reply__task_set_emulation_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_emulation_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_emulation_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_emulation_vector_t"]
        [::std::mem::size_of::<__Reply__task_get_emulation_vector_t>() - 60usize];
    ["Alignment of __Reply__task_get_emulation_vector_t"]
        [::std::mem::align_of::<__Reply__task_get_emulation_vector_t>() - 4usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::emulation_vector"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, emulation_vector) - 28usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, NDR) - 44usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::vector_start"]
        [::std::mem::offset_of!(__Reply__task_get_emulation_vector_t, vector_start) - 52usize];
    ["Offset of field: __Reply__task_get_emulation_vector_t::emulation_vectorCnt"][::std::mem::offset_of!(
        __Reply__task_get_emulation_vector_t,
        emulation_vectorCnt
    ) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_emulation_vector_t"]
        [::std::mem::size_of::<__Reply__task_set_emulation_vector_t>() - 36usize];
    ["Alignment of __Reply__task_set_emulation_vector_t"]
        [::std::mem::align_of::<__Reply__task_set_emulation_vector_t>() - 4usize];
    ["Offset of field: __Reply__task_set_emulation_vector_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_vector_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_emulation_vector_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_vector_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_emulation_vector_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_emulation_vector_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_ras_pc_t"]
        [::std::mem::size_of::<__Reply__task_set_ras_pc_t>() - 36usize];
    ["Alignment of __Reply__task_set_ras_pc_t"]
        [::std::mem::align_of::<__Reply__task_set_ras_pc_t>() - 4usize];
    ["Offset of field: __Reply__task_set_ras_pc_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_ras_pc_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_ras_pc_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_ras_pc_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_ras_pc_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_ras_pc_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_zone_info_t"]
        [::std::mem::size_of::<__Reply__task_zone_info_t>() - 76usize];
    ["Alignment of __Reply__task_zone_info_t"]
        [::std::mem::align_of::<__Reply__task_zone_info_t>() - 4usize];
    ["Offset of field: __Reply__task_zone_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_zone_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_zone_info_t::names"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, names) - 28usize];
    ["Offset of field: __Reply__task_zone_info_t::info"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, info) - 44usize];
    ["Offset of field: __Reply__task_zone_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, NDR) - 60usize];
    ["Offset of field: __Reply__task_zone_info_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, namesCnt) - 68usize];
    ["Offset of field: __Reply__task_zone_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__task_zone_info_t, infoCnt) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_assign_t"][::std::mem::size_of::<__Reply__task_assign_t>() - 36usize];
    ["Alignment of __Reply__task_assign_t"]
        [::std::mem::align_of::<__Reply__task_assign_t>() - 4usize];
    ["Offset of field: __Reply__task_assign_t::Head"]
        [::std::mem::offset_of!(__Reply__task_assign_t, Head) - 0usize];
    ["Offset of field: __Reply__task_assign_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_assign_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_assign_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_assign_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_assign_default_t"]
        [::std::mem::size_of::<__Reply__task_assign_default_t>() - 36usize];
    ["Alignment of __Reply__task_assign_default_t"]
        [::std::mem::align_of::<__Reply__task_assign_default_t>() - 4usize];
    ["Offset of field: __Reply__task_assign_default_t::Head"]
        [::std::mem::offset_of!(__Reply__task_assign_default_t, Head) - 0usize];
    ["Offset of field: __Reply__task_assign_default_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_assign_default_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_assign_default_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_assign_default_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_assignment_t"]
        [::std::mem::size_of::<__Reply__task_get_assignment_t>() - 40usize];
    ["Alignment of __Reply__task_get_assignment_t"]
        [::std::mem::align_of::<__Reply__task_get_assignment_t>() - 4usize];
    ["Offset of field: __Reply__task_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_assignment_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_assignment_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_assignment_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_assignment_t::assigned_set"]
        [::std::mem::offset_of!(__Reply__task_get_assignment_t, assigned_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_policy_t"]
        [::std::mem::size_of::<__Reply__task_set_policy_t>() - 36usize];
    ["Alignment of __Reply__task_set_policy_t"]
        [::std::mem::align_of::<__Reply__task_set_policy_t>() - 4usize];
    ["Offset of field: __Reply__task_set_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_state_t"]
        [::std::mem::size_of::<__Reply__task_get_state_t>() - 5224usize];
    ["Alignment of __Reply__task_get_state_t"]
        [::std::mem::align_of::<__Reply__task_get_state_t>() - 4usize];
    ["Offset of field: __Reply__task_get_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_get_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, old_stateCnt) - 36usize];
    ["Offset of field: __Reply__task_get_state_t::old_state"]
        [::std::mem::offset_of!(__Reply__task_get_state_t, old_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_state_t"]
        [::std::mem::size_of::<__Reply__task_set_state_t>() - 36usize];
    ["Alignment of __Reply__task_set_state_t"]
        [::std::mem::align_of::<__Reply__task_set_state_t>() - 4usize];
    ["Offset of field: __Reply__task_set_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_state_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_phys_footprint_limit_t"]
        [::std::mem::size_of::<__Reply__task_set_phys_footprint_limit_t>() - 40usize];
    ["Alignment of __Reply__task_set_phys_footprint_limit_t"]
        [::std::mem::align_of::<__Reply__task_set_phys_footprint_limit_t>() - 4usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_set_phys_footprint_limit_t::old_limit"]
        [::std::mem::offset_of!(__Reply__task_set_phys_footprint_limit_t, old_limit) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_suspend2_t"]
        [::std::mem::size_of::<__Reply__task_suspend2_t>() - 40usize];
    ["Alignment of __Reply__task_suspend2_t"]
        [::std::mem::align_of::<__Reply__task_suspend2_t>() - 4usize];
    ["Offset of field: __Reply__task_suspend2_t::Head"]
        [::std::mem::offset_of!(__Reply__task_suspend2_t, Head) - 0usize];
    ["Offset of field: __Reply__task_suspend2_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_suspend2_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_suspend2_t::suspend_token"]
        [::std::mem::offset_of!(__Reply__task_suspend2_t, suspend_token) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_resume2_t"][::std::mem::size_of::<__Reply__task_resume2_t>() - 36usize];
    ["Alignment of __Reply__task_resume2_t"]
        [::std::mem::align_of::<__Reply__task_resume2_t>() - 4usize];
    ["Offset of field: __Reply__task_resume2_t::Head"]
        [::std::mem::offset_of!(__Reply__task_resume2_t, Head) - 0usize];
    ["Offset of field: __Reply__task_resume2_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_resume2_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_resume2_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_resume2_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_purgable_info_t"]
        [::std::mem::size_of::<__Reply__task_purgable_info_t>() - 308usize];
    ["Alignment of __Reply__task_purgable_info_t"]
        [::std::mem::align_of::<__Reply__task_purgable_info_t>() - 4usize];
    ["Offset of field: __Reply__task_purgable_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_purgable_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_purgable_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_purgable_info_t::stats"]
        [::std::mem::offset_of!(__Reply__task_purgable_info_t, stats) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__task_get_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__task_get_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__task_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__task_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Reply__task_get_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__task_set_mach_voucher_t>() - 36usize];
    ["Alignment of __Reply__task_set_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__task_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__task_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_mach_voucher_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_mach_voucher_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__task_swap_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__task_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__task_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__task_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__task_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__task_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Reply__task_swap_mach_voucher_t, old_voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corpse_task_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_generate_corpse_t"]
        [::std::mem::size_of::<__Reply__task_generate_corpse_t>() - 40usize];
    ["Alignment of __Reply__task_generate_corpse_t"]
        [::std::mem::align_of::<__Reply__task_generate_corpse_t>() - 4usize];
    ["Offset of field: __Reply__task_generate_corpse_t::Head"]
        [::std::mem::offset_of!(__Reply__task_generate_corpse_t, Head) - 0usize];
    ["Offset of field: __Reply__task_generate_corpse_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_generate_corpse_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_generate_corpse_t::corpse_task_port"]
        [::std::mem::offset_of!(__Reply__task_generate_corpse_t, corpse_task_port) - 28usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: vm_address_t,
    pub kcd_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_map_corpse_info_t"]
        [::std::mem::size_of::<__Reply__task_map_corpse_info_t>() - 48usize];
    ["Alignment of __Reply__task_map_corpse_info_t"]
        [::std::mem::align_of::<__Reply__task_map_corpse_info_t>() - 4usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::kcd_addr_begin"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, kcd_addr_begin) - 36usize];
    ["Offset of field: __Reply__task_map_corpse_info_t::kcd_size"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_t, kcd_size) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_image_infos_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_image_infos_t>() - 36usize];
    ["Alignment of __Reply__task_register_dyld_image_infos_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_image_infos_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_image_infos_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_image_infos_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_unregister_dyld_image_infos_t"]
        [::std::mem::size_of::<__Reply__task_unregister_dyld_image_infos_t>() - 36usize];
    ["Alignment of __Reply__task_unregister_dyld_image_infos_t"]
        [::std::mem::align_of::<__Reply__task_unregister_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Reply__task_unregister_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Reply__task_unregister_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Reply__task_unregister_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_unregister_dyld_image_infos_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_unregister_dyld_image_infos_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_unregister_dyld_image_infos_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_dyld_image_infos_t"]
        [::std::mem::size_of::<__Reply__task_get_dyld_image_infos_t>() - 56usize];
    ["Alignment of __Reply__task_get_dyld_image_infos_t"]
        [::std::mem::align_of::<__Reply__task_get_dyld_image_infos_t>() - 4usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::dyld_images"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, dyld_images) - 28usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, NDR) - 44usize];
    ["Offset of field: __Reply__task_get_dyld_image_infos_t::dyld_imagesCnt"]
        [::std::mem::offset_of!(__Reply__task_get_dyld_image_infos_t, dyld_imagesCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_shared_cache_image_info_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_shared_cache_image_info_t>() - 36usize];
    ["Alignment of __Reply__task_register_dyld_shared_cache_image_info_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_shared_cache_image_info_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_shared_cache_image_info_t::Head"][::std::mem::offset_of!(
        __Reply__task_register_dyld_shared_cache_image_info_t,
        Head
    ) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_shared_cache_image_info_t::NDR"][::std::mem::offset_of!(
        __Reply__task_register_dyld_shared_cache_image_info_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_shared_cache_image_info_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_register_dyld_shared_cache_image_info_t,
        RetCode
    )
        - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_set_dyld_state_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_set_dyld_state_t>() - 36usize];
    ["Alignment of __Reply__task_register_dyld_set_dyld_state_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_set_dyld_state_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_set_dyld_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_set_dyld_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_set_dyld_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_set_dyld_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_set_dyld_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_set_dyld_state_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dyld_process_state: dyld_kernel_process_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_dyld_get_process_state_t"]
        [::std::mem::size_of::<__Reply__task_register_dyld_get_process_state_t>() - 108usize];
    ["Alignment of __Reply__task_register_dyld_get_process_state_t"]
        [::std::mem::align_of::<__Reply__task_register_dyld_get_process_state_t>() - 4usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::Head"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_get_process_state_t, Head) - 0usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_register_dyld_get_process_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_register_dyld_get_process_state_t,
        RetCode
    ) - 32usize];
    ["Offset of field: __Reply__task_register_dyld_get_process_state_t::dyld_process_state"][::std::mem::offset_of!(
        __Reply__task_register_dyld_get_process_state_t,
        dyld_process_state
    )
        - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_map_corpse_info_64_t"]
        [::std::mem::size_of::<__Reply__task_map_corpse_info_64_t>() - 52usize];
    ["Alignment of __Reply__task_map_corpse_info_64_t"]
        [::std::mem::align_of::<__Reply__task_map_corpse_info_64_t>() - 4usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::Head"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, Head) - 0usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::kcd_addr_begin"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, kcd_addr_begin) - 36usize];
    ["Offset of field: __Reply__task_map_corpse_info_64_t::kcd_size"]
        [::std::mem::offset_of!(__Reply__task_map_corpse_info_64_t, kcd_size) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_inspect_t"][::std::mem::size_of::<__Reply__task_inspect_t>() - 56usize];
    ["Alignment of __Reply__task_inspect_t"]
        [::std::mem::align_of::<__Reply__task_inspect_t>() - 4usize];
    ["Offset of field: __Reply__task_inspect_t::Head"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, Head) - 0usize];
    ["Offset of field: __Reply__task_inspect_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_inspect_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_inspect_t::info_outCnt"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, info_outCnt) - 36usize];
    ["Offset of field: __Reply__task_inspect_t::info_out"]
        [::std::mem::offset_of!(__Reply__task_inspect_t, info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Reply__task_get_exc_guard_behavior_t>() - 40usize];
    ["Alignment of __Reply__task_get_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Reply__task_get_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_get_exc_guard_behavior_t::behavior"]
        [::std::mem::offset_of!(__Reply__task_get_exc_guard_behavior_t, behavior) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_exc_guard_behavior_t"]
        [::std::mem::size_of::<__Reply__task_set_exc_guard_behavior_t>() - 36usize];
    ["Alignment of __Reply__task_set_exc_guard_behavior_t"]
        [::std::mem::align_of::<__Reply__task_set_exc_guard_behavior_t>() - 4usize];
    ["Offset of field: __Reply__task_set_exc_guard_behavior_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_exc_guard_behavior_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_exc_guard_behavior_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_exc_guard_behavior_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_exc_guard_behavior_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_exc_guard_behavior_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_dyld_process_info_notify_register_t"]
        [::std::mem::size_of::<__Reply__task_dyld_process_info_notify_register_t>() - 36usize];
    ["Alignment of __Reply__task_dyld_process_info_notify_register_t"]
        [::std::mem::align_of::<__Reply__task_dyld_process_info_notify_register_t>() - 4usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_register_t::Head"]
        [::std::mem::offset_of!(__Reply__task_dyld_process_info_notify_register_t, Head) - 0usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_register_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_dyld_process_info_notify_register_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_register_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_register_t,
        RetCode
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub token: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_create_identity_token_t"]
        [::std::mem::size_of::<__Reply__task_create_identity_token_t>() - 40usize];
    ["Alignment of __Reply__task_create_identity_token_t"]
        [::std::mem::align_of::<__Reply__task_create_identity_token_t>() - 4usize];
    ["Offset of field: __Reply__task_create_identity_token_t::Head"]
        [::std::mem::offset_of!(__Reply__task_create_identity_token_t, Head) - 0usize];
    ["Offset of field: __Reply__task_create_identity_token_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_create_identity_token_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_create_identity_token_t::token"]
        [::std::mem::offset_of!(__Reply__task_create_identity_token_t, token) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_identity_token_get_task_port_t"]
        [::std::mem::size_of::<__Reply__task_identity_token_get_task_port_t>() - 40usize];
    ["Alignment of __Reply__task_identity_token_get_task_port_t"]
        [::std::mem::align_of::<__Reply__task_identity_token_get_task_port_t>() - 4usize];
    ["Offset of field: __Reply__task_identity_token_get_task_port_t::Head"]
        [::std::mem::offset_of!(__Reply__task_identity_token_get_task_port_t, Head) - 0usize];
    ["Offset of field: __Reply__task_identity_token_get_task_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__task_identity_token_get_task_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__task_identity_token_get_task_port_t::task_port"]
        [::std::mem::offset_of!(__Reply__task_identity_token_get_task_port_t, task_port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::size_of::<__Reply__task_dyld_process_info_notify_deregister_t>() - 36usize];
    ["Alignment of __Reply__task_dyld_process_info_notify_deregister_t"]
        [::std::mem::align_of::<__Reply__task_dyld_process_info_notify_deregister_t>() - 4usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_deregister_t::Head"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_deregister_t,
        Head
    ) - 0usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_deregister_t::NDR"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_deregister_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Reply__task_dyld_process_info_notify_deregister_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_dyld_process_info_notify_deregister_t,
        RetCode
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Reply__task_get_exception_ports_info_t>() - 680usize];
    ["Alignment of __Reply__task_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Reply__task_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, masksCnt) - 36usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::masks"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, masks) - 40usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::old_handlers_info"][::std::mem::offset_of!(
        __Reply__task_get_exception_ports_info_t,
        old_handlers_info
    ) - 168usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::old_behaviors"][::std::mem::offset_of!(
        __Reply__task_get_exception_ports_info_t,
        old_behaviors
    ) - 424usize];
    ["Offset of field: __Reply__task_get_exception_ports_info_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__task_get_exception_ports_info_t, old_flavors) - 552usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_test_sync_upcall_t"]
        [::std::mem::size_of::<__Reply__task_test_sync_upcall_t>() - 36usize];
    ["Alignment of __Reply__task_test_sync_upcall_t"]
        [::std::mem::align_of::<__Reply__task_test_sync_upcall_t>() - 4usize];
    ["Offset of field: __Reply__task_test_sync_upcall_t::Head"]
        [::std::mem::offset_of!(__Reply__task_test_sync_upcall_t, Head) - 0usize];
    ["Offset of field: __Reply__task_test_sync_upcall_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_test_sync_upcall_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_test_sync_upcall_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_test_sync_upcall_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_corpse_forking_behavior_t"]
        [::std::mem::size_of::<__Reply__task_set_corpse_forking_behavior_t>() - 36usize];
    ["Alignment of __Reply__task_set_corpse_forking_behavior_t"]
        [::std::mem::align_of::<__Reply__task_set_corpse_forking_behavior_t>() - 4usize];
    ["Offset of field: __Reply__task_set_corpse_forking_behavior_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_corpse_forking_behavior_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_corpse_forking_behavior_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_corpse_forking_behavior_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_corpse_forking_behavior_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_corpse_forking_behavior_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_test_async_upcall_propagation_t"]
        [::std::mem::size_of::<__Reply__task_test_async_upcall_propagation_t>() - 36usize];
    ["Alignment of __Reply__task_test_async_upcall_propagation_t"]
        [::std::mem::align_of::<__Reply__task_test_async_upcall_propagation_t>() - 4usize];
    ["Offset of field: __Reply__task_test_async_upcall_propagation_t::Head"]
        [::std::mem::offset_of!(__Reply__task_test_async_upcall_propagation_t, Head) - 0usize];
    ["Offset of field: __Reply__task_test_async_upcall_propagation_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_test_async_upcall_propagation_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_test_async_upcall_propagation_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_test_async_upcall_propagation_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_map_kcdata_object_64_t"]
        [::std::mem::size_of::<__Reply__task_map_kcdata_object_64_t>() - 52usize];
    ["Alignment of __Reply__task_map_kcdata_object_64_t"]
        [::std::mem::align_of::<__Reply__task_map_kcdata_object_64_t>() - 4usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::Head"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, Head) - 0usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::kcd_addr_begin"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, kcd_addr_begin) - 36usize];
    ["Offset of field: __Reply__task_map_kcdata_object_64_t::kcd_size"]
        [::std::mem::offset_of!(__Reply__task_map_kcdata_object_64_t, kcd_size) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_hardened_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_register_hardened_exception_handler_t"]
        [::std::mem::size_of::<__Reply__task_register_hardened_exception_handler_t>() - 36usize];
    ["Alignment of __Reply__task_register_hardened_exception_handler_t"]
        [::std::mem::align_of::<__Reply__task_register_hardened_exception_handler_t>() - 4usize];
    ["Offset of field: __Reply__task_register_hardened_exception_handler_t::Head"][::std::mem::offset_of!(
        __Reply__task_register_hardened_exception_handler_t,
        Head
    ) - 0usize];
    ["Offset of field: __Reply__task_register_hardened_exception_handler_t::NDR"][::std::mem::offset_of!(
        __Reply__task_register_hardened_exception_handler_t,
        NDR
    ) - 24usize];
    ["Offset of field: __Reply__task_register_hardened_exception_handler_t::RetCode"][::std::mem::offset_of!(
        __Reply__task_register_hardened_exception_handler_t,
        RetCode
    ) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    pub Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    pub Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    pub Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    pub Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    pub Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    pub Reply_task_register_dyld_shared_cache_image_info:
        __Reply__task_register_dyld_shared_cache_image_info_t,
    pub Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    pub Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    pub Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    pub Reply_task_inspect: __Reply__task_inspect_t,
    pub Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    pub Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    pub Reply_task_dyld_process_info_notify_register:
        __Reply__task_dyld_process_info_notify_register_t,
    pub Reply_task_create_identity_token: __Reply__task_create_identity_token_t,
    pub Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t,
    pub Reply_task_dyld_process_info_notify_deregister:
        __Reply__task_dyld_process_info_notify_deregister_t,
    pub Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t,
    pub Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t,
    pub Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t,
    pub Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t,
    pub Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t,
    pub Reply_task_register_hardened_exception_handler:
        __Reply__task_register_hardened_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__task_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__task_subsystem>() - 5224usize];
    ["Alignment of __ReplyUnion__task_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__task_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_terminate"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_terminate) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_threads"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_threads) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_mach_ports_register"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_mach_ports_register) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_mach_ports_lookup"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_mach_ports_lookup) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_suspend"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_suspend) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_resume"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_resume) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_special_port"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_special_port"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_special_port
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_thread_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_thread_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_thread_create_running"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_thread_create_running
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_exception_ports
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_exception_ports
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_swap_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_swap_exception_ports
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_lock_set_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_lock_set_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_lock_set_destroy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_lock_set_destroy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_semaphore_create"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_semaphore_create) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_semaphore_destroy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_semaphore_destroy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_policy_set"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_policy_set) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_policy_get"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_policy_get) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_sample"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_sample) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_policy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_policy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_emulation"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_emulation) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_emulation_vector"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_emulation_vector
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_emulation_vector"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_emulation_vector
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_ras_pc"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_ras_pc) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_zone_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_zone_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_assign"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_assign) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_assign_default"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_assign_default) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_assignment"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_get_assignment) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_policy"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_policy) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_state"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_get_state) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_state"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_set_state) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_phys_footprint_limit"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_phys_footprint_limit
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_suspend2"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_suspend2) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_resume2"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_resume2) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_purgable_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_purgable_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_mach_voucher
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_mach_voucher
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_swap_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_swap_mach_voucher
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_generate_corpse"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_generate_corpse) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_map_corpse_info"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_map_corpse_info) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_image_infos"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_register_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_unregister_dyld_image_infos"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_unregister_dyld_image_infos
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_dyld_image_infos"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_dyld_image_infos
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_shared_cache_image_info"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_register_dyld_shared_cache_image_info) - 0usize] ;
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_set_dyld_state"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_register_dyld_set_dyld_state
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_dyld_get_process_state"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_register_dyld_get_process_state
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_map_corpse_info_64"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_map_corpse_info_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_inspect"]
        [::std::mem::offset_of!(__ReplyUnion__task_subsystem, Reply_task_inspect) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_exc_guard_behavior"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_exc_guard_behavior"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_exc_guard_behavior
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_dyld_process_info_notify_register"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_dyld_process_info_notify_register) - 0usize] ;
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_create_identity_token"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_create_identity_token
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_identity_token_get_task_port"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_identity_token_get_task_port
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_dyld_process_info_notify_deregister"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_dyld_process_info_notify_deregister) - 0usize] ;
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_get_exception_ports_info"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_get_exception_ports_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_test_sync_upcall"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_test_sync_upcall
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_set_corpse_forking_behavior"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_set_corpse_forking_behavior
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_test_async_upcall_propagation"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_test_async_upcall_propagation
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_map_kcdata_object_64"][::std::mem::offset_of!(
        __ReplyUnion__task_subsystem,
        Reply_task_map_kcdata_object_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__task_subsystem::Reply_task_register_hardened_exception_handler"] [:: std :: mem :: offset_of ! (__ReplyUnion__task_subsystem , Reply_task_register_hardened_exception_handler) - 0usize] ;
};
extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn act_get_state(
        target_act: thread_read_t,
        flavor: ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn act_set_state(
        target_act: thread_act_t,
        flavor: ::std::os::raw::c_int,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_state(
        target_act: thread_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_state(
        target_act: thread_act_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_suspend(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_resume(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_special_port(
        thr_act: thread_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_special_port(
        thr_act: thread_act_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_info(
        target_act: thread_inspect_t,
        flavor: thread_flavor_t,
        thread_info_out: thread_info_t,
        thread_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy(
        thr_act: thread_act_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_set(
        thread: thread_act_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_get(
        thread: thread_inspect_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_assignment(
        thread: thread_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_policy(
        thr_act: thread_act_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_mach_voucher(
        thr_act: thread_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_mach_voucher(
        thr_act: thread_act_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_convert_thread_state(
        thread: thread_act_t,
        direction: ::std::os::raw::c_int,
        flavor: thread_state_flavor_t,
        in_state: thread_state_t,
        in_stateCnt: mach_msg_type_number_t,
        out_state: thread_state_t,
        out_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_adopt_exception_handler(
        thread: thread_t,
        exc_port: mach_port_t,
        exc_mask: exception_mask_t,
        behavior_mask: exception_behavior_t,
        flavor_mask: thread_state_flavor_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_terminate_t"]
        [::std::mem::size_of::<__Request__thread_terminate_t>() - 24usize];
    ["Alignment of __Request__thread_terminate_t"]
        [::std::mem::align_of::<__Request__thread_terminate_t>() - 4usize];
    ["Offset of field: __Request__thread_terminate_t::Head"]
        [::std::mem::offset_of!(__Request__thread_terminate_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__act_get_state_t"]
        [::std::mem::size_of::<__Request__act_get_state_t>() - 40usize];
    ["Alignment of __Request__act_get_state_t"]
        [::std::mem::align_of::<__Request__act_get_state_t>() - 4usize];
    ["Offset of field: __Request__act_get_state_t::Head"]
        [::std::mem::offset_of!(__Request__act_get_state_t, Head) - 0usize];
    ["Offset of field: __Request__act_get_state_t::NDR"]
        [::std::mem::offset_of!(__Request__act_get_state_t, NDR) - 24usize];
    ["Offset of field: __Request__act_get_state_t::flavor"]
        [::std::mem::offset_of!(__Request__act_get_state_t, flavor) - 32usize];
    ["Offset of field: __Request__act_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Request__act_get_state_t, old_stateCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__act_set_state_t"]
        [::std::mem::size_of::<__Request__act_set_state_t>() - 5224usize];
    ["Alignment of __Request__act_set_state_t"]
        [::std::mem::align_of::<__Request__act_set_state_t>() - 4usize];
    ["Offset of field: __Request__act_set_state_t::Head"]
        [::std::mem::offset_of!(__Request__act_set_state_t, Head) - 0usize];
    ["Offset of field: __Request__act_set_state_t::NDR"]
        [::std::mem::offset_of!(__Request__act_set_state_t, NDR) - 24usize];
    ["Offset of field: __Request__act_set_state_t::flavor"]
        [::std::mem::offset_of!(__Request__act_set_state_t, flavor) - 32usize];
    ["Offset of field: __Request__act_set_state_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__act_set_state_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__act_set_state_t::new_state"]
        [::std::mem::offset_of!(__Request__act_set_state_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_state_t"]
        [::std::mem::size_of::<__Request__thread_get_state_t>() - 40usize];
    ["Alignment of __Request__thread_get_state_t"]
        [::std::mem::align_of::<__Request__thread_get_state_t>() - 4usize];
    ["Offset of field: __Request__thread_get_state_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_state_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_state_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_get_state_t, old_stateCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_state_t"]
        [::std::mem::size_of::<__Request__thread_set_state_t>() - 5224usize];
    ["Alignment of __Request__thread_set_state_t"]
        [::std::mem::align_of::<__Request__thread_set_state_t>() - 4usize];
    ["Offset of field: __Request__thread_set_state_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_state_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_set_state_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_set_state_t::new_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, new_stateCnt) - 36usize];
    ["Offset of field: __Request__thread_set_state_t::new_state"]
        [::std::mem::offset_of!(__Request__thread_set_state_t, new_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_suspend_t"]
        [::std::mem::size_of::<__Request__thread_suspend_t>() - 24usize];
    ["Alignment of __Request__thread_suspend_t"]
        [::std::mem::align_of::<__Request__thread_suspend_t>() - 4usize];
    ["Offset of field: __Request__thread_suspend_t::Head"]
        [::std::mem::offset_of!(__Request__thread_suspend_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_resume_t"]
        [::std::mem::size_of::<__Request__thread_resume_t>() - 24usize];
    ["Alignment of __Request__thread_resume_t"]
        [::std::mem::align_of::<__Request__thread_resume_t>() - 4usize];
    ["Offset of field: __Request__thread_resume_t::Head"]
        [::std::mem::offset_of!(__Request__thread_resume_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_abort_t"]
        [::std::mem::size_of::<__Request__thread_abort_t>() - 24usize];
    ["Alignment of __Request__thread_abort_t"]
        [::std::mem::align_of::<__Request__thread_abort_t>() - 4usize];
    ["Offset of field: __Request__thread_abort_t::Head"]
        [::std::mem::offset_of!(__Request__thread_abort_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_abort_safely_t"]
        [::std::mem::size_of::<__Request__thread_abort_safely_t>() - 24usize];
    ["Alignment of __Request__thread_abort_safely_t"]
        [::std::mem::align_of::<__Request__thread_abort_safely_t>() - 4usize];
    ["Offset of field: __Request__thread_abort_safely_t::Head"]
        [::std::mem::offset_of!(__Request__thread_abort_safely_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_depress_abort_t"]
        [::std::mem::size_of::<__Request__thread_depress_abort_t>() - 24usize];
    ["Alignment of __Request__thread_depress_abort_t"]
        [::std::mem::align_of::<__Request__thread_depress_abort_t>() - 4usize];
    ["Offset of field: __Request__thread_depress_abort_t::Head"]
        [::std::mem::offset_of!(__Request__thread_depress_abort_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_special_port_t"]
        [::std::mem::size_of::<__Request__thread_get_special_port_t>() - 36usize];
    ["Alignment of __Request__thread_get_special_port_t"]
        [::std::mem::align_of::<__Request__thread_get_special_port_t>() - 4usize];
    ["Offset of field: __Request__thread_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_special_port_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__thread_get_special_port_t, which_port) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_special_port_t"]
        [::std::mem::size_of::<__Request__thread_set_special_port_t>() - 52usize];
    ["Alignment of __Request__thread_set_special_port_t"]
        [::std::mem::align_of::<__Request__thread_set_special_port_t>() - 4usize];
    ["Offset of field: __Request__thread_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_special_port_t::special_port"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, special_port) - 28usize];
    ["Offset of field: __Request__thread_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_set_special_port_t::which_port"]
        [::std::mem::offset_of!(__Request__thread_set_special_port_t, which_port) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_info_t"]
        [::std::mem::size_of::<__Request__thread_info_t>() - 40usize];
    ["Alignment of __Request__thread_info_t"]
        [::std::mem::align_of::<__Request__thread_info_t>() - 4usize];
    ["Offset of field: __Request__thread_info_t::Head"]
        [::std::mem::offset_of!(__Request__thread_info_t, Head) - 0usize];
    ["Offset of field: __Request__thread_info_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_info_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_info_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_info_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_info_t::thread_info_outCnt"]
        [::std::mem::offset_of!(__Request__thread_info_t, thread_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_exception_ports_t"]
        [::std::mem::size_of::<__Request__thread_set_exception_ports_t>() - 60usize];
    ["Alignment of __Request__thread_set_exception_ports_t"]
        [::std::mem::align_of::<__Request__thread_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, exception_mask) - 48usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__thread_set_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__thread_set_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_exception_ports_t"]
        [::std::mem::size_of::<__Request__thread_get_exception_ports_t>() - 36usize];
    ["Alignment of __Request__thread_get_exception_ports_t"]
        [::std::mem::align_of::<__Request__thread_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__thread_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_exception_ports_t::exception_mask"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_t, exception_mask) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_swap_exception_ports_t"]
        [::std::mem::size_of::<__Request__thread_swap_exception_ports_t>() - 60usize];
    ["Alignment of __Request__thread_swap_exception_ports_t"]
        [::std::mem::align_of::<__Request__thread_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::new_port"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, new_port) - 28usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::exception_mask"][::std::mem::offset_of!(
        __Request__thread_swap_exception_ports_t,
        exception_mask
    ) - 48usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::behavior"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, behavior) - 52usize];
    ["Offset of field: __Request__thread_swap_exception_ports_t::new_flavor"]
        [::std::mem::offset_of!(__Request__thread_swap_exception_ports_t, new_flavor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_policy_t"]
        [::std::mem::size_of::<__Request__thread_policy_t>() - 64usize];
    ["Alignment of __Request__thread_policy_t"]
        [::std::mem::align_of::<__Request__thread_policy_t>() - 4usize];
    ["Offset of field: __Request__thread_policy_t::Head"]
        [::std::mem::offset_of!(__Request__thread_policy_t, Head) - 0usize];
    ["Offset of field: __Request__thread_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_policy_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_policy_t::policy"]
        [::std::mem::offset_of!(__Request__thread_policy_t, policy) - 32usize];
    ["Offset of field: __Request__thread_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__thread_policy_t, baseCnt) - 36usize];
    ["Offset of field: __Request__thread_policy_t::base"]
        [::std::mem::offset_of!(__Request__thread_policy_t, base) - 40usize];
    ["Offset of field: __Request__thread_policy_t::set_limit"]
        [::std::mem::offset_of!(__Request__thread_policy_t, set_limit) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_policy_set_t"]
        [::std::mem::size_of::<__Request__thread_policy_set_t>() - 104usize];
    ["Alignment of __Request__thread_policy_set_t"]
        [::std::mem::align_of::<__Request__thread_policy_set_t>() - 4usize];
    ["Offset of field: __Request__thread_policy_set_t::Head"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, Head) - 0usize];
    ["Offset of field: __Request__thread_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_policy_set_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_policy_set_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__thread_policy_set_t::policy_info"]
        [::std::mem::offset_of!(__Request__thread_policy_set_t, policy_info) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_policy_get_t"]
        [::std::mem::size_of::<__Request__thread_policy_get_t>() - 44usize];
    ["Alignment of __Request__thread_policy_get_t"]
        [::std::mem::align_of::<__Request__thread_policy_get_t>() - 4usize];
    ["Offset of field: __Request__thread_policy_get_t::Head"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, Head) - 0usize];
    ["Offset of field: __Request__thread_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_policy_get_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, flavor) - 32usize];
    ["Offset of field: __Request__thread_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Request__thread_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Request__thread_policy_get_t, get_default) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_sample_t"]
        [::std::mem::size_of::<__Request__thread_sample_t>() - 40usize];
    ["Alignment of __Request__thread_sample_t"]
        [::std::mem::align_of::<__Request__thread_sample_t>() - 4usize];
    ["Offset of field: __Request__thread_sample_t::Head"]
        [::std::mem::offset_of!(__Request__thread_sample_t, Head) - 0usize];
    ["Offset of field: __Request__thread_sample_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_sample_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_sample_t::reply"]
        [::std::mem::offset_of!(__Request__thread_sample_t, reply) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__etap_trace_thread_t"]
        [::std::mem::size_of::<__Request__etap_trace_thread_t>() - 36usize];
    ["Alignment of __Request__etap_trace_thread_t"]
        [::std::mem::align_of::<__Request__etap_trace_thread_t>() - 4usize];
    ["Offset of field: __Request__etap_trace_thread_t::Head"]
        [::std::mem::offset_of!(__Request__etap_trace_thread_t, Head) - 0usize];
    ["Offset of field: __Request__etap_trace_thread_t::NDR"]
        [::std::mem::offset_of!(__Request__etap_trace_thread_t, NDR) - 24usize];
    ["Offset of field: __Request__etap_trace_thread_t::trace_status"]
        [::std::mem::offset_of!(__Request__etap_trace_thread_t, trace_status) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_assign_t"]
        [::std::mem::size_of::<__Request__thread_assign_t>() - 40usize];
    ["Alignment of __Request__thread_assign_t"]
        [::std::mem::align_of::<__Request__thread_assign_t>() - 4usize];
    ["Offset of field: __Request__thread_assign_t::Head"]
        [::std::mem::offset_of!(__Request__thread_assign_t, Head) - 0usize];
    ["Offset of field: __Request__thread_assign_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_assign_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_assign_t::new_set"]
        [::std::mem::offset_of!(__Request__thread_assign_t, new_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_assign_default_t"]
        [::std::mem::size_of::<__Request__thread_assign_default_t>() - 24usize];
    ["Alignment of __Request__thread_assign_default_t"]
        [::std::mem::align_of::<__Request__thread_assign_default_t>() - 4usize];
    ["Offset of field: __Request__thread_assign_default_t::Head"]
        [::std::mem::offset_of!(__Request__thread_assign_default_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_assignment_t"]
        [::std::mem::size_of::<__Request__thread_get_assignment_t>() - 24usize];
    ["Alignment of __Request__thread_get_assignment_t"]
        [::std::mem::align_of::<__Request__thread_get_assignment_t>() - 4usize];
    ["Offset of field: __Request__thread_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_assignment_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_policy_t"]
        [::std::mem::size_of::<__Request__thread_set_policy_t>() - 84usize];
    ["Alignment of __Request__thread_set_policy_t"]
        [::std::mem::align_of::<__Request__thread_set_policy_t>() - 4usize];
    ["Offset of field: __Request__thread_set_policy_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_policy_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_policy_t::pset"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, pset) - 28usize];
    ["Offset of field: __Request__thread_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_set_policy_t::policy"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, policy) - 48usize];
    ["Offset of field: __Request__thread_set_policy_t::baseCnt"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, baseCnt) - 52usize];
    ["Offset of field: __Request__thread_set_policy_t::base"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, base) - 56usize];
    ["Offset of field: __Request__thread_set_policy_t::limitCnt"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, limitCnt) - 76usize];
    ["Offset of field: __Request__thread_set_policy_t::limit"]
        [::std::mem::offset_of!(__Request__thread_set_policy_t, limit) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_mach_voucher_t"]
        [::std::mem::size_of::<__Request__thread_get_mach_voucher_t>() - 36usize];
    ["Alignment of __Request__thread_get_mach_voucher_t"]
        [::std::mem::align_of::<__Request__thread_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__thread_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_mach_voucher_t::which"]
        [::std::mem::offset_of!(__Request__thread_get_mach_voucher_t, which) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_set_mach_voucher_t"]
        [::std::mem::size_of::<__Request__thread_set_mach_voucher_t>() - 40usize];
    ["Alignment of __Request__thread_set_mach_voucher_t"]
        [::std::mem::align_of::<__Request__thread_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__thread_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__thread_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__thread_set_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_set_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_set_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Request__thread_set_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Request__thread_swap_mach_voucher_t>() - 52usize];
    ["Alignment of __Request__thread_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Request__thread_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::new_voucher"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, new_voucher) - 28usize];
    ["Offset of field: __Request__thread_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Request__thread_swap_mach_voucher_t, old_voucher) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub direction: ::std::os::raw::c_int,
    pub flavor: thread_state_flavor_t,
    pub in_stateCnt: mach_msg_type_number_t,
    pub in_state: [natural_t; 1296usize],
    pub out_stateCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_convert_thread_state_t"]
        [::std::mem::size_of::<__Request__thread_convert_thread_state_t>() - 5232usize];
    ["Alignment of __Request__thread_convert_thread_state_t"]
        [::std::mem::align_of::<__Request__thread_convert_thread_state_t>() - 4usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::Head"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, Head) - 0usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::direction"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, direction) - 32usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::flavor"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, flavor) - 36usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::in_stateCnt"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, in_stateCnt) - 40usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::in_state"]
        [::std::mem::offset_of!(__Request__thread_convert_thread_state_t, in_state) - 44usize];
    ["Offset of field: __Request__thread_convert_thread_state_t::out_stateCnt"][::std::mem::offset_of!(
        __Request__thread_convert_thread_state_t,
        out_stateCnt
    ) - 5228usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Request__thread_get_exception_ports_info_t>() - 36usize];
    ["Alignment of __Request__thread_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Request__thread_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Request__thread_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Request__thread_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Request__thread_get_exception_ports_info_t::exception_mask"][::std::mem::offset_of!(
        __Request__thread_get_exception_ports_info_t,
        exception_mask
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_adopt_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub exc_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exc_mask: exception_mask_t,
    pub behavior_mask: exception_behavior_t,
    pub flavor_mask: thread_state_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__thread_adopt_exception_handler_t"]
        [::std::mem::size_of::<__Request__thread_adopt_exception_handler_t>() - 60usize];
    ["Alignment of __Request__thread_adopt_exception_handler_t"]
        [::std::mem::align_of::<__Request__thread_adopt_exception_handler_t>() - 4usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::Head"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, Head) - 0usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::msgh_body"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, msgh_body) - 24usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::exc_port"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, exc_port) - 28usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::NDR"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, NDR) - 40usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::exc_mask"]
        [::std::mem::offset_of!(__Request__thread_adopt_exception_handler_t, exc_mask) - 48usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::behavior_mask"][::std::mem::offset_of!(
        __Request__thread_adopt_exception_handler_t,
        behavior_mask
    ) - 52usize];
    ["Offset of field: __Request__thread_adopt_exception_handler_t::flavor_mask"][::std::mem::offset_of!(
        __Request__thread_adopt_exception_handler_t,
        flavor_mask
    ) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    pub Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    pub Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t,
    pub Request_thread_adopt_exception_handler: __Request__thread_adopt_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__thread_act_subsystem"]
        [::std::mem::size_of::<__RequestUnion__thread_act_subsystem>() - 5232usize];
    ["Alignment of __RequestUnion__thread_act_subsystem"]
        [::std::mem::align_of::<__RequestUnion__thread_act_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_terminate"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_terminate
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_act_get_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_act_get_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_act_set_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_act_set_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_state"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_state
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_suspend"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_suspend
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_resume"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_resume
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_abort"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_abort
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_abort_safely"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_abort_safely
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_depress_abort"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_depress_abort
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_special_port"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_special_port"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_special_port
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_info"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_exception_ports"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_swap_exception_ports"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_swap_exception_ports) - 0usize] ;
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_policy"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_policy
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_policy_set"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_policy_set
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_policy_get"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_policy_get
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_sample"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_sample
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_etap_trace_thread"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_etap_trace_thread
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_assign"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_assign
    ) - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_assign_default"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_assign_default
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_assignment"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_assignment
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_policy"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_policy
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_get_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_set_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_set_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_swap_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__thread_act_subsystem,
        Request_thread_swap_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_convert_thread_state"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_convert_thread_state) - 0usize] ;
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_get_exception_ports_info"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_get_exception_ports_info) - 0usize] ;
    ["Offset of field: __RequestUnion__thread_act_subsystem::Request_thread_adopt_exception_handler"] [:: std :: mem :: offset_of ! (__RequestUnion__thread_act_subsystem , Request_thread_adopt_exception_handler) - 0usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_terminate_t"]
        [::std::mem::size_of::<__Reply__thread_terminate_t>() - 36usize];
    ["Alignment of __Reply__thread_terminate_t"]
        [::std::mem::align_of::<__Reply__thread_terminate_t>() - 4usize];
    ["Offset of field: __Reply__thread_terminate_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_terminate_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_terminate_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_terminate_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_terminate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_terminate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__act_get_state_t"]
        [::std::mem::size_of::<__Reply__act_get_state_t>() - 5224usize];
    ["Alignment of __Reply__act_get_state_t"]
        [::std::mem::align_of::<__Reply__act_get_state_t>() - 4usize];
    ["Offset of field: __Reply__act_get_state_t::Head"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, Head) - 0usize];
    ["Offset of field: __Reply__act_get_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__act_get_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__act_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, old_stateCnt) - 36usize];
    ["Offset of field: __Reply__act_get_state_t::old_state"]
        [::std::mem::offset_of!(__Reply__act_get_state_t, old_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__act_set_state_t"]
        [::std::mem::size_of::<__Reply__act_set_state_t>() - 36usize];
    ["Alignment of __Reply__act_set_state_t"]
        [::std::mem::align_of::<__Reply__act_set_state_t>() - 4usize];
    ["Offset of field: __Reply__act_set_state_t::Head"]
        [::std::mem::offset_of!(__Reply__act_set_state_t, Head) - 0usize];
    ["Offset of field: __Reply__act_set_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__act_set_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__act_set_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__act_set_state_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_state_t"]
        [::std::mem::size_of::<__Reply__thread_get_state_t>() - 5224usize];
    ["Alignment of __Reply__thread_get_state_t"]
        [::std::mem::align_of::<__Reply__thread_get_state_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_state_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_get_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_get_state_t::old_stateCnt"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, old_stateCnt) - 36usize];
    ["Offset of field: __Reply__thread_get_state_t::old_state"]
        [::std::mem::offset_of!(__Reply__thread_get_state_t, old_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_state_t"]
        [::std::mem::size_of::<__Reply__thread_set_state_t>() - 36usize];
    ["Alignment of __Reply__thread_set_state_t"]
        [::std::mem::align_of::<__Reply__thread_set_state_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_state_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_state_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_state_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_suspend_t"]
        [::std::mem::size_of::<__Reply__thread_suspend_t>() - 36usize];
    ["Alignment of __Reply__thread_suspend_t"]
        [::std::mem::align_of::<__Reply__thread_suspend_t>() - 4usize];
    ["Offset of field: __Reply__thread_suspend_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_suspend_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_suspend_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_suspend_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_suspend_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_suspend_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_resume_t"]
        [::std::mem::size_of::<__Reply__thread_resume_t>() - 36usize];
    ["Alignment of __Reply__thread_resume_t"]
        [::std::mem::align_of::<__Reply__thread_resume_t>() - 4usize];
    ["Offset of field: __Reply__thread_resume_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_resume_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_resume_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_resume_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_resume_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_resume_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_abort_t"][::std::mem::size_of::<__Reply__thread_abort_t>() - 36usize];
    ["Alignment of __Reply__thread_abort_t"]
        [::std::mem::align_of::<__Reply__thread_abort_t>() - 4usize];
    ["Offset of field: __Reply__thread_abort_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_abort_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_abort_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_abort_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_abort_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_abort_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_abort_safely_t"]
        [::std::mem::size_of::<__Reply__thread_abort_safely_t>() - 36usize];
    ["Alignment of __Reply__thread_abort_safely_t"]
        [::std::mem::align_of::<__Reply__thread_abort_safely_t>() - 4usize];
    ["Offset of field: __Reply__thread_abort_safely_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_abort_safely_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_abort_safely_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_abort_safely_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_abort_safely_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_abort_safely_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_depress_abort_t"]
        [::std::mem::size_of::<__Reply__thread_depress_abort_t>() - 36usize];
    ["Alignment of __Reply__thread_depress_abort_t"]
        [::std::mem::align_of::<__Reply__thread_depress_abort_t>() - 4usize];
    ["Offset of field: __Reply__thread_depress_abort_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_depress_abort_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_depress_abort_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_depress_abort_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_depress_abort_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_depress_abort_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_special_port_t"]
        [::std::mem::size_of::<__Reply__thread_get_special_port_t>() - 40usize];
    ["Alignment of __Reply__thread_get_special_port_t"]
        [::std::mem::align_of::<__Reply__thread_get_special_port_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_special_port_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_special_port_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_special_port_t::special_port"]
        [::std::mem::offset_of!(__Reply__thread_get_special_port_t, special_port) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_special_port_t"]
        [::std::mem::size_of::<__Reply__thread_set_special_port_t>() - 36usize];
    ["Alignment of __Reply__thread_set_special_port_t"]
        [::std::mem::align_of::<__Reply__thread_set_special_port_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_special_port_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_special_port_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_special_port_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_special_port_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_special_port_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_special_port_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_info_t"][::std::mem::size_of::<__Reply__thread_info_t>() - 168usize];
    ["Alignment of __Reply__thread_info_t"]
        [::std::mem::align_of::<__Reply__thread_info_t>() - 4usize];
    ["Offset of field: __Reply__thread_info_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_info_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_info_t::thread_info_outCnt"]
        [::std::mem::offset_of!(__Reply__thread_info_t, thread_info_outCnt) - 36usize];
    ["Offset of field: __Reply__thread_info_t::thread_info_out"]
        [::std::mem::offset_of!(__Reply__thread_info_t, thread_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_exception_ports_t"]
        [::std::mem::size_of::<__Reply__thread_set_exception_ports_t>() - 36usize];
    ["Alignment of __Reply__thread_set_exception_ports_t"]
        [::std::mem::align_of::<__Reply__thread_set_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_exception_ports_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_exception_ports_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_exception_ports_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_exception_ports_t"]
        [::std::mem::size_of::<__Reply__thread_get_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__thread_get_exception_ports_t"]
        [::std::mem::align_of::<__Reply__thread_get_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__thread_get_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_swap_exception_ports_t"]
        [::std::mem::size_of::<__Reply__thread_swap_exception_ports_t>() - 808usize];
    ["Alignment of __Reply__thread_swap_exception_ports_t"]
        [::std::mem::align_of::<__Reply__thread_swap_exception_ports_t>() - 4usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::old_handlers"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, old_handlers) - 28usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, NDR) - 412usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, masksCnt) - 420usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::masks"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, masks) - 424usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::old_behaviors"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, old_behaviors) - 552usize];
    ["Offset of field: __Reply__thread_swap_exception_ports_t::old_flavors"]
        [::std::mem::offset_of!(__Reply__thread_swap_exception_ports_t, old_flavors) - 680usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_policy_t"]
        [::std::mem::size_of::<__Reply__thread_policy_t>() - 36usize];
    ["Alignment of __Reply__thread_policy_t"]
        [::std::mem::align_of::<__Reply__thread_policy_t>() - 4usize];
    ["Offset of field: __Reply__thread_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_policy_set_t"]
        [::std::mem::size_of::<__Reply__thread_policy_set_t>() - 36usize];
    ["Alignment of __Reply__thread_policy_set_t"]
        [::std::mem::align_of::<__Reply__thread_policy_set_t>() - 4usize];
    ["Offset of field: __Reply__thread_policy_set_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_policy_set_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_policy_set_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_policy_set_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_policy_set_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_policy_set_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_policy_get_t"]
        [::std::mem::size_of::<__Reply__thread_policy_get_t>() - 108usize];
    ["Alignment of __Reply__thread_policy_get_t"]
        [::std::mem::align_of::<__Reply__thread_policy_get_t>() - 4usize];
    ["Offset of field: __Reply__thread_policy_get_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_policy_get_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_policy_get_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_policy_get_t::policy_infoCnt"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, policy_infoCnt) - 36usize];
    ["Offset of field: __Reply__thread_policy_get_t::policy_info"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, policy_info) - 40usize];
    ["Offset of field: __Reply__thread_policy_get_t::get_default"]
        [::std::mem::offset_of!(__Reply__thread_policy_get_t, get_default) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_sample_t"]
        [::std::mem::size_of::<__Reply__thread_sample_t>() - 36usize];
    ["Alignment of __Reply__thread_sample_t"]
        [::std::mem::align_of::<__Reply__thread_sample_t>() - 4usize];
    ["Offset of field: __Reply__thread_sample_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_sample_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_sample_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_sample_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_sample_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_sample_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__etap_trace_thread_t"]
        [::std::mem::size_of::<__Reply__etap_trace_thread_t>() - 36usize];
    ["Alignment of __Reply__etap_trace_thread_t"]
        [::std::mem::align_of::<__Reply__etap_trace_thread_t>() - 4usize];
    ["Offset of field: __Reply__etap_trace_thread_t::Head"]
        [::std::mem::offset_of!(__Reply__etap_trace_thread_t, Head) - 0usize];
    ["Offset of field: __Reply__etap_trace_thread_t::NDR"]
        [::std::mem::offset_of!(__Reply__etap_trace_thread_t, NDR) - 24usize];
    ["Offset of field: __Reply__etap_trace_thread_t::RetCode"]
        [::std::mem::offset_of!(__Reply__etap_trace_thread_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_assign_t"]
        [::std::mem::size_of::<__Reply__thread_assign_t>() - 36usize];
    ["Alignment of __Reply__thread_assign_t"]
        [::std::mem::align_of::<__Reply__thread_assign_t>() - 4usize];
    ["Offset of field: __Reply__thread_assign_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_assign_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_assign_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_assign_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_assign_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_assign_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_assign_default_t"]
        [::std::mem::size_of::<__Reply__thread_assign_default_t>() - 36usize];
    ["Alignment of __Reply__thread_assign_default_t"]
        [::std::mem::align_of::<__Reply__thread_assign_default_t>() - 4usize];
    ["Offset of field: __Reply__thread_assign_default_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_assign_default_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_assign_default_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_assign_default_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_assign_default_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_assign_default_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_assignment_t"]
        [::std::mem::size_of::<__Reply__thread_get_assignment_t>() - 40usize];
    ["Alignment of __Reply__thread_get_assignment_t"]
        [::std::mem::align_of::<__Reply__thread_get_assignment_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_assignment_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_assignment_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_assignment_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_assignment_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_assignment_t::assigned_set"]
        [::std::mem::offset_of!(__Reply__thread_get_assignment_t, assigned_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_policy_t"]
        [::std::mem::size_of::<__Reply__thread_set_policy_t>() - 36usize];
    ["Alignment of __Reply__thread_set_policy_t"]
        [::std::mem::align_of::<__Reply__thread_set_policy_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_policy_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_policy_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_policy_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_policy_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_policy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_policy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__thread_get_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__thread_get_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__thread_get_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_get_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_get_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Reply__thread_get_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_set_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__thread_set_mach_voucher_t>() - 36usize];
    ["Alignment of __Reply__thread_set_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__thread_set_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__thread_set_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_set_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_set_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_set_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_set_mach_voucher_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_set_mach_voucher_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_swap_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__thread_swap_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__thread_swap_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__thread_swap_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__thread_swap_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_swap_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_swap_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__thread_swap_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__thread_swap_mach_voucher_t::old_voucher"]
        [::std::mem::offset_of!(__Reply__thread_swap_mach_voucher_t, old_voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_stateCnt: mach_msg_type_number_t,
    pub out_state: [natural_t; 1296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_convert_thread_state_t"]
        [::std::mem::size_of::<__Reply__thread_convert_thread_state_t>() - 5224usize];
    ["Alignment of __Reply__thread_convert_thread_state_t"]
        [::std::mem::align_of::<__Reply__thread_convert_thread_state_t>() - 4usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::out_stateCnt"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, out_stateCnt) - 36usize];
    ["Offset of field: __Reply__thread_convert_thread_state_t::out_state"]
        [::std::mem::offset_of!(__Reply__thread_convert_thread_state_t, out_state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_get_exception_ports_info_t"]
        [::std::mem::size_of::<__Reply__thread_get_exception_ports_info_t>() - 680usize];
    ["Alignment of __Reply__thread_get_exception_ports_info_t"]
        [::std::mem::align_of::<__Reply__thread_get_exception_ports_info_t>() - 4usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::masksCnt"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, masksCnt) - 36usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::masks"]
        [::std::mem::offset_of!(__Reply__thread_get_exception_ports_info_t, masks) - 40usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::old_handlers_info"][::std::mem::offset_of!(
        __Reply__thread_get_exception_ports_info_t,
        old_handlers_info
    )
        - 168usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::old_behaviors"][::std::mem::offset_of!(
        __Reply__thread_get_exception_ports_info_t,
        old_behaviors
    ) - 424usize];
    ["Offset of field: __Reply__thread_get_exception_ports_info_t::old_flavors"][::std::mem::offset_of!(
        __Reply__thread_get_exception_ports_info_t,
        old_flavors
    ) - 552usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_adopt_exception_handler_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__thread_adopt_exception_handler_t"]
        [::std::mem::size_of::<__Reply__thread_adopt_exception_handler_t>() - 36usize];
    ["Alignment of __Reply__thread_adopt_exception_handler_t"]
        [::std::mem::align_of::<__Reply__thread_adopt_exception_handler_t>() - 4usize];
    ["Offset of field: __Reply__thread_adopt_exception_handler_t::Head"]
        [::std::mem::offset_of!(__Reply__thread_adopt_exception_handler_t, Head) - 0usize];
    ["Offset of field: __Reply__thread_adopt_exception_handler_t::NDR"]
        [::std::mem::offset_of!(__Reply__thread_adopt_exception_handler_t, NDR) - 24usize];
    ["Offset of field: __Reply__thread_adopt_exception_handler_t::RetCode"]
        [::std::mem::offset_of!(__Reply__thread_adopt_exception_handler_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    pub Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    pub Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t,
    pub Reply_thread_adopt_exception_handler: __Reply__thread_adopt_exception_handler_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__thread_act_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__thread_act_subsystem>() - 5224usize];
    ["Alignment of __ReplyUnion__thread_act_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__thread_act_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_terminate"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_terminate
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_act_get_state"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_act_get_state) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_act_set_state"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_act_set_state) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_state"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_state
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_state"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_state
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_suspend"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_suspend) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_resume"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_resume) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_abort"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_abort) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_abort_safely"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_abort_safely
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_depress_abort"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_depress_abort
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_special_port"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_special_port
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_special_port"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_special_port
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_info"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_info) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_swap_exception_ports"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_swap_exception_ports
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_policy"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_policy) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_policy_set"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_policy_set
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_policy_get"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_policy_get
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_sample"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_sample) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_etap_trace_thread"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_etap_trace_thread
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_assign"]
        [::std::mem::offset_of!(__ReplyUnion__thread_act_subsystem, Reply_thread_assign) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_assign_default"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_assign_default
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_assignment"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_assignment
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_policy"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_policy
    ) - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_get_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_set_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_set_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_swap_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_swap_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_convert_thread_state"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_convert_thread_state
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_get_exception_ports_info"] [:: std :: mem :: offset_of ! (__ReplyUnion__thread_act_subsystem , Reply_thread_get_exception_ports_info) - 0usize] ;
    ["Offset of field: __ReplyUnion__thread_act_subsystem::Reply_thread_adopt_exception_handler"][::std::mem::offset_of!(
        __ReplyUnion__thread_act_subsystem,
        Reply_thread_adopt_exception_handler
    )
        - 0usize];
};
extern "C" {
    pub fn vm_region(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_deallocate(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_protect(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_inherit(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_write(
        target_task: vm_map_t,
        address: vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_copy(
        target_task: vm_map_t,
        source_address: vm_address_t,
        size: vm_size_t,
        dest_address: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_overwrite(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: vm_address_t,
        outsize: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_msync(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_behavior_set(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: vm_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_machine_attribute(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut vm_size_t,
        offset: vm_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_page_query(
        target_map: vm_map_read_t,
        offset: vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_mapped_pages_info(
        task: vm_map_read_t,
        pages: *mut page_address_array_t,
        pagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info_64(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_64_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry_64(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mach_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_purgable_control(
        target_task: vm_map_t,
        address: vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_exec_lockdown(target_task: vm_map_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_t"][::std::mem::size_of::<__Request__vm_region_t>() - 48usize];
    ["Alignment of __Request__vm_region_t"]
        [::std::mem::align_of::<__Request__vm_region_t>() - 4usize];
    ["Offset of field: __Request__vm_region_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_t::flavor"]
        [::std::mem::offset_of!(__Request__vm_region_t, flavor) - 40usize];
    ["Offset of field: __Request__vm_region_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_allocate_t"]
        [::std::mem::size_of::<__Request__vm_allocate_t>() - 52usize];
    ["Alignment of __Request__vm_allocate_t"]
        [::std::mem::align_of::<__Request__vm_allocate_t>() - 4usize];
    ["Offset of field: __Request__vm_allocate_t::Head"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, Head) - 0usize];
    ["Offset of field: __Request__vm_allocate_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_allocate_t::address"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, address) - 32usize];
    ["Offset of field: __Request__vm_allocate_t::size"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, size) - 40usize];
    ["Offset of field: __Request__vm_allocate_t::flags"]
        [::std::mem::offset_of!(__Request__vm_allocate_t, flags) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_deallocate_t"]
        [::std::mem::size_of::<__Request__vm_deallocate_t>() - 48usize];
    ["Alignment of __Request__vm_deallocate_t"]
        [::std::mem::align_of::<__Request__vm_deallocate_t>() - 4usize];
    ["Offset of field: __Request__vm_deallocate_t::Head"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, Head) - 0usize];
    ["Offset of field: __Request__vm_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_deallocate_t::address"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, address) - 32usize];
    ["Offset of field: __Request__vm_deallocate_t::size"]
        [::std::mem::offset_of!(__Request__vm_deallocate_t, size) - 40usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_protect_t"][::std::mem::size_of::<__Request__vm_protect_t>() - 56usize];
    ["Alignment of __Request__vm_protect_t"]
        [::std::mem::align_of::<__Request__vm_protect_t>() - 4usize];
    ["Offset of field: __Request__vm_protect_t::Head"]
        [::std::mem::offset_of!(__Request__vm_protect_t, Head) - 0usize];
    ["Offset of field: __Request__vm_protect_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_protect_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_protect_t::address"]
        [::std::mem::offset_of!(__Request__vm_protect_t, address) - 32usize];
    ["Offset of field: __Request__vm_protect_t::size"]
        [::std::mem::offset_of!(__Request__vm_protect_t, size) - 40usize];
    ["Offset of field: __Request__vm_protect_t::set_maximum"]
        [::std::mem::offset_of!(__Request__vm_protect_t, set_maximum) - 48usize];
    ["Offset of field: __Request__vm_protect_t::new_protection"]
        [::std::mem::offset_of!(__Request__vm_protect_t, new_protection) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_inherit_t"][::std::mem::size_of::<__Request__vm_inherit_t>() - 52usize];
    ["Alignment of __Request__vm_inherit_t"]
        [::std::mem::align_of::<__Request__vm_inherit_t>() - 4usize];
    ["Offset of field: __Request__vm_inherit_t::Head"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, Head) - 0usize];
    ["Offset of field: __Request__vm_inherit_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_inherit_t::address"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, address) - 32usize];
    ["Offset of field: __Request__vm_inherit_t::size"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, size) - 40usize];
    ["Offset of field: __Request__vm_inherit_t::new_inheritance"]
        [::std::mem::offset_of!(__Request__vm_inherit_t, new_inheritance) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_read_t"][::std::mem::size_of::<__Request__vm_read_t>() - 48usize];
    ["Alignment of __Request__vm_read_t"][::std::mem::align_of::<__Request__vm_read_t>() - 4usize];
    ["Offset of field: __Request__vm_read_t::Head"]
        [::std::mem::offset_of!(__Request__vm_read_t, Head) - 0usize];
    ["Offset of field: __Request__vm_read_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_read_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_read_t::address"]
        [::std::mem::offset_of!(__Request__vm_read_t, address) - 32usize];
    ["Offset of field: __Request__vm_read_t::size"]
        [::std::mem::offset_of!(__Request__vm_read_t, size) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_read_list_t"]
        [::std::mem::size_of::<__Request__vm_read_list_t>() - 4132usize];
    ["Alignment of __Request__vm_read_list_t"]
        [::std::mem::align_of::<__Request__vm_read_list_t>() - 4usize];
    ["Offset of field: __Request__vm_read_list_t::Head"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, Head) - 0usize];
    ["Offset of field: __Request__vm_read_list_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_read_list_t::data_list"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, data_list) - 32usize];
    ["Offset of field: __Request__vm_read_list_t::count"]
        [::std::mem::offset_of!(__Request__vm_read_list_t, count) - 4128usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_write_t"][::std::mem::size_of::<__Request__vm_write_t>() - 64usize];
    ["Alignment of __Request__vm_write_t"]
        [::std::mem::align_of::<__Request__vm_write_t>() - 4usize];
    ["Offset of field: __Request__vm_write_t::Head"]
        [::std::mem::offset_of!(__Request__vm_write_t, Head) - 0usize];
    ["Offset of field: __Request__vm_write_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_write_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_write_t::data"]
        [::std::mem::offset_of!(__Request__vm_write_t, data) - 28usize];
    ["Offset of field: __Request__vm_write_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_write_t, NDR) - 44usize];
    ["Offset of field: __Request__vm_write_t::address"]
        [::std::mem::offset_of!(__Request__vm_write_t, address) - 52usize];
    ["Offset of field: __Request__vm_write_t::dataCnt"]
        [::std::mem::offset_of!(__Request__vm_write_t, dataCnt) - 60usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_copy_t"][::std::mem::size_of::<__Request__vm_copy_t>() - 56usize];
    ["Alignment of __Request__vm_copy_t"][::std::mem::align_of::<__Request__vm_copy_t>() - 4usize];
    ["Offset of field: __Request__vm_copy_t::Head"]
        [::std::mem::offset_of!(__Request__vm_copy_t, Head) - 0usize];
    ["Offset of field: __Request__vm_copy_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_copy_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_copy_t::source_address"]
        [::std::mem::offset_of!(__Request__vm_copy_t, source_address) - 32usize];
    ["Offset of field: __Request__vm_copy_t::size"]
        [::std::mem::offset_of!(__Request__vm_copy_t, size) - 40usize];
    ["Offset of field: __Request__vm_copy_t::dest_address"]
        [::std::mem::offset_of!(__Request__vm_copy_t, dest_address) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_read_overwrite_t"]
        [::std::mem::size_of::<__Request__vm_read_overwrite_t>() - 56usize];
    ["Alignment of __Request__vm_read_overwrite_t"]
        [::std::mem::align_of::<__Request__vm_read_overwrite_t>() - 4usize];
    ["Offset of field: __Request__vm_read_overwrite_t::Head"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, Head) - 0usize];
    ["Offset of field: __Request__vm_read_overwrite_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_read_overwrite_t::address"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, address) - 32usize];
    ["Offset of field: __Request__vm_read_overwrite_t::size"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, size) - 40usize];
    ["Offset of field: __Request__vm_read_overwrite_t::data"]
        [::std::mem::offset_of!(__Request__vm_read_overwrite_t, data) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_msync_t"][::std::mem::size_of::<__Request__vm_msync_t>() - 52usize];
    ["Alignment of __Request__vm_msync_t"]
        [::std::mem::align_of::<__Request__vm_msync_t>() - 4usize];
    ["Offset of field: __Request__vm_msync_t::Head"]
        [::std::mem::offset_of!(__Request__vm_msync_t, Head) - 0usize];
    ["Offset of field: __Request__vm_msync_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_msync_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_msync_t::address"]
        [::std::mem::offset_of!(__Request__vm_msync_t, address) - 32usize];
    ["Offset of field: __Request__vm_msync_t::size"]
        [::std::mem::offset_of!(__Request__vm_msync_t, size) - 40usize];
    ["Offset of field: __Request__vm_msync_t::sync_flags"]
        [::std::mem::offset_of!(__Request__vm_msync_t, sync_flags) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_behavior_set_t"]
        [::std::mem::size_of::<__Request__vm_behavior_set_t>() - 52usize];
    ["Alignment of __Request__vm_behavior_set_t"]
        [::std::mem::align_of::<__Request__vm_behavior_set_t>() - 4usize];
    ["Offset of field: __Request__vm_behavior_set_t::Head"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, Head) - 0usize];
    ["Offset of field: __Request__vm_behavior_set_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_behavior_set_t::address"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, address) - 32usize];
    ["Offset of field: __Request__vm_behavior_set_t::size"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, size) - 40usize];
    ["Offset of field: __Request__vm_behavior_set_t::new_behavior"]
        [::std::mem::offset_of!(__Request__vm_behavior_set_t, new_behavior) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_t"][::std::mem::size_of::<__Request__vm_map_t>() - 100usize];
    ["Alignment of __Request__vm_map_t"][::std::mem::align_of::<__Request__vm_map_t>() - 4usize];
    ["Offset of field: __Request__vm_map_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_t, Head) - 0usize];
    ["Offset of field: __Request__vm_map_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_map_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_map_t::object"]
        [::std::mem::offset_of!(__Request__vm_map_t, object) - 28usize];
    ["Offset of field: __Request__vm_map_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_map_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_map_t::address"]
        [::std::mem::offset_of!(__Request__vm_map_t, address) - 48usize];
    ["Offset of field: __Request__vm_map_t::size"]
        [::std::mem::offset_of!(__Request__vm_map_t, size) - 56usize];
    ["Offset of field: __Request__vm_map_t::mask"]
        [::std::mem::offset_of!(__Request__vm_map_t, mask) - 64usize];
    ["Offset of field: __Request__vm_map_t::flags"]
        [::std::mem::offset_of!(__Request__vm_map_t, flags) - 72usize];
    ["Offset of field: __Request__vm_map_t::offset"]
        [::std::mem::offset_of!(__Request__vm_map_t, offset) - 76usize];
    ["Offset of field: __Request__vm_map_t::copy"]
        [::std::mem::offset_of!(__Request__vm_map_t, copy) - 84usize];
    ["Offset of field: __Request__vm_map_t::cur_protection"]
        [::std::mem::offset_of!(__Request__vm_map_t, cur_protection) - 88usize];
    ["Offset of field: __Request__vm_map_t::max_protection"]
        [::std::mem::offset_of!(__Request__vm_map_t, max_protection) - 92usize];
    ["Offset of field: __Request__vm_map_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_map_t, inheritance) - 96usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_machine_attribute_t"]
        [::std::mem::size_of::<__Request__vm_machine_attribute_t>() - 56usize];
    ["Alignment of __Request__vm_machine_attribute_t"]
        [::std::mem::align_of::<__Request__vm_machine_attribute_t>() - 4usize];
    ["Offset of field: __Request__vm_machine_attribute_t::Head"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, Head) - 0usize];
    ["Offset of field: __Request__vm_machine_attribute_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_machine_attribute_t::address"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, address) - 32usize];
    ["Offset of field: __Request__vm_machine_attribute_t::size"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, size) - 40usize];
    ["Offset of field: __Request__vm_machine_attribute_t::attribute"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, attribute) - 48usize];
    ["Offset of field: __Request__vm_machine_attribute_t::value"]
        [::std::mem::offset_of!(__Request__vm_machine_attribute_t, value) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_remap_t"][::std::mem::size_of::<__Request__vm_remap_t>() - 92usize];
    ["Alignment of __Request__vm_remap_t"]
        [::std::mem::align_of::<__Request__vm_remap_t>() - 4usize];
    ["Offset of field: __Request__vm_remap_t::Head"]
        [::std::mem::offset_of!(__Request__vm_remap_t, Head) - 0usize];
    ["Offset of field: __Request__vm_remap_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_remap_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_remap_t::src_task"]
        [::std::mem::offset_of!(__Request__vm_remap_t, src_task) - 28usize];
    ["Offset of field: __Request__vm_remap_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_remap_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_remap_t::target_address"]
        [::std::mem::offset_of!(__Request__vm_remap_t, target_address) - 48usize];
    ["Offset of field: __Request__vm_remap_t::size"]
        [::std::mem::offset_of!(__Request__vm_remap_t, size) - 56usize];
    ["Offset of field: __Request__vm_remap_t::mask"]
        [::std::mem::offset_of!(__Request__vm_remap_t, mask) - 64usize];
    ["Offset of field: __Request__vm_remap_t::flags"]
        [::std::mem::offset_of!(__Request__vm_remap_t, flags) - 72usize];
    ["Offset of field: __Request__vm_remap_t::src_address"]
        [::std::mem::offset_of!(__Request__vm_remap_t, src_address) - 76usize];
    ["Offset of field: __Request__vm_remap_t::copy"]
        [::std::mem::offset_of!(__Request__vm_remap_t, copy) - 84usize];
    ["Offset of field: __Request__vm_remap_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_remap_t, inheritance) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_wire_t"][::std::mem::size_of::<__Request__task_wire_t>() - 36usize];
    ["Alignment of __Request__task_wire_t"]
        [::std::mem::align_of::<__Request__task_wire_t>() - 4usize];
    ["Offset of field: __Request__task_wire_t::Head"]
        [::std::mem::offset_of!(__Request__task_wire_t, Head) - 0usize];
    ["Offset of field: __Request__task_wire_t::NDR"]
        [::std::mem::offset_of!(__Request__task_wire_t, NDR) - 24usize];
    ["Offset of field: __Request__task_wire_t::must_wire"]
        [::std::mem::offset_of!(__Request__task_wire_t, must_wire) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_make_memory_entry_t"]
        [::std::mem::size_of::<__Request__mach_make_memory_entry_t>() - 68usize];
    ["Alignment of __Request__mach_make_memory_entry_t"]
        [::std::mem::align_of::<__Request__mach_make_memory_entry_t>() - 4usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::parent_entry"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, parent_entry) - 28usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::size"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, size) - 48usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::offset"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, offset) - 56usize];
    ["Offset of field: __Request__mach_make_memory_entry_t::permission"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_t, permission) - 64usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_page_query_t"]
        [::std::mem::size_of::<__Request__vm_map_page_query_t>() - 40usize];
    ["Alignment of __Request__vm_map_page_query_t"]
        [::std::mem::align_of::<__Request__vm_map_page_query_t>() - 4usize];
    ["Offset of field: __Request__vm_map_page_query_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_page_query_t, Head) - 0usize];
    ["Offset of field: __Request__vm_map_page_query_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_map_page_query_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_map_page_query_t::offset"]
        [::std::mem::offset_of!(__Request__vm_map_page_query_t, offset) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_vm_region_info_t"]
        [::std::mem::size_of::<__Request__mach_vm_region_info_t>() - 40usize];
    ["Alignment of __Request__mach_vm_region_info_t"]
        [::std::mem::align_of::<__Request__mach_vm_region_info_t>() - 4usize];
    ["Offset of field: __Request__mach_vm_region_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_t, Head) - 0usize];
    ["Offset of field: __Request__mach_vm_region_info_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_vm_region_info_t::address"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_t, address) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_mapped_pages_info_t"]
        [::std::mem::size_of::<__Request__vm_mapped_pages_info_t>() - 24usize];
    ["Alignment of __Request__vm_mapped_pages_info_t"]
        [::std::mem::align_of::<__Request__vm_mapped_pages_info_t>() - 4usize];
    ["Offset of field: __Request__vm_mapped_pages_info_t::Head"]
        [::std::mem::offset_of!(__Request__vm_mapped_pages_info_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_recurse_t"]
        [::std::mem::size_of::<__Request__vm_region_recurse_t>() - 48usize];
    ["Alignment of __Request__vm_region_recurse_t"]
        [::std::mem::align_of::<__Request__vm_region_recurse_t>() - 4usize];
    ["Offset of field: __Request__vm_region_recurse_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_recurse_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_recurse_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_recurse_t::nesting_depth"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, nesting_depth) - 40usize];
    ["Offset of field: __Request__vm_region_recurse_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_recurse_64_t"]
        [::std::mem::size_of::<__Request__vm_region_recurse_64_t>() - 48usize];
    ["Alignment of __Request__vm_region_recurse_64_t"]
        [::std::mem::align_of::<__Request__vm_region_recurse_64_t>() - 4usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::nesting_depth"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, nesting_depth) - 40usize];
    ["Offset of field: __Request__vm_region_recurse_64_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_recurse_64_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_vm_region_info_64_t"]
        [::std::mem::size_of::<__Request__mach_vm_region_info_64_t>() - 40usize];
    ["Alignment of __Request__mach_vm_region_info_64_t"]
        [::std::mem::align_of::<__Request__mach_vm_region_info_64_t>() - 4usize];
    ["Offset of field: __Request__mach_vm_region_info_64_t::Head"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_64_t, Head) - 0usize];
    ["Offset of field: __Request__mach_vm_region_info_64_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_64_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_vm_region_info_64_t::address"]
        [::std::mem::offset_of!(__Request__mach_vm_region_info_64_t, address) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_region_64_t"]
        [::std::mem::size_of::<__Request__vm_region_64_t>() - 48usize];
    ["Alignment of __Request__vm_region_64_t"]
        [::std::mem::align_of::<__Request__vm_region_64_t>() - 4usize];
    ["Offset of field: __Request__vm_region_64_t::Head"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, Head) - 0usize];
    ["Offset of field: __Request__vm_region_64_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_region_64_t::address"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, address) - 32usize];
    ["Offset of field: __Request__vm_region_64_t::flavor"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, flavor) - 40usize];
    ["Offset of field: __Request__vm_region_64_t::infoCnt"]
        [::std::mem::offset_of!(__Request__vm_region_64_t, infoCnt) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_make_memory_entry_64_t"]
        [::std::mem::size_of::<__Request__mach_make_memory_entry_64_t>() - 68usize];
    ["Alignment of __Request__mach_make_memory_entry_64_t"]
        [::std::mem::align_of::<__Request__mach_make_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::parent_entry"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, parent_entry) - 28usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::size"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, size) - 48usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::offset"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, offset) - 56usize];
    ["Offset of field: __Request__mach_make_memory_entry_64_t::permission"]
        [::std::mem::offset_of!(__Request__mach_make_memory_entry_64_t, permission) - 64usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_64_t"][::std::mem::size_of::<__Request__vm_map_64_t>() - 100usize];
    ["Alignment of __Request__vm_map_64_t"]
        [::std::mem::align_of::<__Request__vm_map_64_t>() - 4usize];
    ["Offset of field: __Request__vm_map_64_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, Head) - 0usize];
    ["Offset of field: __Request__vm_map_64_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_map_64_t::object"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, object) - 28usize];
    ["Offset of field: __Request__vm_map_64_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_map_64_t::address"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, address) - 48usize];
    ["Offset of field: __Request__vm_map_64_t::size"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, size) - 56usize];
    ["Offset of field: __Request__vm_map_64_t::mask"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, mask) - 64usize];
    ["Offset of field: __Request__vm_map_64_t::flags"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, flags) - 72usize];
    ["Offset of field: __Request__vm_map_64_t::offset"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, offset) - 76usize];
    ["Offset of field: __Request__vm_map_64_t::copy"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, copy) - 84usize];
    ["Offset of field: __Request__vm_map_64_t::cur_protection"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, cur_protection) - 88usize];
    ["Offset of field: __Request__vm_map_64_t::max_protection"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, max_protection) - 92usize];
    ["Offset of field: __Request__vm_map_64_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_map_64_t, inheritance) - 96usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_purgable_control_t"]
        [::std::mem::size_of::<__Request__vm_purgable_control_t>() - 48usize];
    ["Alignment of __Request__vm_purgable_control_t"]
        [::std::mem::align_of::<__Request__vm_purgable_control_t>() - 4usize];
    ["Offset of field: __Request__vm_purgable_control_t::Head"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, Head) - 0usize];
    ["Offset of field: __Request__vm_purgable_control_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, NDR) - 24usize];
    ["Offset of field: __Request__vm_purgable_control_t::address"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, address) - 32usize];
    ["Offset of field: __Request__vm_purgable_control_t::control"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, control) - 40usize];
    ["Offset of field: __Request__vm_purgable_control_t::state"]
        [::std::mem::offset_of!(__Request__vm_purgable_control_t, state) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_map_exec_lockdown_t"]
        [::std::mem::size_of::<__Request__vm_map_exec_lockdown_t>() - 24usize];
    ["Alignment of __Request__vm_map_exec_lockdown_t"]
        [::std::mem::align_of::<__Request__vm_map_exec_lockdown_t>() - 4usize];
    ["Offset of field: __Request__vm_map_exec_lockdown_t::Head"]
        [::std::mem::offset_of!(__Request__vm_map_exec_lockdown_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__vm_remap_new_t"]
        [::std::mem::size_of::<__Request__vm_remap_new_t>() - 100usize];
    ["Alignment of __Request__vm_remap_new_t"]
        [::std::mem::align_of::<__Request__vm_remap_new_t>() - 4usize];
    ["Offset of field: __Request__vm_remap_new_t::Head"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, Head) - 0usize];
    ["Offset of field: __Request__vm_remap_new_t::msgh_body"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, msgh_body) - 24usize];
    ["Offset of field: __Request__vm_remap_new_t::src_task"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, src_task) - 28usize];
    ["Offset of field: __Request__vm_remap_new_t::NDR"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, NDR) - 40usize];
    ["Offset of field: __Request__vm_remap_new_t::target_address"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, target_address) - 48usize];
    ["Offset of field: __Request__vm_remap_new_t::size"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, size) - 56usize];
    ["Offset of field: __Request__vm_remap_new_t::mask"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, mask) - 64usize];
    ["Offset of field: __Request__vm_remap_new_t::flags"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, flags) - 72usize];
    ["Offset of field: __Request__vm_remap_new_t::src_address"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, src_address) - 76usize];
    ["Offset of field: __Request__vm_remap_new_t::copy"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, copy) - 84usize];
    ["Offset of field: __Request__vm_remap_new_t::cur_protection"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, cur_protection) - 88usize];
    ["Offset of field: __Request__vm_remap_new_t::max_protection"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, max_protection) - 92usize];
    ["Offset of field: __Request__vm_remap_new_t::inheritance"]
        [::std::mem::offset_of!(__Request__vm_remap_new_t, inheritance) - 96usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    pub Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    pub Request_vm_remap_new: __Request__vm_remap_new_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__vm_map_subsystem"]
        [::std::mem::size_of::<__RequestUnion__vm_map_subsystem>() - 4132usize];
    ["Alignment of __RequestUnion__vm_map_subsystem"]
        [::std::mem::align_of::<__RequestUnion__vm_map_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_region) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_allocate"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_allocate) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_deallocate"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_deallocate) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_protect"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_protect) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_inherit"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_inherit) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_read"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_read) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_read_list"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_read_list) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_write"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_write) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_copy"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_copy) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_read_overwrite"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_read_overwrite
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_msync"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_msync) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_behavior_set"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_behavior_set
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_map) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_machine_attribute"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_machine_attribute
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_remap"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_remap) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_task_wire"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_task_wire) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_make_memory_entry"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_make_memory_entry
    )
        - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map_page_query"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_map_page_query
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_vm_region_info"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_vm_region_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_mapped_pages_info"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_mapped_pages_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region_recurse"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_region_recurse
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region_recurse_64"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_region_recurse_64
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_vm_region_info_64"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_vm_region_info_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_region_64"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_region_64) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_mach_make_memory_entry_64"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_mach_make_memory_entry_64
    )
        - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map_64"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_map_64) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_purgable_control"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_purgable_control
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_map_exec_lockdown"][::std::mem::offset_of!(
        __RequestUnion__vm_map_subsystem,
        Request_vm_map_exec_lockdown
    ) - 0usize];
    ["Offset of field: __RequestUnion__vm_map_subsystem::Request_vm_remap_new"]
        [::std::mem::offset_of!(__RequestUnion__vm_map_subsystem, Request_vm_remap_new) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_t"][::std::mem::size_of::<__Reply__vm_region_t>() - 108usize];
    ["Alignment of __Reply__vm_region_t"][::std::mem::align_of::<__Reply__vm_region_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_region_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_region_t::object_name"]
        [::std::mem::offset_of!(__Reply__vm_region_t, object_name) - 28usize];
    ["Offset of field: __Reply__vm_region_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_t, NDR) - 40usize];
    ["Offset of field: __Reply__vm_region_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_t, address) - 48usize];
    ["Offset of field: __Reply__vm_region_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_t, size) - 56usize];
    ["Offset of field: __Reply__vm_region_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_t, infoCnt) - 64usize];
    ["Offset of field: __Reply__vm_region_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_t, info) - 68usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_allocate_t"][::std::mem::size_of::<__Reply__vm_allocate_t>() - 44usize];
    ["Alignment of __Reply__vm_allocate_t"]
        [::std::mem::align_of::<__Reply__vm_allocate_t>() - 4usize];
    ["Offset of field: __Reply__vm_allocate_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_allocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_allocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_allocate_t::address"]
        [::std::mem::offset_of!(__Reply__vm_allocate_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_deallocate_t"]
        [::std::mem::size_of::<__Reply__vm_deallocate_t>() - 36usize];
    ["Alignment of __Reply__vm_deallocate_t"]
        [::std::mem::align_of::<__Reply__vm_deallocate_t>() - 4usize];
    ["Offset of field: __Reply__vm_deallocate_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_deallocate_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_deallocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_deallocate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_protect_t"][::std::mem::size_of::<__Reply__vm_protect_t>() - 36usize];
    ["Alignment of __Reply__vm_protect_t"]
        [::std::mem::align_of::<__Reply__vm_protect_t>() - 4usize];
    ["Offset of field: __Reply__vm_protect_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_protect_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_protect_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_protect_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_protect_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_protect_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_inherit_t"][::std::mem::size_of::<__Reply__vm_inherit_t>() - 36usize];
    ["Alignment of __Reply__vm_inherit_t"]
        [::std::mem::align_of::<__Reply__vm_inherit_t>() - 4usize];
    ["Offset of field: __Reply__vm_inherit_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_inherit_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_inherit_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_inherit_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_inherit_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_inherit_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_read_t"][::std::mem::size_of::<__Reply__vm_read_t>() - 56usize];
    ["Alignment of __Reply__vm_read_t"][::std::mem::align_of::<__Reply__vm_read_t>() - 4usize];
    ["Offset of field: __Reply__vm_read_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_read_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_read_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_read_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_read_t::data"]
        [::std::mem::offset_of!(__Reply__vm_read_t, data) - 28usize];
    ["Offset of field: __Reply__vm_read_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_read_t, NDR) - 44usize];
    ["Offset of field: __Reply__vm_read_t::dataCnt"]
        [::std::mem::offset_of!(__Reply__vm_read_t, dataCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_read_list_t"]
        [::std::mem::size_of::<__Reply__vm_read_list_t>() - 4132usize];
    ["Alignment of __Reply__vm_read_list_t"]
        [::std::mem::align_of::<__Reply__vm_read_list_t>() - 4usize];
    ["Offset of field: __Reply__vm_read_list_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_read_list_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_read_list_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_read_list_t::data_list"]
        [::std::mem::offset_of!(__Reply__vm_read_list_t, data_list) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_write_t"][::std::mem::size_of::<__Reply__vm_write_t>() - 36usize];
    ["Alignment of __Reply__vm_write_t"][::std::mem::align_of::<__Reply__vm_write_t>() - 4usize];
    ["Offset of field: __Reply__vm_write_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_write_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_write_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_write_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_write_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_write_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_copy_t"][::std::mem::size_of::<__Reply__vm_copy_t>() - 36usize];
    ["Alignment of __Reply__vm_copy_t"][::std::mem::align_of::<__Reply__vm_copy_t>() - 4usize];
    ["Offset of field: __Reply__vm_copy_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_copy_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_copy_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_copy_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_copy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_copy_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_read_overwrite_t"]
        [::std::mem::size_of::<__Reply__vm_read_overwrite_t>() - 44usize];
    ["Alignment of __Reply__vm_read_overwrite_t"]
        [::std::mem::align_of::<__Reply__vm_read_overwrite_t>() - 4usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_read_overwrite_t::outsize"]
        [::std::mem::offset_of!(__Reply__vm_read_overwrite_t, outsize) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_msync_t"][::std::mem::size_of::<__Reply__vm_msync_t>() - 36usize];
    ["Alignment of __Reply__vm_msync_t"][::std::mem::align_of::<__Reply__vm_msync_t>() - 4usize];
    ["Offset of field: __Reply__vm_msync_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_msync_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_msync_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_msync_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_msync_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_msync_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_behavior_set_t"]
        [::std::mem::size_of::<__Reply__vm_behavior_set_t>() - 36usize];
    ["Alignment of __Reply__vm_behavior_set_t"]
        [::std::mem::align_of::<__Reply__vm_behavior_set_t>() - 4usize];
    ["Offset of field: __Reply__vm_behavior_set_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_behavior_set_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_behavior_set_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_behavior_set_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_behavior_set_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_behavior_set_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_t"][::std::mem::size_of::<__Reply__vm_map_t>() - 44usize];
    ["Alignment of __Reply__vm_map_t"][::std::mem::align_of::<__Reply__vm_map_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_map_t::address"]
        [::std::mem::offset_of!(__Reply__vm_map_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_machine_attribute_t"]
        [::std::mem::size_of::<__Reply__vm_machine_attribute_t>() - 40usize];
    ["Alignment of __Reply__vm_machine_attribute_t"]
        [::std::mem::align_of::<__Reply__vm_machine_attribute_t>() - 4usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_machine_attribute_t::value"]
        [::std::mem::offset_of!(__Reply__vm_machine_attribute_t, value) - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_remap_t"][::std::mem::size_of::<__Reply__vm_remap_t>() - 52usize];
    ["Alignment of __Reply__vm_remap_t"][::std::mem::align_of::<__Reply__vm_remap_t>() - 4usize];
    ["Offset of field: __Reply__vm_remap_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_remap_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_remap_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_remap_t::target_address"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, target_address) - 36usize];
    ["Offset of field: __Reply__vm_remap_t::cur_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, cur_protection) - 44usize];
    ["Offset of field: __Reply__vm_remap_t::max_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_t, max_protection) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_wire_t"][::std::mem::size_of::<__Reply__task_wire_t>() - 36usize];
    ["Alignment of __Reply__task_wire_t"][::std::mem::align_of::<__Reply__task_wire_t>() - 4usize];
    ["Offset of field: __Reply__task_wire_t::Head"]
        [::std::mem::offset_of!(__Reply__task_wire_t, Head) - 0usize];
    ["Offset of field: __Reply__task_wire_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_wire_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_wire_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_wire_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_make_memory_entry_t"]
        [::std::mem::size_of::<__Reply__mach_make_memory_entry_t>() - 56usize];
    ["Alignment of __Reply__mach_make_memory_entry_t"]
        [::std::mem::align_of::<__Reply__mach_make_memory_entry_t>() - 4usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::object_handle"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, object_handle) - 28usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, NDR) - 40usize];
    ["Offset of field: __Reply__mach_make_memory_entry_t::size"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_t, size) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_page_query_t"]
        [::std::mem::size_of::<__Reply__vm_map_page_query_t>() - 44usize];
    ["Alignment of __Reply__vm_map_page_query_t"]
        [::std::mem::align_of::<__Reply__vm_map_page_query_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_page_query_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_page_query_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_page_query_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_map_page_query_t::disposition"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, disposition) - 36usize];
    ["Offset of field: __Reply__vm_map_page_query_t::ref_count"]
        [::std::mem::offset_of!(__Reply__vm_map_page_query_t, ref_count) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_vm_region_info_t"]
        [::std::mem::size_of::<__Reply__mach_vm_region_info_t>() - 96usize];
    ["Alignment of __Reply__mach_vm_region_info_t"]
        [::std::mem::align_of::<__Reply__mach_vm_region_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::objects"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, objects) - 28usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::region"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, region) - 52usize];
    ["Offset of field: __Reply__mach_vm_region_info_t::objectsCnt"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_t, objectsCnt) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_mapped_pages_info_t"]
        [::std::mem::size_of::<__Reply__vm_mapped_pages_info_t>() - 56usize];
    ["Alignment of __Reply__vm_mapped_pages_info_t"]
        [::std::mem::align_of::<__Reply__vm_mapped_pages_info_t>() - 4usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::pages"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, pages) - 28usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__vm_mapped_pages_info_t::pagesCnt"]
        [::std::mem::offset_of!(__Reply__vm_mapped_pages_info_t, pagesCnt) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_recurse_t"]
        [::std::mem::size_of::<__Reply__vm_region_recurse_t>() - 136usize];
    ["Alignment of __Reply__vm_region_recurse_t"]
        [::std::mem::align_of::<__Reply__vm_region_recurse_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_recurse_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_recurse_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_region_recurse_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_region_recurse_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, address) - 36usize];
    ["Offset of field: __Reply__vm_region_recurse_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, size) - 44usize];
    ["Offset of field: __Reply__vm_region_recurse_t::nesting_depth"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, nesting_depth) - 52usize];
    ["Offset of field: __Reply__vm_region_recurse_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, infoCnt) - 56usize];
    ["Offset of field: __Reply__vm_region_recurse_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_t, info) - 60usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_recurse_64_t"]
        [::std::mem::size_of::<__Reply__vm_region_recurse_64_t>() - 136usize];
    ["Alignment of __Reply__vm_region_recurse_64_t"]
        [::std::mem::align_of::<__Reply__vm_region_recurse_64_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, address) - 36usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, size) - 44usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::nesting_depth"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, nesting_depth) - 52usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, infoCnt) - 56usize];
    ["Offset of field: __Reply__vm_region_recurse_64_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_recurse_64_t, info) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_vm_region_info_64_t"]
        [::std::mem::size_of::<__Reply__mach_vm_region_info_64_t>() - 100usize];
    ["Alignment of __Reply__mach_vm_region_info_64_t"]
        [::std::mem::align_of::<__Reply__mach_vm_region_info_64_t>() - 4usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::objects"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, objects) - 28usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::region"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, region) - 52usize];
    ["Offset of field: __Reply__mach_vm_region_info_64_t::objectsCnt"]
        [::std::mem::offset_of!(__Reply__mach_vm_region_info_64_t, objectsCnt) - 96usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_region_64_t"]
        [::std::mem::size_of::<__Reply__vm_region_64_t>() - 108usize];
    ["Alignment of __Reply__vm_region_64_t"]
        [::std::mem::align_of::<__Reply__vm_region_64_t>() - 4usize];
    ["Offset of field: __Reply__vm_region_64_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_region_64_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__vm_region_64_t::object_name"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, object_name) - 28usize];
    ["Offset of field: __Reply__vm_region_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, NDR) - 40usize];
    ["Offset of field: __Reply__vm_region_64_t::address"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, address) - 48usize];
    ["Offset of field: __Reply__vm_region_64_t::size"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, size) - 56usize];
    ["Offset of field: __Reply__vm_region_64_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, infoCnt) - 64usize];
    ["Offset of field: __Reply__vm_region_64_t::info"]
        [::std::mem::offset_of!(__Reply__vm_region_64_t, info) - 68usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_make_memory_entry_64_t"]
        [::std::mem::size_of::<__Reply__mach_make_memory_entry_64_t>() - 56usize];
    ["Alignment of __Reply__mach_make_memory_entry_64_t"]
        [::std::mem::align_of::<__Reply__mach_make_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::object_handle"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, object_handle) - 28usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, NDR) - 40usize];
    ["Offset of field: __Reply__mach_make_memory_entry_64_t::size"]
        [::std::mem::offset_of!(__Reply__mach_make_memory_entry_64_t, size) - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_64_t"][::std::mem::size_of::<__Reply__vm_map_64_t>() - 44usize];
    ["Alignment of __Reply__vm_map_64_t"][::std::mem::align_of::<__Reply__vm_map_64_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_64_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_64_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_map_64_t::address"]
        [::std::mem::offset_of!(__Reply__vm_map_64_t, address) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_purgable_control_t"]
        [::std::mem::size_of::<__Reply__vm_purgable_control_t>() - 40usize];
    ["Alignment of __Reply__vm_purgable_control_t"]
        [::std::mem::align_of::<__Reply__vm_purgable_control_t>() - 4usize];
    ["Offset of field: __Reply__vm_purgable_control_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_purgable_control_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_purgable_control_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_purgable_control_t::state"]
        [::std::mem::offset_of!(__Reply__vm_purgable_control_t, state) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_map_exec_lockdown_t"]
        [::std::mem::size_of::<__Reply__vm_map_exec_lockdown_t>() - 36usize];
    ["Alignment of __Reply__vm_map_exec_lockdown_t"]
        [::std::mem::align_of::<__Reply__vm_map_exec_lockdown_t>() - 4usize];
    ["Offset of field: __Reply__vm_map_exec_lockdown_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_map_exec_lockdown_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_map_exec_lockdown_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_map_exec_lockdown_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_map_exec_lockdown_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_map_exec_lockdown_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__vm_remap_new_t"][::std::mem::size_of::<__Reply__vm_remap_new_t>() - 52usize];
    ["Alignment of __Reply__vm_remap_new_t"]
        [::std::mem::align_of::<__Reply__vm_remap_new_t>() - 4usize];
    ["Offset of field: __Reply__vm_remap_new_t::Head"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, Head) - 0usize];
    ["Offset of field: __Reply__vm_remap_new_t::NDR"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, NDR) - 24usize];
    ["Offset of field: __Reply__vm_remap_new_t::RetCode"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, RetCode) - 32usize];
    ["Offset of field: __Reply__vm_remap_new_t::target_address"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, target_address) - 36usize];
    ["Offset of field: __Reply__vm_remap_new_t::cur_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, cur_protection) - 44usize];
    ["Offset of field: __Reply__vm_remap_new_t::max_protection"]
        [::std::mem::offset_of!(__Reply__vm_remap_new_t, max_protection) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    pub Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    pub Reply_vm_remap_new: __Reply__vm_remap_new_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__vm_map_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__vm_map_subsystem>() - 4132usize];
    ["Alignment of __ReplyUnion__vm_map_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__vm_map_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_region) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_allocate"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_allocate) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_deallocate"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_deallocate) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_protect"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_protect) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_inherit"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_inherit) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_read"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_read) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_read_list"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_read_list) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_write"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_write) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_copy"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_copy) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_read_overwrite"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_read_overwrite) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_msync"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_msync) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_behavior_set"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_behavior_set) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_map) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_machine_attribute"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_machine_attribute
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_remap"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_remap) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_task_wire"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_task_wire) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_make_memory_entry"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_make_memory_entry
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map_page_query"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_map_page_query) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_vm_region_info"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_vm_region_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_mapped_pages_info"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_mapped_pages_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region_recurse"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_region_recurse) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region_recurse_64"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_region_recurse_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_vm_region_info_64"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_vm_region_info_64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_region_64"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_region_64) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_mach_make_memory_entry_64"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_mach_make_memory_entry_64
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map_64"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_map_64) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_purgable_control"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_purgable_control
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_map_exec_lockdown"][::std::mem::offset_of!(
        __ReplyUnion__vm_map_subsystem,
        Reply_vm_map_exec_lockdown
    ) - 0usize];
    ["Offset of field: __ReplyUnion__vm_map_subsystem::Reply_vm_remap_new"]
        [::std::mem::offset_of!(__ReplyUnion__vm_map_subsystem, Reply_vm_remap_new) - 0usize];
};
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_names_t"]
        [::std::mem::size_of::<__Request__mach_port_names_t>() - 24usize];
    ["Alignment of __Request__mach_port_names_t"]
        [::std::mem::align_of::<__Request__mach_port_names_t>() - 4usize];
    ["Offset of field: __Request__mach_port_names_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_names_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_type_t"]
        [::std::mem::size_of::<__Request__mach_port_type_t>() - 36usize];
    ["Alignment of __Request__mach_port_type_t"]
        [::std::mem::align_of::<__Request__mach_port_type_t>() - 4usize];
    ["Offset of field: __Request__mach_port_type_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_type_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_type_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_type_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_type_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_type_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_rename_t"]
        [::std::mem::size_of::<__Request__mach_port_rename_t>() - 40usize];
    ["Alignment of __Request__mach_port_rename_t"]
        [::std::mem::align_of::<__Request__mach_port_rename_t>() - 4usize];
    ["Offset of field: __Request__mach_port_rename_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_rename_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_rename_t::old_name"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, old_name) - 32usize];
    ["Offset of field: __Request__mach_port_rename_t::new_name"]
        [::std::mem::offset_of!(__Request__mach_port_rename_t, new_name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_name_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_name_t>() - 40usize];
    ["Alignment of __Request__mach_port_allocate_name_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_name_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, right) - 32usize];
    ["Offset of field: __Request__mach_port_allocate_name_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_name_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_t>() - 36usize];
    ["Alignment of __Request__mach_port_allocate_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_t, right) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_destroy_t"]
        [::std::mem::size_of::<__Request__mach_port_destroy_t>() - 36usize];
    ["Alignment of __Request__mach_port_destroy_t"]
        [::std::mem::align_of::<__Request__mach_port_destroy_t>() - 4usize];
    ["Offset of field: __Request__mach_port_destroy_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_destroy_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_destroy_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_destroy_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_destroy_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_destroy_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_deallocate_t"]
        [::std::mem::size_of::<__Request__mach_port_deallocate_t>() - 36usize];
    ["Alignment of __Request__mach_port_deallocate_t"]
        [::std::mem::align_of::<__Request__mach_port_deallocate_t>() - 4usize];
    ["Offset of field: __Request__mach_port_deallocate_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_deallocate_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_deallocate_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_deallocate_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_refs_t"]
        [::std::mem::size_of::<__Request__mach_port_get_refs_t>() - 40usize];
    ["Alignment of __Request__mach_port_get_refs_t"]
        [::std::mem::align_of::<__Request__mach_port_get_refs_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_refs_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_refs_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_refs_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_get_refs_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_get_refs_t, right) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_mod_refs_t"]
        [::std::mem::size_of::<__Request__mach_port_mod_refs_t>() - 44usize];
    ["Alignment of __Request__mach_port_mod_refs_t"]
        [::std::mem::align_of::<__Request__mach_port_mod_refs_t>() - 4usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, right) - 36usize];
    ["Offset of field: __Request__mach_port_mod_refs_t::delta"]
        [::std::mem::offset_of!(__Request__mach_port_mod_refs_t, delta) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_peek_t"]
        [::std::mem::size_of::<__Request__mach_port_peek_t>() - 48usize];
    ["Alignment of __Request__mach_port_peek_t"]
        [::std::mem::align_of::<__Request__mach_port_peek_t>() - 4usize];
    ["Offset of field: __Request__mach_port_peek_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_peek_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_peek_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_peek_t::trailer_type"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, trailer_type) - 36usize];
    ["Offset of field: __Request__mach_port_peek_t::request_seqnop"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, request_seqnop) - 40usize];
    ["Offset of field: __Request__mach_port_peek_t::trailer_infopCnt"]
        [::std::mem::offset_of!(__Request__mach_port_peek_t, trailer_infopCnt) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_mscount_t"]
        [::std::mem::size_of::<__Request__mach_port_set_mscount_t>() - 40usize];
    ["Alignment of __Request__mach_port_set_mscount_t"]
        [::std::mem::align_of::<__Request__mach_port_set_mscount_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_mscount_t::mscount"]
        [::std::mem::offset_of!(__Request__mach_port_set_mscount_t, mscount) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_set_status_t"]
        [::std::mem::size_of::<__Request__mach_port_get_set_status_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_set_status_t"]
        [::std::mem::align_of::<__Request__mach_port_get_set_status_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_set_status_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_set_status_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_set_status_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_set_status_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_set_status_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_set_status_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_move_member_t"]
        [::std::mem::size_of::<__Request__mach_port_move_member_t>() - 40usize];
    ["Alignment of __Request__mach_port_move_member_t"]
        [::std::mem::align_of::<__Request__mach_port_move_member_t>() - 4usize];
    ["Offset of field: __Request__mach_port_move_member_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_move_member_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_move_member_t::member"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, member) - 32usize];
    ["Offset of field: __Request__mach_port_move_member_t::after"]
        [::std::mem::offset_of!(__Request__mach_port_move_member_t, after) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_request_notification_t"]
        [::std::mem::size_of::<__Request__mach_port_request_notification_t>() - 60usize];
    ["Alignment of __Request__mach_port_request_notification_t"]
        [::std::mem::align_of::<__Request__mach_port_request_notification_t>() - 4usize];
    ["Offset of field: __Request__mach_port_request_notification_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_request_notification_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_request_notification_t::notify"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, notify) - 28usize];
    ["Offset of field: __Request__mach_port_request_notification_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_port_request_notification_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, name) - 48usize];
    ["Offset of field: __Request__mach_port_request_notification_t::msgid"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, msgid) - 52usize];
    ["Offset of field: __Request__mach_port_request_notification_t::sync"]
        [::std::mem::offset_of!(__Request__mach_port_request_notification_t, sync) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_insert_right_t"]
        [::std::mem::size_of::<__Request__mach_port_insert_right_t>() - 52usize];
    ["Alignment of __Request__mach_port_insert_right_t"]
        [::std::mem::align_of::<__Request__mach_port_insert_right_t>() - 4usize];
    ["Offset of field: __Request__mach_port_insert_right_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_insert_right_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_insert_right_t::poly"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, poly) - 28usize];
    ["Offset of field: __Request__mach_port_insert_right_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_port_insert_right_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_insert_right_t, name) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_extract_right_t"]
        [::std::mem::size_of::<__Request__mach_port_extract_right_t>() - 40usize];
    ["Alignment of __Request__mach_port_extract_right_t"]
        [::std::mem::align_of::<__Request__mach_port_extract_right_t>() - 4usize];
    ["Offset of field: __Request__mach_port_extract_right_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_extract_right_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_extract_right_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_extract_right_t::msgt_name"]
        [::std::mem::offset_of!(__Request__mach_port_extract_right_t, msgt_name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_seqno_t"]
        [::std::mem::size_of::<__Request__mach_port_set_seqno_t>() - 40usize];
    ["Alignment of __Request__mach_port_set_seqno_t"]
        [::std::mem::align_of::<__Request__mach_port_set_seqno_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_seqno_t::seqno"]
        [::std::mem::offset_of!(__Request__mach_port_set_seqno_t, seqno) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_attributes_t"]
        [::std::mem::size_of::<__Request__mach_port_get_attributes_t>() - 44usize];
    ["Alignment of __Request__mach_port_get_attributes_t"]
        [::std::mem::align_of::<__Request__mach_port_get_attributes_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, flavor) - 36usize];
    ["Offset of field: __Request__mach_port_get_attributes_t::port_info_outCnt"]
        [::std::mem::offset_of!(__Request__mach_port_get_attributes_t, port_info_outCnt) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_attributes_t"]
        [::std::mem::size_of::<__Request__mach_port_set_attributes_t>() - 112usize];
    ["Alignment of __Request__mach_port_set_attributes_t"]
        [::std::mem::align_of::<__Request__mach_port_set_attributes_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, flavor) - 36usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::port_infoCnt"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, port_infoCnt) - 40usize];
    ["Offset of field: __Request__mach_port_set_attributes_t::port_info"]
        [::std::mem::offset_of!(__Request__mach_port_set_attributes_t, port_info) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_qos_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_qos_t>() - 44usize];
    ["Alignment of __Request__mach_port_allocate_qos_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_qos_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, right) - 32usize];
    ["Offset of field: __Request__mach_port_allocate_qos_t::qos"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_qos_t, qos) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_allocate_full_t"]
        [::std::mem::size_of::<__Request__mach_port_allocate_full_t>() - 64usize];
    ["Alignment of __Request__mach_port_allocate_full_t"]
        [::std::mem::align_of::<__Request__mach_port_allocate_full_t>() - 4usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::proto"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, proto) - 28usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::right"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, right) - 48usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::qos"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, qos) - 52usize];
    ["Offset of field: __Request__mach_port_allocate_full_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_allocate_full_t, name) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__task_set_port_space_t"]
        [::std::mem::size_of::<__Request__task_set_port_space_t>() - 36usize];
    ["Alignment of __Request__task_set_port_space_t"]
        [::std::mem::align_of::<__Request__task_set_port_space_t>() - 4usize];
    ["Offset of field: __Request__task_set_port_space_t::Head"]
        [::std::mem::offset_of!(__Request__task_set_port_space_t, Head) - 0usize];
    ["Offset of field: __Request__task_set_port_space_t::NDR"]
        [::std::mem::offset_of!(__Request__task_set_port_space_t, NDR) - 24usize];
    ["Offset of field: __Request__task_set_port_space_t::table_entries"]
        [::std::mem::offset_of!(__Request__task_set_port_space_t, table_entries) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_srights_t"]
        [::std::mem::size_of::<__Request__mach_port_get_srights_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_srights_t"]
        [::std::mem::align_of::<__Request__mach_port_get_srights_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_srights_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_srights_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_srights_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_srights_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_srights_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_srights_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_space_info_t"]
        [::std::mem::size_of::<__Request__mach_port_space_info_t>() - 24usize];
    ["Alignment of __Request__mach_port_space_info_t"]
        [::std::mem::align_of::<__Request__mach_port_space_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_space_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_space_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_dnrequest_info_t"]
        [::std::mem::size_of::<__Request__mach_port_dnrequest_info_t>() - 36usize];
    ["Alignment of __Request__mach_port_dnrequest_info_t"]
        [::std::mem::align_of::<__Request__mach_port_dnrequest_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_dnrequest_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_dnrequest_info_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_dnrequest_info_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_dnrequest_info_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_dnrequest_info_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_dnrequest_info_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_kernel_object_t"]
        [::std::mem::size_of::<__Request__mach_port_kernel_object_t>() - 36usize];
    ["Alignment of __Request__mach_port_kernel_object_t"]
        [::std::mem::align_of::<__Request__mach_port_kernel_object_t>() - 4usize];
    ["Offset of field: __Request__mach_port_kernel_object_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_kernel_object_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_kernel_object_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_kernel_object_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_kernel_object_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_kernel_object_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_insert_member_t"]
        [::std::mem::size_of::<__Request__mach_port_insert_member_t>() - 40usize];
    ["Alignment of __Request__mach_port_insert_member_t"]
        [::std::mem::align_of::<__Request__mach_port_insert_member_t>() - 4usize];
    ["Offset of field: __Request__mach_port_insert_member_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_insert_member_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_insert_member_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_insert_member_t::pset"]
        [::std::mem::offset_of!(__Request__mach_port_insert_member_t, pset) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_extract_member_t"]
        [::std::mem::size_of::<__Request__mach_port_extract_member_t>() - 40usize];
    ["Alignment of __Request__mach_port_extract_member_t"]
        [::std::mem::align_of::<__Request__mach_port_extract_member_t>() - 4usize];
    ["Offset of field: __Request__mach_port_extract_member_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_extract_member_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_extract_member_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_extract_member_t::pset"]
        [::std::mem::offset_of!(__Request__mach_port_extract_member_t, pset) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_context_t"]
        [::std::mem::size_of::<__Request__mach_port_get_context_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_context_t"]
        [::std::mem::align_of::<__Request__mach_port_get_context_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_context_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_context_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_context_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_context_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_context_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_context_t, name) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_set_context_t"]
        [::std::mem::size_of::<__Request__mach_port_set_context_t>() - 44usize];
    ["Alignment of __Request__mach_port_set_context_t"]
        [::std::mem::align_of::<__Request__mach_port_set_context_t>() - 4usize];
    ["Offset of field: __Request__mach_port_set_context_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_set_context_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_set_context_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_set_context_t::context"]
        [::std::mem::offset_of!(__Request__mach_port_set_context_t, context) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_kobject_t"]
        [::std::mem::size_of::<__Request__mach_port_kobject_t>() - 36usize];
    ["Alignment of __Request__mach_port_kobject_t"]
        [::std::mem::align_of::<__Request__mach_port_kobject_t>() - 4usize];
    ["Offset of field: __Request__mach_port_kobject_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_kobject_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_kobject_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_t, name) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_construct_t"]
        [::std::mem::size_of::<__Request__mach_port_construct_t>() - 60usize];
    ["Alignment of __Request__mach_port_construct_t"]
        [::std::mem::align_of::<__Request__mach_port_construct_t>() - 4usize];
    ["Offset of field: __Request__mach_port_construct_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_construct_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_port_construct_t::options"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, options) - 28usize];
    ["Offset of field: __Request__mach_port_construct_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, NDR) - 44usize];
    ["Offset of field: __Request__mach_port_construct_t::context"]
        [::std::mem::offset_of!(__Request__mach_port_construct_t, context) - 52usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_destruct_t"]
        [::std::mem::size_of::<__Request__mach_port_destruct_t>() - 48usize];
    ["Alignment of __Request__mach_port_destruct_t"]
        [::std::mem::align_of::<__Request__mach_port_destruct_t>() - 4usize];
    ["Offset of field: __Request__mach_port_destruct_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_destruct_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_destruct_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_destruct_t::srdelta"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, srdelta) - 36usize];
    ["Offset of field: __Request__mach_port_destruct_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_destruct_t, guard) - 40usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_guard_t"]
        [::std::mem::size_of::<__Request__mach_port_guard_t>() - 48usize];
    ["Alignment of __Request__mach_port_guard_t"]
        [::std::mem::align_of::<__Request__mach_port_guard_t>() - 4usize];
    ["Offset of field: __Request__mach_port_guard_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_guard_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_guard_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_guard_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, guard) - 36usize];
    ["Offset of field: __Request__mach_port_guard_t::strict"]
        [::std::mem::offset_of!(__Request__mach_port_guard_t, strict) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_unguard_t"]
        [::std::mem::size_of::<__Request__mach_port_unguard_t>() - 44usize];
    ["Alignment of __Request__mach_port_unguard_t"]
        [::std::mem::align_of::<__Request__mach_port_unguard_t>() - 4usize];
    ["Offset of field: __Request__mach_port_unguard_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_unguard_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_unguard_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_unguard_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_unguard_t, guard) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_space_basic_info_t"]
        [::std::mem::size_of::<__Request__mach_port_space_basic_info_t>() - 24usize];
    ["Alignment of __Request__mach_port_space_basic_info_t"]
        [::std::mem::align_of::<__Request__mach_port_space_basic_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_space_basic_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_space_basic_info_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_guard_with_flags_t"]
        [::std::mem::size_of::<__Request__mach_port_guard_with_flags_t>() - 52usize];
    ["Alignment of __Request__mach_port_guard_with_flags_t"]
        [::std::mem::align_of::<__Request__mach_port_guard_with_flags_t>() - 4usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::guard"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, guard) - 36usize];
    ["Offset of field: __Request__mach_port_guard_with_flags_t::flags"]
        [::std::mem::offset_of!(__Request__mach_port_guard_with_flags_t, flags) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_swap_guard_t"]
        [::std::mem::size_of::<__Request__mach_port_swap_guard_t>() - 52usize];
    ["Alignment of __Request__mach_port_swap_guard_t"]
        [::std::mem::align_of::<__Request__mach_port_swap_guard_t>() - 4usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::old_guard"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, old_guard) - 36usize];
    ["Offset of field: __Request__mach_port_swap_guard_t::new_guard"]
        [::std::mem::offset_of!(__Request__mach_port_swap_guard_t, new_guard) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_kobject_description_t"]
        [::std::mem::size_of::<__Request__mach_port_kobject_description_t>() - 36usize];
    ["Alignment of __Request__mach_port_kobject_description_t"]
        [::std::mem::align_of::<__Request__mach_port_kobject_description_t>() - 4usize];
    ["Offset of field: __Request__mach_port_kobject_description_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_description_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_kobject_description_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_description_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_kobject_description_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_kobject_description_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_is_connection_for_service_t"]
        [::std::mem::size_of::<__Request__mach_port_is_connection_for_service_t>() - 40usize];
    ["Alignment of __Request__mach_port_is_connection_for_service_t"]
        [::std::mem::align_of::<__Request__mach_port_is_connection_for_service_t>() - 4usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_is_connection_for_service_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_is_connection_for_service_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::connection_port"][::std::mem::offset_of!(
        __Request__mach_port_is_connection_for_service_t,
        connection_port
    )
        - 32usize];
    ["Offset of field: __Request__mach_port_is_connection_for_service_t::service_port"][::std::mem::offset_of!(
        __Request__mach_port_is_connection_for_service_t,
        service_port
    )
        - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_get_service_port_info_t"]
        [::std::mem::size_of::<__Request__mach_port_get_service_port_info_t>() - 36usize];
    ["Alignment of __Request__mach_port_get_service_port_info_t"]
        [::std::mem::align_of::<__Request__mach_port_get_service_port_info_t>() - 4usize];
    ["Offset of field: __Request__mach_port_get_service_port_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_get_service_port_info_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_get_service_port_info_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_get_service_port_info_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_get_service_port_info_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_get_service_port_info_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_port_assert_attributes_t"]
        [::std::mem::size_of::<__Request__mach_port_assert_attributes_t>() - 112usize];
    ["Alignment of __Request__mach_port_assert_attributes_t"]
        [::std::mem::align_of::<__Request__mach_port_assert_attributes_t>() - 4usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::Head"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, Head) - 0usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::name"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, name) - 32usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::flavor"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, flavor) - 36usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::infoCnt"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, infoCnt) - 40usize];
    ["Offset of field: __Request__mach_port_assert_attributes_t::info"]
        [::std::mem::offset_of!(__Request__mach_port_assert_attributes_t, info) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__mach_port_subsystem"]
        [::std::mem::size_of::<__RequestUnion__mach_port_subsystem>() - 112usize];
    ["Alignment of __RequestUnion__mach_port_subsystem"]
        [::std::mem::align_of::<__RequestUnion__mach_port_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_names"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_names
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_type"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_type
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_rename"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_rename
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate_name"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate_name
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_destroy"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_destroy
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_deallocate"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_deallocate
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_refs"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_refs
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_mod_refs"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_mod_refs
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_peek"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_peek
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_mscount"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_mscount
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_set_status"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_set_status
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_move_member"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_move_member
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_request_notification"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_request_notification) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_insert_right"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_insert_right
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_extract_right"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_extract_right
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_seqno"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_seqno
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_attributes"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_attributes
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_attributes"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_attributes
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate_qos"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate_qos
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_allocate_full"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_allocate_full
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_task_set_port_space"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_task_set_port_space
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_srights"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_srights
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_space_info"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_space_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_dnrequest_info"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_dnrequest_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_kernel_object"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_kernel_object
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_insert_member"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_insert_member
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_extract_member"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_extract_member
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_context"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_get_context
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_set_context"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_set_context
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_kobject"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_kobject
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_construct"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_construct
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_destruct"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_destruct
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_guard"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_guard
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_unguard"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_unguard
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_space_basic_info"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_space_basic_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_guard_with_flags"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_guard_with_flags
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_swap_guard"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_swap_guard
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_kobject_description"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_kobject_description) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_is_connection_for_service"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_is_connection_for_service) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_get_service_port_info"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_port_subsystem , Request_mach_port_get_service_port_info) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_port_subsystem::Request_mach_port_assert_attributes"][::std::mem::offset_of!(
        __RequestUnion__mach_port_subsystem,
        Request_mach_port_assert_attributes
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_names_t"]
        [::std::mem::size_of::<__Reply__mach_port_names_t>() - 76usize];
    ["Alignment of __Reply__mach_port_names_t"]
        [::std::mem::align_of::<__Reply__mach_port_names_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_names_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_names_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_names_t::names"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, names) - 28usize];
    ["Offset of field: __Reply__mach_port_names_t::types"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, types) - 44usize];
    ["Offset of field: __Reply__mach_port_names_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, NDR) - 60usize];
    ["Offset of field: __Reply__mach_port_names_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, namesCnt) - 68usize];
    ["Offset of field: __Reply__mach_port_names_t::typesCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_names_t, typesCnt) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_type_t"]
        [::std::mem::size_of::<__Reply__mach_port_type_t>() - 40usize];
    ["Alignment of __Reply__mach_port_type_t"]
        [::std::mem::align_of::<__Reply__mach_port_type_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_type_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_type_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_type_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_type_t::ptype"]
        [::std::mem::offset_of!(__Reply__mach_port_type_t, ptype) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_rename_t"]
        [::std::mem::size_of::<__Reply__mach_port_rename_t>() - 36usize];
    ["Alignment of __Reply__mach_port_rename_t"]
        [::std::mem::align_of::<__Reply__mach_port_rename_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_rename_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_rename_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_rename_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_rename_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_rename_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_rename_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_name_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_name_t>() - 36usize];
    ["Alignment of __Reply__mach_port_allocate_name_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_name_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_name_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_name_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_name_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_name_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_name_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_name_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_t>() - 40usize];
    ["Alignment of __Reply__mach_port_allocate_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_allocate_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_destroy_t"]
        [::std::mem::size_of::<__Reply__mach_port_destroy_t>() - 36usize];
    ["Alignment of __Reply__mach_port_destroy_t"]
        [::std::mem::align_of::<__Reply__mach_port_destroy_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_destroy_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_destroy_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_destroy_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_destroy_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_destroy_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_destroy_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_deallocate_t"]
        [::std::mem::size_of::<__Reply__mach_port_deallocate_t>() - 36usize];
    ["Alignment of __Reply__mach_port_deallocate_t"]
        [::std::mem::align_of::<__Reply__mach_port_deallocate_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_deallocate_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_deallocate_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_deallocate_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_deallocate_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_deallocate_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_deallocate_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_refs_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_refs_t>() - 40usize];
    ["Alignment of __Reply__mach_port_get_refs_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_refs_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_refs_t::refs"]
        [::std::mem::offset_of!(__Reply__mach_port_get_refs_t, refs) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_mod_refs_t"]
        [::std::mem::size_of::<__Reply__mach_port_mod_refs_t>() - 36usize];
    ["Alignment of __Reply__mach_port_mod_refs_t"]
        [::std::mem::align_of::<__Reply__mach_port_mod_refs_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_mod_refs_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_mod_refs_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_mod_refs_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_mod_refs_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_mod_refs_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_mod_refs_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_peek_t"]
        [::std::mem::size_of::<__Reply__mach_port_peek_t>() - 120usize];
    ["Alignment of __Reply__mach_port_peek_t"]
        [::std::mem::align_of::<__Reply__mach_port_peek_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_peek_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_peek_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_peek_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_peek_t::request_seqnop"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, request_seqnop) - 36usize];
    ["Offset of field: __Reply__mach_port_peek_t::msg_sizep"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, msg_sizep) - 40usize];
    ["Offset of field: __Reply__mach_port_peek_t::msg_idp"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, msg_idp) - 44usize];
    ["Offset of field: __Reply__mach_port_peek_t::trailer_infopCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, trailer_infopCnt) - 48usize];
    ["Offset of field: __Reply__mach_port_peek_t::trailer_infop"]
        [::std::mem::offset_of!(__Reply__mach_port_peek_t, trailer_infop) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_mscount_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_mscount_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_mscount_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_mscount_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_mscount_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_mscount_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_mscount_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_mscount_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_mscount_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_mscount_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_set_status_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_set_status_t>() - 56usize];
    ["Alignment of __Reply__mach_port_get_set_status_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_set_status_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::members"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, members) - 28usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, NDR) - 44usize];
    ["Offset of field: __Reply__mach_port_get_set_status_t::membersCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_get_set_status_t, membersCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_move_member_t"]
        [::std::mem::size_of::<__Reply__mach_port_move_member_t>() - 36usize];
    ["Alignment of __Reply__mach_port_move_member_t"]
        [::std::mem::align_of::<__Reply__mach_port_move_member_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_move_member_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_move_member_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_move_member_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_move_member_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_move_member_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_move_member_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_request_notification_t"]
        [::std::mem::size_of::<__Reply__mach_port_request_notification_t>() - 40usize];
    ["Alignment of __Reply__mach_port_request_notification_t"]
        [::std::mem::align_of::<__Reply__mach_port_request_notification_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_request_notification_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_request_notification_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_request_notification_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_request_notification_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_request_notification_t::previous"]
        [::std::mem::offset_of!(__Reply__mach_port_request_notification_t, previous) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_insert_right_t"]
        [::std::mem::size_of::<__Reply__mach_port_insert_right_t>() - 36usize];
    ["Alignment of __Reply__mach_port_insert_right_t"]
        [::std::mem::align_of::<__Reply__mach_port_insert_right_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_insert_right_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_right_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_insert_right_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_right_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_insert_right_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_right_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_extract_right_t"]
        [::std::mem::size_of::<__Reply__mach_port_extract_right_t>() - 40usize];
    ["Alignment of __Reply__mach_port_extract_right_t"]
        [::std::mem::align_of::<__Reply__mach_port_extract_right_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_extract_right_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_right_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_extract_right_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_right_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_extract_right_t::poly"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_right_t, poly) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_seqno_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_seqno_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_seqno_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_seqno_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_seqno_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_seqno_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_seqno_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_seqno_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_seqno_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_seqno_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_attributes_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_attributes_t>() - 108usize];
    ["Alignment of __Reply__mach_port_get_attributes_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_attributes_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::port_info_outCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, port_info_outCnt) - 36usize];
    ["Offset of field: __Reply__mach_port_get_attributes_t::port_info_out"]
        [::std::mem::offset_of!(__Reply__mach_port_get_attributes_t, port_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_attributes_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_attributes_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_attributes_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_attributes_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_attributes_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_qos_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_qos_t>() - 48usize];
    ["Alignment of __Reply__mach_port_allocate_qos_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_qos_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::qos"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, qos) - 36usize];
    ["Offset of field: __Reply__mach_port_allocate_qos_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_qos_t, name) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_allocate_full_t"]
        [::std::mem::size_of::<__Reply__mach_port_allocate_full_t>() - 48usize];
    ["Alignment of __Reply__mach_port_allocate_full_t"]
        [::std::mem::align_of::<__Reply__mach_port_allocate_full_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::qos"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, qos) - 36usize];
    ["Offset of field: __Reply__mach_port_allocate_full_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_allocate_full_t, name) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__task_set_port_space_t"]
        [::std::mem::size_of::<__Reply__task_set_port_space_t>() - 36usize];
    ["Alignment of __Reply__task_set_port_space_t"]
        [::std::mem::align_of::<__Reply__task_set_port_space_t>() - 4usize];
    ["Offset of field: __Reply__task_set_port_space_t::Head"]
        [::std::mem::offset_of!(__Reply__task_set_port_space_t, Head) - 0usize];
    ["Offset of field: __Reply__task_set_port_space_t::NDR"]
        [::std::mem::offset_of!(__Reply__task_set_port_space_t, NDR) - 24usize];
    ["Offset of field: __Reply__task_set_port_space_t::RetCode"]
        [::std::mem::offset_of!(__Reply__task_set_port_space_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_srights_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_srights_t>() - 40usize];
    ["Alignment of __Reply__mach_port_get_srights_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_srights_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_srights_t::srights"]
        [::std::mem::offset_of!(__Reply__mach_port_get_srights_t, srights) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_space_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_space_info_t>() - 100usize];
    ["Alignment of __Reply__mach_port_space_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_space_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_space_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_space_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_port_space_info_t::table_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, table_info) - 28usize];
    ["Offset of field: __Reply__mach_port_space_info_t::tree_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, tree_info) - 44usize];
    ["Offset of field: __Reply__mach_port_space_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, NDR) - 60usize];
    ["Offset of field: __Reply__mach_port_space_info_t::space_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, space_info) - 68usize];
    ["Offset of field: __Reply__mach_port_space_info_t::table_infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, table_infoCnt) - 92usize];
    ["Offset of field: __Reply__mach_port_space_info_t::tree_infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_port_space_info_t, tree_infoCnt) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_dnrequest_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_dnrequest_info_t>() - 44usize];
    ["Alignment of __Reply__mach_port_dnrequest_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_dnrequest_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::dnr_total"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, dnr_total) - 36usize];
    ["Offset of field: __Reply__mach_port_dnrequest_info_t::dnr_used"]
        [::std::mem::offset_of!(__Reply__mach_port_dnrequest_info_t, dnr_used) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_kernel_object_t"]
        [::std::mem::size_of::<__Reply__mach_port_kernel_object_t>() - 44usize];
    ["Alignment of __Reply__mach_port_kernel_object_t"]
        [::std::mem::align_of::<__Reply__mach_port_kernel_object_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::object_type"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, object_type) - 36usize];
    ["Offset of field: __Reply__mach_port_kernel_object_t::object_addr"]
        [::std::mem::offset_of!(__Reply__mach_port_kernel_object_t, object_addr) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_insert_member_t"]
        [::std::mem::size_of::<__Reply__mach_port_insert_member_t>() - 36usize];
    ["Alignment of __Reply__mach_port_insert_member_t"]
        [::std::mem::align_of::<__Reply__mach_port_insert_member_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_insert_member_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_member_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_insert_member_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_member_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_insert_member_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_insert_member_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_extract_member_t"]
        [::std::mem::size_of::<__Reply__mach_port_extract_member_t>() - 36usize];
    ["Alignment of __Reply__mach_port_extract_member_t"]
        [::std::mem::align_of::<__Reply__mach_port_extract_member_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_extract_member_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_member_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_extract_member_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_member_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_extract_member_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_extract_member_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_context_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_context_t>() - 44usize];
    ["Alignment of __Reply__mach_port_get_context_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_context_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_context_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_context_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_context_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_context_t::context"]
        [::std::mem::offset_of!(__Reply__mach_port_get_context_t, context) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_set_context_t"]
        [::std::mem::size_of::<__Reply__mach_port_set_context_t>() - 36usize];
    ["Alignment of __Reply__mach_port_set_context_t"]
        [::std::mem::align_of::<__Reply__mach_port_set_context_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_set_context_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_set_context_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_set_context_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_set_context_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_set_context_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_set_context_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_kobject_t"]
        [::std::mem::size_of::<__Reply__mach_port_kobject_t>() - 48usize];
    ["Alignment of __Reply__mach_port_kobject_t"]
        [::std::mem::align_of::<__Reply__mach_port_kobject_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_kobject_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_kobject_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_kobject_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_kobject_t::object_type"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, object_type) - 36usize];
    ["Offset of field: __Reply__mach_port_kobject_t::object_addr"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_t, object_addr) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_construct_t"]
        [::std::mem::size_of::<__Reply__mach_port_construct_t>() - 40usize];
    ["Alignment of __Reply__mach_port_construct_t"]
        [::std::mem::align_of::<__Reply__mach_port_construct_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_construct_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_construct_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_construct_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_construct_t::name"]
        [::std::mem::offset_of!(__Reply__mach_port_construct_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_destruct_t"]
        [::std::mem::size_of::<__Reply__mach_port_destruct_t>() - 36usize];
    ["Alignment of __Reply__mach_port_destruct_t"]
        [::std::mem::align_of::<__Reply__mach_port_destruct_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_destruct_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_destruct_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_destruct_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_destruct_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_destruct_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_destruct_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_guard_t"]
        [::std::mem::size_of::<__Reply__mach_port_guard_t>() - 36usize];
    ["Alignment of __Reply__mach_port_guard_t"]
        [::std::mem::align_of::<__Reply__mach_port_guard_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_guard_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_guard_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_guard_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_unguard_t"]
        [::std::mem::size_of::<__Reply__mach_port_unguard_t>() - 36usize];
    ["Alignment of __Reply__mach_port_unguard_t"]
        [::std::mem::align_of::<__Reply__mach_port_unguard_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_unguard_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_unguard_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_unguard_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_unguard_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_unguard_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_unguard_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_space_basic_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_space_basic_info_t>() - 60usize];
    ["Alignment of __Reply__mach_port_space_basic_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_space_basic_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_space_basic_info_t::basic_info"]
        [::std::mem::offset_of!(__Reply__mach_port_space_basic_info_t, basic_info) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_guard_with_flags_t"]
        [::std::mem::size_of::<__Reply__mach_port_guard_with_flags_t>() - 36usize];
    ["Alignment of __Reply__mach_port_guard_with_flags_t"]
        [::std::mem::align_of::<__Reply__mach_port_guard_with_flags_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_guard_with_flags_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_with_flags_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_guard_with_flags_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_with_flags_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_guard_with_flags_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_guard_with_flags_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_swap_guard_t"]
        [::std::mem::size_of::<__Reply__mach_port_swap_guard_t>() - 36usize];
    ["Alignment of __Reply__mach_port_swap_guard_t"]
        [::std::mem::align_of::<__Reply__mach_port_swap_guard_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_swap_guard_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_swap_guard_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_swap_guard_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_swap_guard_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_swap_guard_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_swap_guard_t, RetCode) - 32usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_kobject_description_t"]
        [::std::mem::size_of::<__Reply__mach_port_kobject_description_t>() - 568usize];
    ["Alignment of __Reply__mach_port_kobject_description_t"]
        [::std::mem::align_of::<__Reply__mach_port_kobject_description_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::object_type"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, object_type) - 36usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::object_addr"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, object_addr) - 40usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::descriptionOffset"][::std::mem::offset_of!(
        __Reply__mach_port_kobject_description_t,
        descriptionOffset
    ) - 48usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::descriptionCnt"][::std::mem::offset_of!(
        __Reply__mach_port_kobject_description_t,
        descriptionCnt
    ) - 52usize];
    ["Offset of field: __Reply__mach_port_kobject_description_t::description"]
        [::std::mem::offset_of!(__Reply__mach_port_kobject_description_t, description) - 56usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_is_connection_for_service_t"]
        [::std::mem::size_of::<__Reply__mach_port_is_connection_for_service_t>() - 44usize];
    ["Alignment of __Reply__mach_port_is_connection_for_service_t"]
        [::std::mem::align_of::<__Reply__mach_port_is_connection_for_service_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_is_connection_for_service_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_is_connection_for_service_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_is_connection_for_service_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_is_connection_for_service_t::filter_policy_id"][::std::mem::offset_of!(
        __Reply__mach_port_is_connection_for_service_t,
        filter_policy_id
    )
        - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_get_service_port_info_t"]
        [::std::mem::size_of::<__Reply__mach_port_get_service_port_info_t>() - 292usize];
    ["Alignment of __Reply__mach_port_get_service_port_info_t"]
        [::std::mem::align_of::<__Reply__mach_port_get_service_port_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_port_get_service_port_info_t::sp_info_out"]
        [::std::mem::offset_of!(__Reply__mach_port_get_service_port_info_t, sp_info_out) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_port_assert_attributes_t"]
        [::std::mem::size_of::<__Reply__mach_port_assert_attributes_t>() - 36usize];
    ["Alignment of __Reply__mach_port_assert_attributes_t"]
        [::std::mem::align_of::<__Reply__mach_port_assert_attributes_t>() - 4usize];
    ["Offset of field: __Reply__mach_port_assert_attributes_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_port_assert_attributes_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_port_assert_attributes_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_port_assert_attributes_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_port_assert_attributes_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_port_assert_attributes_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__mach_port_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__mach_port_subsystem>() - 568usize];
    ["Alignment of __ReplyUnion__mach_port_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__mach_port_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_names"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_names) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_type"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_type) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_rename"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_rename
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate_name"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate_name
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_destroy"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_destroy
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_deallocate"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_deallocate
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_refs"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_refs
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_mod_refs"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_mod_refs
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_peek"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_peek) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_mscount"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_mscount
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_set_status"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_set_status
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_move_member"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_move_member
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_request_notification"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_request_notification
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_insert_right"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_insert_right
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_extract_right"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_extract_right
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_seqno"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_seqno
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_attributes"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_attributes
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_attributes"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_attributes
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate_qos"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate_qos
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_allocate_full"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_allocate_full
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_task_set_port_space"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_task_set_port_space
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_srights"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_srights
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_space_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_space_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_dnrequest_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_dnrequest_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_kernel_object"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_kernel_object
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_insert_member"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_insert_member
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_extract_member"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_extract_member
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_context"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_context
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_set_context"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_set_context
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_kobject"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_kobject
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_construct"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_construct
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_destruct"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_destruct
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_guard"]
        [::std::mem::offset_of!(__ReplyUnion__mach_port_subsystem, Reply_mach_port_guard) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_unguard"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_unguard
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_space_basic_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_space_basic_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_guard_with_flags"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_guard_with_flags
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_swap_guard"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_swap_guard
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_kobject_description"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_kobject_description
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_is_connection_for_service"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_port_subsystem , Reply_mach_port_is_connection_for_service) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_get_service_port_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_get_service_port_info
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_port_subsystem::Reply_mach_port_assert_attributes"][::std::mem::offset_of!(
        __ReplyUnion__mach_port_subsystem,
        Reply_mach_port_assert_attributes
    )
        - 0usize];
};
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn host_info(
        host: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_kernel_version(
        host: host_t,
        kernel_version: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry(
        host: host_t,
        internal: boolean_t,
        size: vm_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_info(
        host: host_t,
        flavor: processor_flavor_t,
        out_processor_count: *mut natural_t,
        out_processor_info: *mut processor_info_array_t,
        out_processor_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_io_main(host: host_t, io_main: *mut io_main_t) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_service(
        host: host_t,
        clock_id: clock_id_t,
        clock_serv: *mut clock_serv_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_get_info(
        host: host_t,
        modules: *mut kmod_args_t,
        modulesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_virtual_physical_table_info(
        host: host_t,
        info: *mut hash_info_bucket_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_default(
        host: host_t,
        default_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_create(
        host: host_t,
        new_set: *mut processor_set_t,
        new_name: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry_64(
        host: host_t,
        internal: boolean_t,
        size: memory_object_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_request_notification(
        host: host_t,
        notify_type: host_flavor_t,
        notify_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_lockgroup_info(
        host: host_t,
        lockgroup_info: *mut lockgroup_info_array_t,
        lockgroup_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics64(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info64_out: host_info64_t,
        host_info64_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info(
        host: mach_port_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_create_mach_voucher(
        host: host_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: mach_msg_type_number_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        new_key: *mut mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        key: mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) -> kern_return_t;
}
extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_info(
        host: mach_port_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
        memory_info: *mut mach_memory_info_array_t,
        memory_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_multiuser_config_flags(
        host_priv: host_priv_t,
        multiuser_flags: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_multiuser_config_flags(
        host: host_t,
        multiuser_flags: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info_for_zone(
        host: host_priv_t,
        name: mach_zone_name_t,
        info: *mut mach_zone_info_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_info_t"][::std::mem::size_of::<__Request__host_info_t>() - 40usize];
    ["Alignment of __Request__host_info_t"]
        [::std::mem::align_of::<__Request__host_info_t>() - 4usize];
    ["Offset of field: __Request__host_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_info_t, Head) - 0usize];
    ["Offset of field: __Request__host_info_t::NDR"]
        [::std::mem::offset_of!(__Request__host_info_t, NDR) - 24usize];
    ["Offset of field: __Request__host_info_t::flavor"]
        [::std::mem::offset_of!(__Request__host_info_t, flavor) - 32usize];
    ["Offset of field: __Request__host_info_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Request__host_info_t, host_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_kernel_version_t"]
        [::std::mem::size_of::<__Request__host_kernel_version_t>() - 24usize];
    ["Alignment of __Request__host_kernel_version_t"]
        [::std::mem::align_of::<__Request__host_kernel_version_t>() - 4usize];
    ["Offset of field: __Request__host_kernel_version_t::Head"]
        [::std::mem::offset_of!(__Request__host_kernel_version_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request___host_page_size_t"]
        [::std::mem::size_of::<__Request___host_page_size_t>() - 24usize];
    ["Alignment of __Request___host_page_size_t"]
        [::std::mem::align_of::<__Request___host_page_size_t>() - 4usize];
    ["Offset of field: __Request___host_page_size_t::Head"]
        [::std::mem::offset_of!(__Request___host_page_size_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_memory_object_memory_entry_t"]
        [::std::mem::size_of::<__Request__mach_memory_object_memory_entry_t>() - 64usize];
    ["Alignment of __Request__mach_memory_object_memory_entry_t"]
        [::std::mem::align_of::<__Request__mach_memory_object_memory_entry_t>() - 4usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::pager"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, pager) - 28usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::internal"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, internal) - 48usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::size"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_t, size) - 52usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_t::permission"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_t,
        permission
    ) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_processor_info_t"]
        [::std::mem::size_of::<__Request__host_processor_info_t>() - 36usize];
    ["Alignment of __Request__host_processor_info_t"]
        [::std::mem::align_of::<__Request__host_processor_info_t>() - 4usize];
    ["Offset of field: __Request__host_processor_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_processor_info_t, Head) - 0usize];
    ["Offset of field: __Request__host_processor_info_t::NDR"]
        [::std::mem::offset_of!(__Request__host_processor_info_t, NDR) - 24usize];
    ["Offset of field: __Request__host_processor_info_t::flavor"]
        [::std::mem::offset_of!(__Request__host_processor_info_t, flavor) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_io_main_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_io_main_t"]
        [::std::mem::size_of::<__Request__host_get_io_main_t>() - 24usize];
    ["Alignment of __Request__host_get_io_main_t"]
        [::std::mem::align_of::<__Request__host_get_io_main_t>() - 4usize];
    ["Offset of field: __Request__host_get_io_main_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_io_main_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_clock_service_t"]
        [::std::mem::size_of::<__Request__host_get_clock_service_t>() - 36usize];
    ["Alignment of __Request__host_get_clock_service_t"]
        [::std::mem::align_of::<__Request__host_get_clock_service_t>() - 4usize];
    ["Offset of field: __Request__host_get_clock_service_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_clock_service_t, Head) - 0usize];
    ["Offset of field: __Request__host_get_clock_service_t::NDR"]
        [::std::mem::offset_of!(__Request__host_get_clock_service_t, NDR) - 24usize];
    ["Offset of field: __Request__host_get_clock_service_t::clock_id"]
        [::std::mem::offset_of!(__Request__host_get_clock_service_t, clock_id) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__kmod_get_info_t"]
        [::std::mem::size_of::<__Request__kmod_get_info_t>() - 24usize];
    ["Alignment of __Request__kmod_get_info_t"]
        [::std::mem::align_of::<__Request__kmod_get_info_t>() - 4usize];
    ["Offset of field: __Request__kmod_get_info_t::Head"]
        [::std::mem::offset_of!(__Request__kmod_get_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_virtual_physical_table_info_t"]
        [::std::mem::size_of::<__Request__host_virtual_physical_table_info_t>() - 24usize];
    ["Alignment of __Request__host_virtual_physical_table_info_t"]
        [::std::mem::align_of::<__Request__host_virtual_physical_table_info_t>() - 4usize];
    ["Offset of field: __Request__host_virtual_physical_table_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_virtual_physical_table_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_default_t"]
        [::std::mem::size_of::<__Request__processor_set_default_t>() - 24usize];
    ["Alignment of __Request__processor_set_default_t"]
        [::std::mem::align_of::<__Request__processor_set_default_t>() - 4usize];
    ["Offset of field: __Request__processor_set_default_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_default_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__processor_set_create_t"]
        [::std::mem::size_of::<__Request__processor_set_create_t>() - 24usize];
    ["Alignment of __Request__processor_set_create_t"]
        [::std::mem::align_of::<__Request__processor_set_create_t>() - 4usize];
    ["Offset of field: __Request__processor_set_create_t::Head"]
        [::std::mem::offset_of!(__Request__processor_set_create_t, Head) - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_memory_object_memory_entry_64_t"]
        [::std::mem::size_of::<__Request__mach_memory_object_memory_entry_64_t>() - 64usize];
    ["Alignment of __Request__mach_memory_object_memory_entry_64_t"]
        [::std::mem::align_of::<__Request__mach_memory_object_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::msgh_body"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_64_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::pager"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, pager) - 28usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, NDR) - 40usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::internal"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_64_t,
        internal
    ) - 48usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::size"]
        [::std::mem::offset_of!(__Request__mach_memory_object_memory_entry_64_t, size) - 52usize];
    ["Offset of field: __Request__mach_memory_object_memory_entry_64_t::permission"][::std::mem::offset_of!(
        __Request__mach_memory_object_memory_entry_64_t,
        permission
    ) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_statistics_t"]
        [::std::mem::size_of::<__Request__host_statistics_t>() - 40usize];
    ["Alignment of __Request__host_statistics_t"]
        [::std::mem::align_of::<__Request__host_statistics_t>() - 4usize];
    ["Offset of field: __Request__host_statistics_t::Head"]
        [::std::mem::offset_of!(__Request__host_statistics_t, Head) - 0usize];
    ["Offset of field: __Request__host_statistics_t::NDR"]
        [::std::mem::offset_of!(__Request__host_statistics_t, NDR) - 24usize];
    ["Offset of field: __Request__host_statistics_t::flavor"]
        [::std::mem::offset_of!(__Request__host_statistics_t, flavor) - 32usize];
    ["Offset of field: __Request__host_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Request__host_statistics_t, host_info_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_request_notification_t"]
        [::std::mem::size_of::<__Request__host_request_notification_t>() - 52usize];
    ["Alignment of __Request__host_request_notification_t"]
        [::std::mem::align_of::<__Request__host_request_notification_t>() - 4usize];
    ["Offset of field: __Request__host_request_notification_t::Head"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, Head) - 0usize];
    ["Offset of field: __Request__host_request_notification_t::msgh_body"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, msgh_body) - 24usize];
    ["Offset of field: __Request__host_request_notification_t::notify_port"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, notify_port) - 28usize];
    ["Offset of field: __Request__host_request_notification_t::NDR"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, NDR) - 40usize];
    ["Offset of field: __Request__host_request_notification_t::notify_type"]
        [::std::mem::offset_of!(__Request__host_request_notification_t, notify_type) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_lockgroup_info_t"]
        [::std::mem::size_of::<__Request__host_lockgroup_info_t>() - 24usize];
    ["Alignment of __Request__host_lockgroup_info_t"]
        [::std::mem::align_of::<__Request__host_lockgroup_info_t>() - 4usize];
    ["Offset of field: __Request__host_lockgroup_info_t::Head"]
        [::std::mem::offset_of!(__Request__host_lockgroup_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_statistics64_t"]
        [::std::mem::size_of::<__Request__host_statistics64_t>() - 40usize];
    ["Alignment of __Request__host_statistics64_t"]
        [::std::mem::align_of::<__Request__host_statistics64_t>() - 4usize];
    ["Offset of field: __Request__host_statistics64_t::Head"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, Head) - 0usize];
    ["Offset of field: __Request__host_statistics64_t::NDR"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, NDR) - 24usize];
    ["Offset of field: __Request__host_statistics64_t::flavor"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, flavor) - 32usize];
    ["Offset of field: __Request__host_statistics64_t::host_info64_outCnt"]
        [::std::mem::offset_of!(__Request__host_statistics64_t, host_info64_outCnt) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_zone_info_t"]
        [::std::mem::size_of::<__Request__mach_zone_info_t>() - 24usize];
    ["Alignment of __Request__mach_zone_info_t"]
        [::std::mem::align_of::<__Request__mach_zone_info_t>() - 4usize];
    ["Offset of field: __Request__mach_zone_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_zone_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_create_mach_voucher_t"]
        [::std::mem::size_of::<__Request__host_create_mach_voucher_t>() - 5156usize];
    ["Alignment of __Request__host_create_mach_voucher_t"]
        [::std::mem::align_of::<__Request__host_create_mach_voucher_t>() - 4usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::NDR"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, NDR) - 24usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::recipesCnt"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, recipesCnt) - 32usize];
    ["Offset of field: __Request__host_create_mach_voucher_t::recipes"]
        [::std::mem::offset_of!(__Request__host_create_mach_voucher_t, recipes) - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::size_of::<__Request__host_register_mach_voucher_attr_manager_t>() - 56usize];
    ["Alignment of __Request__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Request__host_register_mach_voucher_attr_manager_t>() - 4usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::Head"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        Head
    ) - 0usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::msgh_body"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::attr_manager"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        attr_manager
    )
        - 28usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::NDR"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        NDR
    ) - 40usize];
    ["Offset of field: __Request__host_register_mach_voucher_attr_manager_t::default_value"][::std::mem::offset_of!(
        __Request__host_register_mach_voucher_attr_manager_t,
        default_value
    )
        - 48usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_register_well_known_mach_voucher_attr_manager_t"][::std::mem::size_of::<
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    >() - 60usize];
    ["Alignment of __Request__host_register_well_known_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Request__host_register_well_known_mach_voucher_attr_manager_t>()
            - 4usize];
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::Head"][::std::mem::offset_of!(
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
        Head
    )
        - 0usize];
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::msgh_body"] [:: std :: mem :: offset_of ! (__Request__host_register_well_known_mach_voucher_attr_manager_t , msgh_body) - 24usize] ;
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::attr_manager"] [:: std :: mem :: offset_of ! (__Request__host_register_well_known_mach_voucher_attr_manager_t , attr_manager) - 28usize] ;
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::NDR"][::std::mem::offset_of!(
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
        NDR
    )
        - 40usize];
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::default_value"] [:: std :: mem :: offset_of ! (__Request__host_register_well_known_mach_voucher_attr_manager_t , default_value) - 48usize] ;
    ["Offset of field: __Request__host_register_well_known_mach_voucher_attr_manager_t::key"][::std::mem::offset_of!(
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
        key
    )
        - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Request__host_set_atm_diagnostic_flag_t>() - 36usize];
    ["Alignment of __Request__host_set_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Request__host_set_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Request__host_set_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_atm_diagnostic_flag_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_atm_diagnostic_flag_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_atm_diagnostic_flag_t, NDR) - 24usize];
    ["Offset of field: __Request__host_set_atm_diagnostic_flag_t::diagnostic_flag"][::std::mem::offset_of!(
        __Request__host_set_atm_diagnostic_flag_t,
        diagnostic_flag
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Request__host_get_atm_diagnostic_flag_t>() - 24usize];
    ["Alignment of __Request__host_get_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Request__host_get_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Request__host_get_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_atm_diagnostic_flag_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_memory_info_t"]
        [::std::mem::size_of::<__Request__mach_memory_info_t>() - 24usize];
    ["Alignment of __Request__mach_memory_info_t"]
        [::std::mem::align_of::<__Request__mach_memory_info_t>() - 4usize];
    ["Offset of field: __Request__mach_memory_info_t::Head"]
        [::std::mem::offset_of!(__Request__mach_memory_info_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_set_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Request__host_set_multiuser_config_flags_t>() - 36usize];
    ["Alignment of __Request__host_set_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Request__host_set_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Request__host_set_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Request__host_set_multiuser_config_flags_t, Head) - 0usize];
    ["Offset of field: __Request__host_set_multiuser_config_flags_t::NDR"]
        [::std::mem::offset_of!(__Request__host_set_multiuser_config_flags_t, NDR) - 24usize];
    ["Offset of field: __Request__host_set_multiuser_config_flags_t::multiuser_flags"][::std::mem::offset_of!(
        __Request__host_set_multiuser_config_flags_t,
        multiuser_flags
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_get_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Request__host_get_multiuser_config_flags_t>() - 24usize];
    ["Alignment of __Request__host_get_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Request__host_get_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Request__host_get_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Request__host_get_multiuser_config_flags_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__host_check_multiuser_mode_t"]
        [::std::mem::size_of::<__Request__host_check_multiuser_mode_t>() - 24usize];
    ["Alignment of __Request__host_check_multiuser_mode_t"]
        [::std::mem::align_of::<__Request__host_check_multiuser_mode_t>() - 4usize];
    ["Offset of field: __Request__host_check_multiuser_mode_t::Head"]
        [::std::mem::offset_of!(__Request__host_check_multiuser_mode_t, Head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_zone_name_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Request__mach_zone_info_for_zone_t"]
        [::std::mem::size_of::<__Request__mach_zone_info_for_zone_t>() - 112usize];
    ["Alignment of __Request__mach_zone_info_for_zone_t"]
        [::std::mem::align_of::<__Request__mach_zone_info_for_zone_t>() - 4usize];
    ["Offset of field: __Request__mach_zone_info_for_zone_t::Head"]
        [::std::mem::offset_of!(__Request__mach_zone_info_for_zone_t, Head) - 0usize];
    ["Offset of field: __Request__mach_zone_info_for_zone_t::NDR"]
        [::std::mem::offset_of!(__Request__mach_zone_info_for_zone_t, NDR) - 24usize];
    ["Offset of field: __Request__mach_zone_info_for_zone_t::name"]
        [::std::mem::offset_of!(__Request__mach_zone_info_for_zone_t, name) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_main: __Request__host_get_io_main_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager:
        __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager:
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    pub Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __RequestUnion__mach_host_subsystem"]
        [::std::mem::size_of::<__RequestUnion__mach_host_subsystem>() - 5156usize];
    ["Alignment of __RequestUnion__mach_host_subsystem"]
        [::std::mem::align_of::<__RequestUnion__mach_host_subsystem>() - 4usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_info"]
        [::std::mem::offset_of!(__RequestUnion__mach_host_subsystem, Request_host_info) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_kernel_version"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_kernel_version
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request__host_page_size"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request__host_page_size
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_memory_object_memory_entry"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_mach_memory_object_memory_entry) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_processor_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_processor_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_io_main"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_get_io_main
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_clock_service"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_get_clock_service
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_kmod_get_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_kmod_get_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_virtual_physical_table_info"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_virtual_physical_table_info) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_processor_set_default"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_processor_set_default
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_processor_set_create"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_processor_set_create
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_memory_object_memory_entry_64"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_mach_memory_object_memory_entry_64) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_statistics"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_statistics
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_request_notification"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_request_notification
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_lockgroup_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_lockgroup_info
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_statistics64"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_statistics64
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_zone_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_mach_zone_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_create_mach_voucher"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_create_mach_voucher
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_register_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_register_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_register_well_known_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_register_well_known_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_set_atm_diagnostic_flag"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_set_atm_diagnostic_flag) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_atm_diagnostic_flag"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_get_atm_diagnostic_flag) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_memory_info"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_mach_memory_info
    ) - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_set_multiuser_config_flags"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_set_multiuser_config_flags) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_get_multiuser_config_flags"] [:: std :: mem :: offset_of ! (__RequestUnion__mach_host_subsystem , Request_host_get_multiuser_config_flags) - 0usize] ;
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_host_check_multiuser_mode"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_host_check_multiuser_mode
    )
        - 0usize];
    ["Offset of field: __RequestUnion__mach_host_subsystem::Request_mach_zone_info_for_zone"][::std::mem::offset_of!(
        __RequestUnion__mach_host_subsystem,
        Request_mach_zone_info_for_zone
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_info_t"][::std::mem::size_of::<__Reply__host_info_t>() - 312usize];
    ["Alignment of __Reply__host_info_t"][::std::mem::align_of::<__Reply__host_info_t>() - 4usize];
    ["Offset of field: __Reply__host_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_info_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_info_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_info_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_info_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Reply__host_info_t, host_info_outCnt) - 36usize];
    ["Offset of field: __Reply__host_info_t::host_info_out"]
        [::std::mem::offset_of!(__Reply__host_info_t, host_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_kernel_version_t"]
        [::std::mem::size_of::<__Reply__host_kernel_version_t>() - 556usize];
    ["Alignment of __Reply__host_kernel_version_t"]
        [::std::mem::align_of::<__Reply__host_kernel_version_t>() - 4usize];
    ["Offset of field: __Reply__host_kernel_version_t::Head"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, Head) - 0usize];
    ["Offset of field: __Reply__host_kernel_version_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_kernel_version_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_kernel_version_t::kernel_versionOffset"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, kernel_versionOffset) - 36usize];
    ["Offset of field: __Reply__host_kernel_version_t::kernel_versionCnt"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, kernel_versionCnt) - 40usize];
    ["Offset of field: __Reply__host_kernel_version_t::kernel_version"]
        [::std::mem::offset_of!(__Reply__host_kernel_version_t, kernel_version) - 44usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply___host_page_size_t"]
        [::std::mem::size_of::<__Reply___host_page_size_t>() - 44usize];
    ["Alignment of __Reply___host_page_size_t"]
        [::std::mem::align_of::<__Reply___host_page_size_t>() - 4usize];
    ["Offset of field: __Reply___host_page_size_t::Head"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, Head) - 0usize];
    ["Offset of field: __Reply___host_page_size_t::NDR"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, NDR) - 24usize];
    ["Offset of field: __Reply___host_page_size_t::RetCode"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, RetCode) - 32usize];
    ["Offset of field: __Reply___host_page_size_t::out_page_size"]
        [::std::mem::offset_of!(__Reply___host_page_size_t, out_page_size) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_memory_object_memory_entry_t"]
        [::std::mem::size_of::<__Reply__mach_memory_object_memory_entry_t>() - 40usize];
    ["Alignment of __Reply__mach_memory_object_memory_entry_t"]
        [::std::mem::align_of::<__Reply__mach_memory_object_memory_entry_t>() - 4usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_memory_object_memory_entry_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_memory_object_memory_entry_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_t::entry_handle"][::std::mem::offset_of!(
        __Reply__mach_memory_object_memory_entry_t,
        entry_handle
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_processor_info_t"]
        [::std::mem::size_of::<__Reply__host_processor_info_t>() - 60usize];
    ["Alignment of __Reply__host_processor_info_t"]
        [::std::mem::align_of::<__Reply__host_processor_info_t>() - 4usize];
    ["Offset of field: __Reply__host_processor_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_processor_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_processor_info_t::out_processor_info"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, out_processor_info) - 28usize];
    ["Offset of field: __Reply__host_processor_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_processor_info_t::out_processor_count"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, out_processor_count) - 52usize];
    ["Offset of field: __Reply__host_processor_info_t::out_processor_infoCnt"]
        [::std::mem::offset_of!(__Reply__host_processor_info_t, out_processor_infoCnt) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_io_main_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_main: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_io_main_t"]
        [::std::mem::size_of::<__Reply__host_get_io_main_t>() - 40usize];
    ["Alignment of __Reply__host_get_io_main_t"]
        [::std::mem::align_of::<__Reply__host_get_io_main_t>() - 4usize];
    ["Offset of field: __Reply__host_get_io_main_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_io_main_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_io_main_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_io_main_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_io_main_t::io_main"]
        [::std::mem::offset_of!(__Reply__host_get_io_main_t, io_main) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_clock_service_t"]
        [::std::mem::size_of::<__Reply__host_get_clock_service_t>() - 40usize];
    ["Alignment of __Reply__host_get_clock_service_t"]
        [::std::mem::align_of::<__Reply__host_get_clock_service_t>() - 4usize];
    ["Offset of field: __Reply__host_get_clock_service_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_clock_service_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_clock_service_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_get_clock_service_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_get_clock_service_t::clock_serv"]
        [::std::mem::offset_of!(__Reply__host_get_clock_service_t, clock_serv) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__kmod_get_info_t"]
        [::std::mem::size_of::<__Reply__kmod_get_info_t>() - 56usize];
    ["Alignment of __Reply__kmod_get_info_t"]
        [::std::mem::align_of::<__Reply__kmod_get_info_t>() - 4usize];
    ["Offset of field: __Reply__kmod_get_info_t::Head"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, Head) - 0usize];
    ["Offset of field: __Reply__kmod_get_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__kmod_get_info_t::modules"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, modules) - 28usize];
    ["Offset of field: __Reply__kmod_get_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__kmod_get_info_t::modulesCnt"]
        [::std::mem::offset_of!(__Reply__kmod_get_info_t, modulesCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_virtual_physical_table_info_t"]
        [::std::mem::size_of::<__Reply__host_virtual_physical_table_info_t>() - 56usize];
    ["Alignment of __Reply__host_virtual_physical_table_info_t"]
        [::std::mem::align_of::<__Reply__host_virtual_physical_table_info_t>() - 4usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::info"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, info) - 28usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_virtual_physical_table_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__host_virtual_physical_table_info_t, infoCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_default_t"]
        [::std::mem::size_of::<__Reply__processor_set_default_t>() - 40usize];
    ["Alignment of __Reply__processor_set_default_t"]
        [::std::mem::align_of::<__Reply__processor_set_default_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_default_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_default_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_default_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_default_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_default_t::default_set"]
        [::std::mem::offset_of!(__Reply__processor_set_default_t, default_set) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__processor_set_create_t"]
        [::std::mem::size_of::<__Reply__processor_set_create_t>() - 52usize];
    ["Alignment of __Reply__processor_set_create_t"]
        [::std::mem::align_of::<__Reply__processor_set_create_t>() - 4usize];
    ["Offset of field: __Reply__processor_set_create_t::Head"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, Head) - 0usize];
    ["Offset of field: __Reply__processor_set_create_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__processor_set_create_t::new_set"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, new_set) - 28usize];
    ["Offset of field: __Reply__processor_set_create_t::new_name"]
        [::std::mem::offset_of!(__Reply__processor_set_create_t, new_name) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_memory_object_memory_entry_64_t"]
        [::std::mem::size_of::<__Reply__mach_memory_object_memory_entry_64_t>() - 40usize];
    ["Alignment of __Reply__mach_memory_object_memory_entry_64_t"]
        [::std::mem::align_of::<__Reply__mach_memory_object_memory_entry_64_t>() - 4usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_64_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_memory_object_memory_entry_64_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_64_t::msgh_body"][::std::mem::offset_of!(
        __Reply__mach_memory_object_memory_entry_64_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Reply__mach_memory_object_memory_entry_64_t::entry_handle"][::std::mem::offset_of!(
        __Reply__mach_memory_object_memory_entry_64_t,
        entry_handle
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_statistics_t"]
        [::std::mem::size_of::<__Reply__host_statistics_t>() - 312usize];
    ["Alignment of __Reply__host_statistics_t"]
        [::std::mem::align_of::<__Reply__host_statistics_t>() - 4usize];
    ["Offset of field: __Reply__host_statistics_t::Head"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, Head) - 0usize];
    ["Offset of field: __Reply__host_statistics_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_statistics_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_statistics_t::host_info_outCnt"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, host_info_outCnt) - 36usize];
    ["Offset of field: __Reply__host_statistics_t::host_info_out"]
        [::std::mem::offset_of!(__Reply__host_statistics_t, host_info_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_request_notification_t"]
        [::std::mem::size_of::<__Reply__host_request_notification_t>() - 36usize];
    ["Alignment of __Reply__host_request_notification_t"]
        [::std::mem::align_of::<__Reply__host_request_notification_t>() - 4usize];
    ["Offset of field: __Reply__host_request_notification_t::Head"]
        [::std::mem::offset_of!(__Reply__host_request_notification_t, Head) - 0usize];
    ["Offset of field: __Reply__host_request_notification_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_request_notification_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_request_notification_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_request_notification_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_lockgroup_info_t"]
        [::std::mem::size_of::<__Reply__host_lockgroup_info_t>() - 56usize];
    ["Alignment of __Reply__host_lockgroup_info_t"]
        [::std::mem::align_of::<__Reply__host_lockgroup_info_t>() - 4usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::Head"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, Head) - 0usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::lockgroup_info"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, lockgroup_info) - 28usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, NDR) - 44usize];
    ["Offset of field: __Reply__host_lockgroup_info_t::lockgroup_infoCnt"]
        [::std::mem::offset_of!(__Reply__host_lockgroup_info_t, lockgroup_infoCnt) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_statistics64_t"]
        [::std::mem::size_of::<__Reply__host_statistics64_t>() - 1064usize];
    ["Alignment of __Reply__host_statistics64_t"]
        [::std::mem::align_of::<__Reply__host_statistics64_t>() - 4usize];
    ["Offset of field: __Reply__host_statistics64_t::Head"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, Head) - 0usize];
    ["Offset of field: __Reply__host_statistics64_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_statistics64_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_statistics64_t::host_info64_outCnt"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, host_info64_outCnt) - 36usize];
    ["Offset of field: __Reply__host_statistics64_t::host_info64_out"]
        [::std::mem::offset_of!(__Reply__host_statistics64_t, host_info64_out) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_zone_info_t"]
        [::std::mem::size_of::<__Reply__mach_zone_info_t>() - 76usize];
    ["Alignment of __Reply__mach_zone_info_t"]
        [::std::mem::align_of::<__Reply__mach_zone_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_zone_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_zone_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_zone_info_t::names"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, names) - 28usize];
    ["Offset of field: __Reply__mach_zone_info_t::info"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, info) - 44usize];
    ["Offset of field: __Reply__mach_zone_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, NDR) - 60usize];
    ["Offset of field: __Reply__mach_zone_info_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, namesCnt) - 68usize];
    ["Offset of field: __Reply__mach_zone_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_t, infoCnt) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_create_mach_voucher_t"]
        [::std::mem::size_of::<__Reply__host_create_mach_voucher_t>() - 40usize];
    ["Alignment of __Reply__host_create_mach_voucher_t"]
        [::std::mem::align_of::<__Reply__host_create_mach_voucher_t>() - 4usize];
    ["Offset of field: __Reply__host_create_mach_voucher_t::Head"]
        [::std::mem::offset_of!(__Reply__host_create_mach_voucher_t, Head) - 0usize];
    ["Offset of field: __Reply__host_create_mach_voucher_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__host_create_mach_voucher_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__host_create_mach_voucher_t::voucher"]
        [::std::mem::offset_of!(__Reply__host_create_mach_voucher_t, voucher) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::size_of::<__Reply__host_register_mach_voucher_attr_manager_t>() - 52usize];
    ["Alignment of __Reply__host_register_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Reply__host_register_mach_voucher_attr_manager_t>() - 4usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::Head"]
        [::std::mem::offset_of!(__Reply__host_register_mach_voucher_attr_manager_t, Head) - 0usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::msgh_body"][::std::mem::offset_of!(
        __Reply__host_register_mach_voucher_attr_manager_t,
        msgh_body
    ) - 24usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::new_attr_control"][::std::mem::offset_of!(
        __Reply__host_register_mach_voucher_attr_manager_t,
        new_attr_control
    )
        - 28usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_register_mach_voucher_attr_manager_t, NDR) - 40usize];
    ["Offset of field: __Reply__host_register_mach_voucher_attr_manager_t::new_key"][::std::mem::offset_of!(
        __Reply__host_register_mach_voucher_attr_manager_t,
        new_key
    ) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_register_well_known_mach_voucher_attr_manager_t"][::std::mem::size_of::<
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    >() - 40usize];
    ["Alignment of __Reply__host_register_well_known_mach_voucher_attr_manager_t"]
        [::std::mem::align_of::<__Reply__host_register_well_known_mach_voucher_attr_manager_t>()
            - 4usize];
    ["Offset of field: __Reply__host_register_well_known_mach_voucher_attr_manager_t::Head"][::std::mem::offset_of!(
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
        Head
    )
        - 0usize];
    ["Offset of field: __Reply__host_register_well_known_mach_voucher_attr_manager_t::msgh_body"][::std::mem::offset_of!(
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
        msgh_body
    )
        - 24usize];
    ["Offset of field: __Reply__host_register_well_known_mach_voucher_attr_manager_t::new_attr_control"] [:: std :: mem :: offset_of ! (__Reply__host_register_well_known_mach_voucher_attr_manager_t , new_attr_control) - 28usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Reply__host_set_atm_diagnostic_flag_t>() - 36usize];
    ["Alignment of __Reply__host_set_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Reply__host_set_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Reply__host_set_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_atm_diagnostic_flag_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_atm_diagnostic_flag_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_atm_diagnostic_flag_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_atm_diagnostic_flag_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_atm_diagnostic_flag_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_atm_diagnostic_flag_t"]
        [::std::mem::size_of::<__Reply__host_get_atm_diagnostic_flag_t>() - 40usize];
    ["Alignment of __Reply__host_get_atm_diagnostic_flag_t"]
        [::std::mem::align_of::<__Reply__host_get_atm_diagnostic_flag_t>() - 4usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_atm_diagnostic_flag_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_atm_diagnostic_flag_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_get_atm_diagnostic_flag_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_get_atm_diagnostic_flag_t::diagnostic_flag"][::std::mem::offset_of!(
        __Reply__host_get_atm_diagnostic_flag_t,
        diagnostic_flag
    ) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_memory_info_t"]
        [::std::mem::size_of::<__Reply__mach_memory_info_t>() - 96usize];
    ["Alignment of __Reply__mach_memory_info_t"]
        [::std::mem::align_of::<__Reply__mach_memory_info_t>() - 4usize];
    ["Offset of field: __Reply__mach_memory_info_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_memory_info_t::msgh_body"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, msgh_body) - 24usize];
    ["Offset of field: __Reply__mach_memory_info_t::names"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, names) - 28usize];
    ["Offset of field: __Reply__mach_memory_info_t::info"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, info) - 44usize];
    ["Offset of field: __Reply__mach_memory_info_t::memory_info"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, memory_info) - 60usize];
    ["Offset of field: __Reply__mach_memory_info_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, NDR) - 76usize];
    ["Offset of field: __Reply__mach_memory_info_t::namesCnt"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, namesCnt) - 84usize];
    ["Offset of field: __Reply__mach_memory_info_t::infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, infoCnt) - 88usize];
    ["Offset of field: __Reply__mach_memory_info_t::memory_infoCnt"]
        [::std::mem::offset_of!(__Reply__mach_memory_info_t, memory_infoCnt) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_set_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Reply__host_set_multiuser_config_flags_t>() - 36usize];
    ["Alignment of __Reply__host_set_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Reply__host_set_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Reply__host_set_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Reply__host_set_multiuser_config_flags_t, Head) - 0usize];
    ["Offset of field: __Reply__host_set_multiuser_config_flags_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_set_multiuser_config_flags_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_set_multiuser_config_flags_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_set_multiuser_config_flags_t, RetCode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_get_multiuser_config_flags_t"]
        [::std::mem::size_of::<__Reply__host_get_multiuser_config_flags_t>() - 40usize];
    ["Alignment of __Reply__host_get_multiuser_config_flags_t"]
        [::std::mem::align_of::<__Reply__host_get_multiuser_config_flags_t>() - 4usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::Head"]
        [::std::mem::offset_of!(__Reply__host_get_multiuser_config_flags_t, Head) - 0usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_get_multiuser_config_flags_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_get_multiuser_config_flags_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_get_multiuser_config_flags_t::multiuser_flags"][::std::mem::offset_of!(
        __Reply__host_get_multiuser_config_flags_t,
        multiuser_flags
    ) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__host_check_multiuser_mode_t"]
        [::std::mem::size_of::<__Reply__host_check_multiuser_mode_t>() - 40usize];
    ["Alignment of __Reply__host_check_multiuser_mode_t"]
        [::std::mem::align_of::<__Reply__host_check_multiuser_mode_t>() - 4usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::Head"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, Head) - 0usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::NDR"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, NDR) - 24usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::RetCode"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, RetCode) - 32usize];
    ["Offset of field: __Reply__host_check_multiuser_mode_t::multiuser_mode"]
        [::std::mem::offset_of!(__Reply__host_check_multiuser_mode_t, multiuser_mode) - 36usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info: mach_zone_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __Reply__mach_zone_info_for_zone_t"]
        [::std::mem::size_of::<__Reply__mach_zone_info_for_zone_t>() - 100usize];
    ["Alignment of __Reply__mach_zone_info_for_zone_t"]
        [::std::mem::align_of::<__Reply__mach_zone_info_for_zone_t>() - 4usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::Head"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, Head) - 0usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::NDR"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, NDR) - 24usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::RetCode"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, RetCode) - 32usize];
    ["Offset of field: __Reply__mach_zone_info_for_zone_t::info"]
        [::std::mem::offset_of!(__Reply__mach_zone_info_for_zone_t, info) - 36usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_main: __Reply__host_get_io_main_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager:
        __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager:
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    pub Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __ReplyUnion__mach_host_subsystem"]
        [::std::mem::size_of::<__ReplyUnion__mach_host_subsystem>() - 1064usize];
    ["Alignment of __ReplyUnion__mach_host_subsystem"]
        [::std::mem::align_of::<__ReplyUnion__mach_host_subsystem>() - 4usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_info"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_host_info) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_kernel_version"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_kernel_version
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply__host_page_size"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply__host_page_size) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_memory_object_memory_entry"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_mach_memory_object_memory_entry
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_processor_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_processor_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_io_main"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_io_main
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_clock_service"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_clock_service
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_kmod_get_info"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_kmod_get_info) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_virtual_physical_table_info"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_host_virtual_physical_table_info) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_processor_set_default"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_processor_set_default
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_processor_set_create"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_processor_set_create
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_memory_object_memory_entry_64"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_mach_memory_object_memory_entry_64) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_statistics"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_host_statistics) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_request_notification"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_request_notification
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_lockgroup_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_lockgroup_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_statistics64"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_statistics64
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_zone_info"]
        [::std::mem::offset_of!(__ReplyUnion__mach_host_subsystem, Reply_mach_zone_info) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_create_mach_voucher"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_create_mach_voucher
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_register_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_host_register_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_register_well_known_mach_voucher_attr_manager"] [:: std :: mem :: offset_of ! (__ReplyUnion__mach_host_subsystem , Reply_host_register_well_known_mach_voucher_attr_manager) - 0usize] ;
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_set_atm_diagnostic_flag"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_set_atm_diagnostic_flag
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_atm_diagnostic_flag"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_atm_diagnostic_flag
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_memory_info"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_mach_memory_info
    ) - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_set_multiuser_config_flags"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_set_multiuser_config_flags
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_get_multiuser_config_flags"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_get_multiuser_config_flags
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_host_check_multiuser_mode"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_host_check_multiuser_mode
    )
        - 0usize];
    ["Offset of field: __ReplyUnion__mach_host_subsystem::Reply_mach_zone_info_for_zone"][::std::mem::offset_of!(
        __ReplyUnion__mach_host_subsystem,
        Reply_mach_zone_info_for_zone
    )
        - 0usize];
};
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_routine_arg_descriptor"]
        [::std::mem::size_of::<rpc_routine_arg_descriptor>() - 16usize];
    ["Alignment of rpc_routine_arg_descriptor"]
        [::std::mem::align_of::<rpc_routine_arg_descriptor>() - 4usize];
    ["Offset of field: rpc_routine_arg_descriptor::type_"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, type_) - 0usize];
    ["Offset of field: rpc_routine_arg_descriptor::size"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, size) - 4usize];
    ["Offset of field: rpc_routine_arg_descriptor::count"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, count) - 8usize];
    ["Offset of field: rpc_routine_arg_descriptor::offset"]
        [::std::mem::offset_of!(rpc_routine_arg_descriptor, offset) - 12usize];
};
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_routine_descriptor"][::std::mem::size_of::<rpc_routine_descriptor>() - 40usize];
    ["Alignment of rpc_routine_descriptor"]
        [::std::mem::align_of::<rpc_routine_descriptor>() - 8usize];
    ["Offset of field: rpc_routine_descriptor::impl_routine"]
        [::std::mem::offset_of!(rpc_routine_descriptor, impl_routine) - 0usize];
    ["Offset of field: rpc_routine_descriptor::stub_routine"]
        [::std::mem::offset_of!(rpc_routine_descriptor, stub_routine) - 8usize];
    ["Offset of field: rpc_routine_descriptor::argc"]
        [::std::mem::offset_of!(rpc_routine_descriptor, argc) - 16usize];
    ["Offset of field: rpc_routine_descriptor::descr_count"]
        [::std::mem::offset_of!(rpc_routine_descriptor, descr_count) - 20usize];
    ["Offset of field: rpc_routine_descriptor::arg_descr"]
        [::std::mem::offset_of!(rpc_routine_descriptor, arg_descr) - 24usize];
    ["Offset of field: rpc_routine_descriptor::max_reply_msg"]
        [::std::mem::offset_of!(rpc_routine_descriptor, max_reply_msg) - 32usize];
};
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_signature"][::std::mem::size_of::<rpc_signature>() - 56usize];
    ["Alignment of rpc_signature"][::std::mem::align_of::<rpc_signature>() - 8usize];
    ["Offset of field: rpc_signature::rd"][::std::mem::offset_of!(rpc_signature, rd) - 0usize];
    ["Offset of field: rpc_signature::rad"][::std::mem::offset_of!(rpc_signature, rad) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpc_subsystem"][::std::mem::size_of::<rpc_subsystem>() - 88usize];
    ["Alignment of rpc_subsystem"][::std::mem::align_of::<rpc_subsystem>() - 8usize];
    ["Offset of field: rpc_subsystem::reserved"]
        [::std::mem::offset_of!(rpc_subsystem, reserved) - 0usize];
    ["Offset of field: rpc_subsystem::start"]
        [::std::mem::offset_of!(rpc_subsystem, start) - 8usize];
    ["Offset of field: rpc_subsystem::end"][::std::mem::offset_of!(rpc_subsystem, end) - 12usize];
    ["Offset of field: rpc_subsystem::maxsize"]
        [::std::mem::offset_of!(rpc_subsystem, maxsize) - 16usize];
    ["Offset of field: rpc_subsystem::base_addr"]
        [::std::mem::offset_of!(rpc_subsystem, base_addr) - 24usize];
    ["Offset of field: rpc_subsystem::routine"]
        [::std::mem::offset_of!(rpc_subsystem, routine) - 32usize];
    ["Offset of field: rpc_subsystem::arg_descriptor"]
        [::std::mem::offset_of!(rpc_subsystem, arg_descriptor) - 72usize];
};
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
extern "C" {
    pub fn mach_error_string(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mach_error(str_: *const ::std::os::raw::c_char, error_value: mach_error_t);
}
extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn slot_name(
        arg1: cpu_type_t,
        arg2: cpu_subtype_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t, arg2: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_once(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_importance(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_sleep(
        arg1: mach_port_t,
        arg2: ::std::os::raw::c_int,
        arg3: mach_timespec_t,
        arg4: *mut mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t) -> voucher_mach_msg_state_t;
}
extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub const dyld_image_mode_dyld_image_adding: dyld_image_mode = 0;
pub const dyld_image_mode_dyld_image_removing: dyld_image_mode = 1;
pub const dyld_image_mode_dyld_image_info_change: dyld_image_mode = 2;
pub const dyld_image_mode_dyld_image_dyld_moved: dyld_image_mode = 3;
pub type dyld_image_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_image_info {
    pub imageLoadAddress: *mut mach_header,
    pub imageFilePath: *const ::std::os::raw::c_char,
    pub imageFileModDate: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_image_info"][::std::mem::size_of::<dyld_image_info>() - 24usize];
    ["Alignment of dyld_image_info"][::std::mem::align_of::<dyld_image_info>() - 8usize];
    ["Offset of field: dyld_image_info::imageLoadAddress"]
        [::std::mem::offset_of!(dyld_image_info, imageLoadAddress) - 0usize];
    ["Offset of field: dyld_image_info::imageFilePath"]
        [::std::mem::offset_of!(dyld_image_info, imageFilePath) - 8usize];
    ["Offset of field: dyld_image_info::imageFileModDate"]
        [::std::mem::offset_of!(dyld_image_info, imageFileModDate) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_uuid_info {
    pub imageLoadAddress: *const mach_header,
    pub imageUUID: uuid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_uuid_info"][::std::mem::size_of::<dyld_uuid_info>() - 24usize];
    ["Alignment of dyld_uuid_info"][::std::mem::align_of::<dyld_uuid_info>() - 8usize];
    ["Offset of field: dyld_uuid_info::imageLoadAddress"]
        [::std::mem::offset_of!(dyld_uuid_info, imageLoadAddress) - 0usize];
    ["Offset of field: dyld_uuid_info::imageUUID"]
        [::std::mem::offset_of!(dyld_uuid_info, imageUUID) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_aot_image_info {
    pub x86LoadAddress: *const mach_header,
    pub aotLoadAddress: *const mach_header,
    pub aotImageSize: u64,
    pub aotImageKey: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_aot_image_info"][::std::mem::size_of::<dyld_aot_image_info>() - 56usize];
    ["Alignment of dyld_aot_image_info"][::std::mem::align_of::<dyld_aot_image_info>() - 8usize];
    ["Offset of field: dyld_aot_image_info::x86LoadAddress"]
        [::std::mem::offset_of!(dyld_aot_image_info, x86LoadAddress) - 0usize];
    ["Offset of field: dyld_aot_image_info::aotLoadAddress"]
        [::std::mem::offset_of!(dyld_aot_image_info, aotLoadAddress) - 8usize];
    ["Offset of field: dyld_aot_image_info::aotImageSize"]
        [::std::mem::offset_of!(dyld_aot_image_info, aotImageSize) - 16usize];
    ["Offset of field: dyld_aot_image_info::aotImageKey"]
        [::std::mem::offset_of!(dyld_aot_image_info, aotImageKey) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_aot_shared_cache_info {
    pub cacheBaseAddress: usize,
    pub cacheUUID: uuid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_aot_shared_cache_info"]
        [::std::mem::size_of::<dyld_aot_shared_cache_info>() - 24usize];
    ["Alignment of dyld_aot_shared_cache_info"]
        [::std::mem::align_of::<dyld_aot_shared_cache_info>() - 8usize];
    ["Offset of field: dyld_aot_shared_cache_info::cacheBaseAddress"]
        [::std::mem::offset_of!(dyld_aot_shared_cache_info, cacheBaseAddress) - 0usize];
    ["Offset of field: dyld_aot_shared_cache_info::cacheUUID"]
        [::std::mem::offset_of!(dyld_aot_shared_cache_info, cacheUUID) - 8usize];
};
pub type dyld_image_notifier = ::std::option::Option<
    unsafe extern "C" fn(mode: dyld_image_mode, infoCount: u32, info: *const dyld_image_info),
>;
pub const dyld_error_kind_none: _bindgen_ty_2 = 0;
pub const dyld_error_kind_dylib_missing: _bindgen_ty_2 = 1;
pub const dyld_error_kind_dylib_wrong_arch: _bindgen_ty_2 = 2;
pub const dyld_error_kind_dylib_version: _bindgen_ty_2 = 3;
pub const dyld_error_kind_symbol_missing: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct dyld_all_image_infos {
    pub version: u32,
    pub infoArrayCount: u32,
    pub infoArray: *const dyld_image_info,
    pub notification: dyld_image_notifier,
    pub processDetachedFromSharedRegion: bool,
    pub libSystemInitialized: bool,
    pub dyldImageLoadAddress: *const mach_header,
    pub jitInfo: *mut ::std::os::raw::c_void,
    pub dyldVersion: *const ::std::os::raw::c_char,
    pub errorMessage: *const ::std::os::raw::c_char,
    pub terminationFlags: usize,
    pub coreSymbolicationShmPage: *mut ::std::os::raw::c_void,
    pub systemOrderFlag: usize,
    pub uuidArrayCount: usize,
    pub uuidArray: *const dyld_uuid_info,
    pub dyldAllImageInfosAddress: *mut dyld_all_image_infos,
    pub initialImageCount: usize,
    pub errorKind: usize,
    pub errorClientOfDylibPath: *const ::std::os::raw::c_char,
    pub errorTargetDylibPath: *const ::std::os::raw::c_char,
    pub errorSymbol: *const ::std::os::raw::c_char,
    pub sharedCacheSlide: usize,
    pub sharedCacheUUID: [u8; 16usize],
    pub sharedCacheBaseAddress: usize,
    pub infoArrayChangeTimestamp: u64,
    pub dyldPath: *const ::std::os::raw::c_char,
    pub notifyPorts: [mach_port_t; 8usize],
    pub reserved: [usize; 7usize],
    pub sharedCacheFSID: u64,
    pub sharedCacheFSObjID: u64,
    pub compact_dyld_image_info_addr: usize,
    pub compact_dyld_image_info_size: usize,
    pub platform: u32,
    pub aotInfoCount: u32,
    pub aotInfoArray: *const dyld_aot_image_info,
    pub aotInfoArrayChangeTimestamp: u64,
    pub aotSharedCacheBaseAddress: usize,
    pub aotSharedCacheUUID: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_all_image_infos"][::std::mem::size_of::<dyld_all_image_infos>() - 368usize];
    ["Alignment of dyld_all_image_infos"][::std::mem::align_of::<dyld_all_image_infos>() - 16usize];
    ["Offset of field: dyld_all_image_infos::version"]
        [::std::mem::offset_of!(dyld_all_image_infos, version) - 0usize];
    ["Offset of field: dyld_all_image_infos::infoArrayCount"]
        [::std::mem::offset_of!(dyld_all_image_infos, infoArrayCount) - 4usize];
    ["Offset of field: dyld_all_image_infos::infoArray"]
        [::std::mem::offset_of!(dyld_all_image_infos, infoArray) - 8usize];
    ["Offset of field: dyld_all_image_infos::notification"]
        [::std::mem::offset_of!(dyld_all_image_infos, notification) - 16usize];
    ["Offset of field: dyld_all_image_infos::processDetachedFromSharedRegion"]
        [::std::mem::offset_of!(dyld_all_image_infos, processDetachedFromSharedRegion) - 24usize];
    ["Offset of field: dyld_all_image_infos::libSystemInitialized"]
        [::std::mem::offset_of!(dyld_all_image_infos, libSystemInitialized) - 25usize];
    ["Offset of field: dyld_all_image_infos::dyldImageLoadAddress"]
        [::std::mem::offset_of!(dyld_all_image_infos, dyldImageLoadAddress) - 32usize];
    ["Offset of field: dyld_all_image_infos::jitInfo"]
        [::std::mem::offset_of!(dyld_all_image_infos, jitInfo) - 40usize];
    ["Offset of field: dyld_all_image_infos::dyldVersion"]
        [::std::mem::offset_of!(dyld_all_image_infos, dyldVersion) - 48usize];
    ["Offset of field: dyld_all_image_infos::errorMessage"]
        [::std::mem::offset_of!(dyld_all_image_infos, errorMessage) - 56usize];
    ["Offset of field: dyld_all_image_infos::terminationFlags"]
        [::std::mem::offset_of!(dyld_all_image_infos, terminationFlags) - 64usize];
    ["Offset of field: dyld_all_image_infos::coreSymbolicationShmPage"]
        [::std::mem::offset_of!(dyld_all_image_infos, coreSymbolicationShmPage) - 72usize];
    ["Offset of field: dyld_all_image_infos::systemOrderFlag"]
        [::std::mem::offset_of!(dyld_all_image_infos, systemOrderFlag) - 80usize];
    ["Offset of field: dyld_all_image_infos::uuidArrayCount"]
        [::std::mem::offset_of!(dyld_all_image_infos, uuidArrayCount) - 88usize];
    ["Offset of field: dyld_all_image_infos::uuidArray"]
        [::std::mem::offset_of!(dyld_all_image_infos, uuidArray) - 96usize];
    ["Offset of field: dyld_all_image_infos::dyldAllImageInfosAddress"]
        [::std::mem::offset_of!(dyld_all_image_infos, dyldAllImageInfosAddress) - 104usize];
    ["Offset of field: dyld_all_image_infos::initialImageCount"]
        [::std::mem::offset_of!(dyld_all_image_infos, initialImageCount) - 112usize];
    ["Offset of field: dyld_all_image_infos::errorKind"]
        [::std::mem::offset_of!(dyld_all_image_infos, errorKind) - 120usize];
    ["Offset of field: dyld_all_image_infos::errorClientOfDylibPath"]
        [::std::mem::offset_of!(dyld_all_image_infos, errorClientOfDylibPath) - 128usize];
    ["Offset of field: dyld_all_image_infos::errorTargetDylibPath"]
        [::std::mem::offset_of!(dyld_all_image_infos, errorTargetDylibPath) - 136usize];
    ["Offset of field: dyld_all_image_infos::errorSymbol"]
        [::std::mem::offset_of!(dyld_all_image_infos, errorSymbol) - 144usize];
    ["Offset of field: dyld_all_image_infos::sharedCacheSlide"]
        [::std::mem::offset_of!(dyld_all_image_infos, sharedCacheSlide) - 152usize];
    ["Offset of field: dyld_all_image_infos::sharedCacheUUID"]
        [::std::mem::offset_of!(dyld_all_image_infos, sharedCacheUUID) - 160usize];
    ["Offset of field: dyld_all_image_infos::sharedCacheBaseAddress"]
        [::std::mem::offset_of!(dyld_all_image_infos, sharedCacheBaseAddress) - 176usize];
    ["Offset of field: dyld_all_image_infos::infoArrayChangeTimestamp"]
        [::std::mem::offset_of!(dyld_all_image_infos, infoArrayChangeTimestamp) - 184usize];
    ["Offset of field: dyld_all_image_infos::dyldPath"]
        [::std::mem::offset_of!(dyld_all_image_infos, dyldPath) - 192usize];
    ["Offset of field: dyld_all_image_infos::notifyPorts"]
        [::std::mem::offset_of!(dyld_all_image_infos, notifyPorts) - 200usize];
    ["Offset of field: dyld_all_image_infos::reserved"]
        [::std::mem::offset_of!(dyld_all_image_infos, reserved) - 232usize];
    ["Offset of field: dyld_all_image_infos::sharedCacheFSID"]
        [::std::mem::offset_of!(dyld_all_image_infos, sharedCacheFSID) - 288usize];
    ["Offset of field: dyld_all_image_infos::sharedCacheFSObjID"]
        [::std::mem::offset_of!(dyld_all_image_infos, sharedCacheFSObjID) - 296usize];
    ["Offset of field: dyld_all_image_infos::compact_dyld_image_info_addr"]
        [::std::mem::offset_of!(dyld_all_image_infos, compact_dyld_image_info_addr) - 304usize];
    ["Offset of field: dyld_all_image_infos::compact_dyld_image_info_size"]
        [::std::mem::offset_of!(dyld_all_image_infos, compact_dyld_image_info_size) - 312usize];
    ["Offset of field: dyld_all_image_infos::platform"]
        [::std::mem::offset_of!(dyld_all_image_infos, platform) - 320usize];
    ["Offset of field: dyld_all_image_infos::aotInfoCount"]
        [::std::mem::offset_of!(dyld_all_image_infos, aotInfoCount) - 324usize];
    ["Offset of field: dyld_all_image_infos::aotInfoArray"]
        [::std::mem::offset_of!(dyld_all_image_infos, aotInfoArray) - 328usize];
    ["Offset of field: dyld_all_image_infos::aotInfoArrayChangeTimestamp"]
        [::std::mem::offset_of!(dyld_all_image_infos, aotInfoArrayChangeTimestamp) - 336usize];
    ["Offset of field: dyld_all_image_infos::aotSharedCacheBaseAddress"]
        [::std::mem::offset_of!(dyld_all_image_infos, aotSharedCacheBaseAddress) - 344usize];
    ["Offset of field: dyld_all_image_infos::aotSharedCacheUUID"]
        [::std::mem::offset_of!(dyld_all_image_infos, aotSharedCacheUUID) - 352usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_shared_cache_ranges {
    pub sharedRegionsCount: usize,
    pub ranges: [dyld_shared_cache_ranges__bindgen_ty_1; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_shared_cache_ranges__bindgen_ty_1 {
    pub start: usize,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_shared_cache_ranges__bindgen_ty_1"]
        [::std::mem::size_of::<dyld_shared_cache_ranges__bindgen_ty_1>() - 16usize];
    ["Alignment of dyld_shared_cache_ranges__bindgen_ty_1"]
        [::std::mem::align_of::<dyld_shared_cache_ranges__bindgen_ty_1>() - 8usize];
    ["Offset of field: dyld_shared_cache_ranges__bindgen_ty_1::start"]
        [::std::mem::offset_of!(dyld_shared_cache_ranges__bindgen_ty_1, start) - 0usize];
    ["Offset of field: dyld_shared_cache_ranges__bindgen_ty_1::length"]
        [::std::mem::offset_of!(dyld_shared_cache_ranges__bindgen_ty_1, length) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dyld_shared_cache_ranges"]
        [::std::mem::size_of::<dyld_shared_cache_ranges>() - 72usize];
    ["Alignment of dyld_shared_cache_ranges"]
        [::std::mem::align_of::<dyld_shared_cache_ranges>() - 8usize];
    ["Offset of field: dyld_shared_cache_ranges::sharedRegionsCount"]
        [::std::mem::offset_of!(dyld_shared_cache_ranges, sharedRegionsCount) - 0usize];
    ["Offset of field: dyld_shared_cache_ranges::ranges"]
        [::std::mem::offset_of!(dyld_shared_cache_ranges, ranges) - 8usize];
};
extern "C" {
    pub static mut dyld_shared_cache_ranges: dyld_shared_cache_ranges;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header {
    pub _address: u8,
}
